INSTALL.Windows

Paweł Pałucha <pawel@praterm.com.pl>

This file describes how to prepare SZARP installation package for Windows.


0. Content.

1. Introduction.
2. Installing cross-compiler.
2.1. Installation.
2.2. Preparing of directories.
2.3. Testing compiler.
3. Installing libraries.
3.1. iconv library.
3.2. expat library.
3.3. zlib library.
3.4. zip library.
3.5. wxWidgets library.
3.5.1 wxWidgets library with wxGraphicsContext
3.6. libxml2 library.
3.7. libxslt library.
3.8. OpenSSL library.
3.9. curl library.
3.10 librsync library.
3.11. Lua (LuaJIT) library.
3.12. c-ares library.
3.13. xmlrpc-epi library.
3.14. boost libraries.
3.15. sqlite library.
3.16. freetype libraray.
3.17. ftgl libraray.
4.1 Set new version.
4.2 Compiling SZARP.
5. Installation package.


1. Introduction.

This document describes how to compile SZARP for Windows, using mingw 
cross-compiler on Debian.


2. Installing cross-compiler.

2.1. Installation.

# apt-get install mingw32 mingw32-binutils mingw32-runtime

2.2. Preparing of directories.

Now create directories for libraries, headers and tools:

# mkdir -p /usr/local/win32/bin
# mkdir  /usr/local/win32/lib
# mkdir  /usr/local/win32/include

Copy mingw DLL library to bin directory, so it's easier for programs to find 
it:

# cp /usr/share/doc/mingw32-runtime/mingwm10.dll.gz /usr/local/win32/bin
# gunzip /usr/local/win32/bin/mingwm10.dll

2.3. Testing compiler.

If you want to check if cross-compiler is working ok, create file named hello.c 
with following content:

#include <stdio.h>
int main(void)
{
	printf("Hello world!\n");
}

Compile it:

# i686-w64-mingw32-gcc hello.c -o hello.exe

File hello.exe should be created. Check type of this file:

# file hello.exe

The output should be something like:

  hello.exe: PE32 executable for MS Windows (console) Intel 80386 32-bit

Now we create GUI program - hellowin.c with content:

#include <windows.h>
int main(int argc, char *argv[])
{
	MessageBox(NULL, "Hello, world!", "Hello, world!", MB_OK);
	return 0;
}

Compilation:

# i686-w64-mingw32-gcc hellowin.c -o hellowin.exe

Checking file type:

# file hellowin.exe

You should see:

  hellowin.exe: PE32 executable for MS Windows (console) Intel 80386 32-bit

To run this program install wine - it is nececcary also for runing configure
later:

# apt-get install wine

Now you can run programs:

# wine hello.exe
# wine hellowin.exe


3. Installing libraries.

Versions of libraries can change, of course.


3.1. iconv library.

wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.13.1.tar.gz
tar xzvf libiconv-1.13.1.tar.gz
cd libiconv-1.13.1
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 \
        --prefix=/usr/local/win32
make
make install
cp lib/.libs/libiconv-2.dll /usr/local/win32/lib/

Now test it:

wine /usr/local/win32/bin/iconv.exe --help

You should see iconv usage instructions.


3.2. expat library.

wget http://downloads.sourceforge.net/project/expat/expat/2.0.1/expat-2.0.1.tar.gz
tar xzvf expat-2.0.1.tar.gz
cd expat-2.0.1
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 \
        --prefix=/usr/local/win32 \
        CPPFLAGS=-I/usr/local/win32/include
make
make install
cp .libs/libexpat-1.dll /usr/local/win32/lib/


3.3. zlib library.

wget http://sourceforge.net/projects/libpng/files/zlib/1.2.3/zlib-1.2.3.tar.gz
tar xzvf zlib-1.2.3.tar.gz
cd zlib-1.2.3
CC=/usr/bin/i686-w64-mingw32-gcc \
	AR="/usr/bin/i686-w64-mingw32-ar -r" \
	RANLIB=/usr/bin/i686-w64-mingw32-ranlib  \
	./configure --prefix=/usr/local/win32
make
make install
i686-w64-mingw32-gcc -Wall -shared adler32.o compress.o crc32.o gzio.o uncompr.o deflate.o trees.o zutil.o inflate.o infback.o inftrees.o inffast.o  -o libz.dll
cp libz.dll /usr/local/win32/lib

3.4. zip library.

wget http://nih.at/libzip/libzip-0.9.tar.bz2
tar xvfj libzip-0.9.tar.bz2
cd libzip-0.9
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 \
        --prefix=/usr/local/win32 \
	--with-zlib=/usr/local/win32 \
	LDFLAGS=-L/usr/local/win32/lib
make
make install


3.5. wxWidgets library.

wget http://prdownloads.sourceforge.net/wxwindows/wxMSW-2.8.10.zip
unzip wxMSW-2.8.10.zip
cd wxMSW-2.8.10

Compilation of the wxWidgets library with wxGraphicsContext feature 
is complicated. It is because:
- it needs a Gdiplus library;
- some modifications of this library should be introduced;
- some modifications of the source and configuration files of the wxWidgets 
library should be done as well. 
All modifications mentioned above will be done for you by INSTALL.wxWidgets.sh
script which is stored in INSTALL.wxWidgets.sh.tgz file. It should correctly 
work for the 2.8.10 version of the wxWidgets and also needs an unrar application. 
To decompress this script use tar application: 
tar -xzvf INSTALL.wxWidgets.sh.tgz
If you want to edit this script, please do it carefully. It is because, some 
correct (Windows) "end of line" characters will be lost (or changed) and some 
patch operations (of Gdiplus files) will be failed.

workaround steps:
tar -xzvf INSTALL.wxWidgets.sh.tgz
apply patches: ./INSTALL.wxWidgets.sh
cp wxWidgets-2.8.10/lib/libgdiplus.a /usr/local/win32/lib/
rm -rf wxWidgets-2.8.10*
and compile wxWidgets with libgidplus configured properly: ./INSTALL.wxWidgets.sh
adjust ./configure in the scrip to your needs.

3.6. libxml2 library.

wget ftp://xmlsoft.org/libxml2/libxml2-2.7.3.tar.gz
tar xzvf libxml2-2.7.3.tar.gz
cd libxml2-2.7.3
./configure --host=i686-w64-mingw32 \
	--prefix=/usr/local/win32 \
        --target=i686-w64-mingw32 \
	--enable-ipv6=no \
	--with-iconv=/usr/local/win32 \
	--with-zlib=/usr/local/win32 \
	--without-python
make
make install
cp .libs/libxml2-2.dll /usr/local/win32/lib

if the library doesn't compile, try using i586-mingw32msvc as the host

Testing:

wine /usr/local/win32/bin/xmllint.exe --version


3.7. libxslt library. 

first, make sure libxml2 is installed properly

wget ftp://xmlsoft.org/libxml2/libxslt-1.1.24.tar.gz
tar xzvf libxslt-1.1.24.tar.gz
cd libxslt-1.1.24
./configure --host=i686-w64-mingw32 \
        --prefix=/usr/local/win32 \
        --target=i686-w64-mingw32 \
	--with-libxml-prefix=/usr/local/win32 \
	--without-python \
	--without-crypto
make
make install

if the library doesn't compile, try using i586-mingw32msvc as the host

Testing:

wine /usr/local/win32/bin/xsltproc.exe --version


3.8. OpenSSL library.
As of version 1.0 OpenSSL supports cross-compilation out of the box, so the process
is as simple as:

wget http://openssl.org/source/openssl-1.0.0g.tar.gz
tar -zxvf openssl-1.0.0g.tar.gz
cd openssl-1.0.0g
./Configure --prefix=/usr/local/win32/ --cross-compile-prefix=i686-w64-mingw32- shared mingw zlib -I/usr/local/win32/include -L/usr/local/win32/lib
make install


3.9 c-ares library.

wget http://c-ares.haxx.se/download/c-ares-1.6.0.tar.gz
tar xzvf c-ares-1.6.0.tar.gz
cd c-ares-1.6.0
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 --enable-shared \
 --prefix=/usr/local/win32/ --without-random
make
make install
cp .libs/libcares-2.dll /usr/local/win32/lib/

3.10 librsync library.

We need to patch sources before compiling:

wget http://downloads.sourceforge.net/librsync/librsync-0.9.7.tar.gz
tar xzf librsync-0.9.7.tar.gz
cd librsync-0.9.7
patch -p0 <<EOF
diff -ur ../../librsync-0.9.7/configure.ac ./configure.ac
--- configure.ac        2006-02-09 15:59:41.000000000 +0100
+++ configure.ac        2006-02-09 14:59:53.000000000 +0100
@@ -24,6 +24,7 @@
 AC_PROG_CPP
 AC_PROG_INSTALL
 AC_PROG_MAKE_SET
+AC_LIBTOOL_WIN32_DLL
 AC_PROG_LIBTOOL

 # Checks for libraries.
diff -ur ../../librsync-0.9.7/Makefile.am ./Makefile.am
--- Makefile.am 2004-02-08 00:17:57.000000000 +0100
+++ Makefile.am 2006-02-09 14:59:11.000000000 +0100
@@ -47,7 +47,7 @@

 librsync_la_LIBADD = @LIBOBJS@

-librsync_la_LDFLAGS = -version-info @librsync_libversion@
+librsync_la_LDFLAGS = -no-undefined -version-info @librsync_libversion@

 # This is the default for any programs that don't specify a preference.
 LDADD = librsync.la
EOF

./autogen.sh
./configure --prefix=/usr/local/win32 \
	--enable-shared --host=i686-w64-mingw32 \
	--with-gnu-ld
make
make install
cp .libs/librsync* /usr/local/win32/lib/
cp librsync*.h /usr/local/win32/include/

3.11. Lua (LuaJIT) library.

wget http://luajit.org/download/LuaJIT-1.1.5.tar.gz
tar xzvf LuaJIT-1.1.5.tar.gz
cd LuaJIT-1.1.5

Now edit src/Makefile and set values:

CC= i686-w64-mingw32-gcc
RANLIB= i686-w64-mingw32-strip
(RANLIB is set in mingw target section)

Compile and copy files:

make mingw
cp src/*.h etc/lua.hpp /usr/local/win32/include/
cp src/lua51.dll /usr/local/win32/lib/liblua.dll
cp src/lua51.dll /usr/local/win32/lib/lua51.dll
mkdir -p /usr/local/win32/lib/pkgconfig/
cp etc/*.pc /usr/local/win32/lib/pkgconfig/

3.12. curl library.
(you should install c-ares first see 3.9)

wget http://curl.haxx.se/download/curl-7.19.5.tar.gz
tar xzvf curl-7.19.5.tar.gz
cd curl-7.19.5
./configure --host=i686-w64-mingw32 \
	--prefix=/usr/local/win32 \
	--target=i686-w64-mingw32 \
	--with-zlib=/usr/local/win32 \
	--with-ssl=/usr/local/win32 \
	--enable-ares \
	--without-random
make
make install
cp src/curl.exe /usr/local/win32/bin/



if the library doesn't compile, edit the src/main.c file: remove static keyword in line that causes error.
if the issue remais, downgrade your autotools, automake, autoconf, libtools, autoconf-archive to version from 2014.12.01

3.13. xmlrpc-epi library.

wget http://downloads.sourceforge.net/project/xmlrpc-epi/xmlrpc-epi-base/0.54.1/xmlrpc-epi-0.54.1.tar.gz
tar xzvf xmlrpc-epi-0.54.1.tar.gz
cd xmlrpc
./autogen.sh
CONFIG_SHELL=/bin/bash ./configure \
	--host=i686-w64-mingw32 --target=i686-w64-mingw32 \
	--prefix=/usr/local/win32 \
	--includedir=/usr/local/win32/include/xmlrpc-epi \
	--with-expat=/usr/local/win32 \
	CPPFLAGS="-I/usr/local/win32/include -D_MSC_VER" \
	LDFLAGS=-L/usr/local/win32/lib \
	LIBS="-liconv"
make
make install

if the library complains about libxml2: make distclean and configure again. Also, try adding -lxml2 to flags.

3.14. boost libraries.

Download and unpack boost source distribution:
wget http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.gz
tar -zxf boost_1_55_0.tar.gz

enter boost source main directory and:
cd boost_1_55_0

check your gcc version:
i686-w64-mingw32 -v

* add line
using gcc : <version> : i686-w64-mingw32-g++ ;
somethere to tools/build/v2/user-config.jam


* issue command:
./b2 --layout=system --without-mpi --without-graph --without-graph_parallel --without-iostreams --without-python --without-math  variant=release threading=multi link=shared runtime-link=shared toolset=gcc target-os=windows threadapi=win32 stage

and that's it. Headers are located in boost directory, compiled libraries 
in stages/lib. Copy headers to /usr/local/boost/include and librarires to 
/usr/local/boost/lib :

mkdir -p /usr/local/boost/include
cp -a boost/ /usr/local/boost/include/
cp -a stage/lib/ /usr/local/boost/

3.15. sqlite library.

wget http://www.sqlite.org/sqlite-amalgamation-3.6.16.tar.gz
tar xzvf sqlite-amalgamation-3.6.16.tar.gz
cd sqlite-3.6.16
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 \
        --prefix=/usr/local/win32 
make
make install

3.16 freetype library.

wget http://downloads.sourceforge.net/project/freetype/freetype2/2.4.4/freetype-2.4.4.tar.gz
tar -zxvf freetype-2.4.4.tar.gz
cd freetype-2.4.4
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 --prefix=/usr/local/win32
make
make install

3.17 ftgl libraray.

wget http://downloads.sourceforge.net/project/ftgl/FTGL%20Source/2.1.3%7Erc5/ftgl-2.1.3-rc5.tar.gz
tar xzf ftgl-2.1.3-rc5.tar.gz
cd ftgl-2.1.3~rc5
save following patch into file:
--- m4/gl.m4	2008-05-05 16:48:57.000000000 +0200
+++ m4/gl.m4	2010-02-22 00:38:09.000000000 +0100
@@ -54,19 +54,23 @@
 
 AC_MSG_CHECKING([for GL library])
 if test "x$with_gl_lib" != "x" ; then
-    if test -d "$with_gl_lib" ; then
+    if test -d "$with_gl_lib" -a "x$host_os" != "xmingw32msvc" ; then
         LIBS="-L$with_gl_lib -lGL"
+    elif test -d "$with_gl_lib"; then
+        LIBS="-L$with_gl_lib -lopengl32"
     else
         LIBS="$with_gl_lib"
     fi
-else
+elif test "x$host_os" != "xmingw32msvc"; then
     LIBS="-lGL"
+else
+    LIBS="-lopengl32"
 fi
-AC_LINK_IFELSE([AC_LANG_CALL([],[glBegin])],[HAVE_GL=yes], [HAVE_GL=no])
+AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <GL/gl.h>],[glBegin(0)])],[HAVE_GL=yes], [HAVE_GL=no])
 if test "x$HAVE_GL" = xno ; then
     if test "x$GL_X_LIBS" != x ; then
         LIBS="-lGL $GL_X_LIBS"
-        AC_LINK_IFELSE([AC_LANG_CALL([],[glBegin])],[HAVE_GL=yes], [HAVE_GL=no])
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <GL/gl.h>],[glBegin(0)])],[HAVE_GL=yes], [HAVE_GL=no])
     fi
 fi
 if test "x$HAVE_GL" = xyes ; then
@@ -103,12 +107,19 @@
 if test "x$FRAMEWORK_OPENGL" = "x" ; then
 
 AC_MSG_CHECKING([for GLU library])
-LIBS="-lGLU $GL_LIBS"
-AC_LINK_IFELSE([AC_LANG_CALL([],[gluNewTess])],[HAVE_GLU=yes], [HAVE_GLU=no])
+if test "x$host_os" != "xmingw32msvc" ; then
+    LIBS="-lGLU $GL_LIBS"
+else
+    LIBS="-lglu32 $GL_LIBS"
+fi
+AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <GL/glu.h>],[gluNewTess()])],[HAVE_GLU=yes], [HAVE_GLU=no])
 if test "x$HAVE_GLU" = xno ; then
-    if test "x$GL_X_LIBS" != x ; then
+    if test "x$GL_X_LIBS" != x -a "x$host_os" != "xmingw32msvc" ; then
         LIBS="-lGLU $GL_LIBS $GL_X_LIBS"
-        AC_LINK_IFELSE([AC_LANG_CALL([],[gluNewTess])],[HAVE_GLU=yes], [HAVE_GLU=no])
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <GL/glu.h>],[gluNewTess()])],[HAVE_GLU=yes], [HAVE_GLU=no])
+    elif test "x$GL_X_LIBS" != x; then
+        LIBS="-lglu32 $GL_LIBS $GL_X_LIBS"
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <GL/glu.h>],[gluNewTess()])],[HAVE_GLU=yes], [HAVE_GLU=no])
     fi
 fi
 if test "x$HAVE_GLU" = xyes ; then

patch sources: patch -p0 < file
./autogen.sh
./configure --host=i686-w64-mingw32 --target=i686-w64-mingw32 --with-ft-prefix=/usr/local/win32 --without-x --prefix=/usr/local/win32 --disable-freetypetest
make ECHO=echo
make ECHO=echo install

4.1 Set new version
Edit file 'version' in main source directory and set a new version and current date.
Version you can find in the 'debian/changelog' file, take the newest.
Example content of file 'version':
3.1.526 2011-04-13

4.2 Compiling SZARP.

make sure you have following packages:
python2.7
jade
convert
autoconf-archive
docbook
docbook-dsssl

or issue: apt-get build-dep szarp
with szarp's repo in sources.

In SZARP source directory run:

./autogen.sh

Source directory must be cleaned, if it is not - use 'fakeroot make distclean' first.
Create build catalog and enter it:

mkdir winbuild
cd winbuild

Running configure:


./configure --host=i686-w64-mingw32  \
	--target=i686-w64-mingw32  \
	--with-xml-prefix=/usr/local/win32  \
	--with-xslt-prefix=/usr/local/win32 \
	--with-curl-prefix=/usr/local/win32 \
	--with-wx-config=/usr/local/win32/lib/wx/config/i686-w64-mingw32-msw-unicode-release-2.8 \
	--with-ssl-prefix=/usr/local/win32/ssl \
	--with-rsync-prefix=/usr/local/win32 \  --with-xmprpc-epi-prefix=/usr/local/win32  \
	--with-lua-prefix=/usr/local/win32 \
	LDFLAGS="-L/usr/local/win32/lib"   \
	LIBS="-lexpat -liconv -lxml2" \
	CPPFLAGS="-fpermissive -O2  -I/usr/local/win32/include -I/usr/local/win32/include/freetype2"  \
	CFLAGS="-DCURL_STATICLIB"  \
	CXXFLAGS="-I/usr/local/win32/include -DCURL_STATICLIB -std=gnu++0x -fpermissive"  \
	PKG_CONFIG_PATH=/usr/local/win32/lib/pkgconfig/ \
	--with-xml-exec-prefix=/usr/local/win32/ \
	--with-boost=/usr/local/win32/boost-1.55 \
	--with-boost-thread=boost_thread_win32   \
	--with-boost-program-options=boost_program_options \
	--with-boost-date-time=boost_date_time \
	--with-boost-filesystem=boost_filesystem \
	--with-boost-system=boost_system.dll \
	--disable-xmltest \
	--with-mingw32 \
	--with-ssl-dll-eay-name=libeay32 \
	--with-ssl-dll-name=ssl \
	--with-python


Output should end with something like:

SZARP 3.1 configured.
Build host type:              i686-pc-linux-gnu
Configured for host type:     i586-pc-mingw32msvc
Configured with ICU:               yes
Configured with X windows:         no
Configured with wxWidgets:         yes
Configured with newt:              no
Configured with OpenSSL:           yes
Configured with xmlrpc-epi:        yes
Configured with PAM:               no
Configured with curl:              yes
Configured with rsync:             yes
Configured with lua:               yes
Configured with FTGL:              yes
Configured with GDK-2.0:           no
Configured with python 2.4         yes
Configured with ldap               no
Configured with lber               no
Configured with sqlite3            yes
Configured with vmime              no
Configured with libevent           yes
Configured with c-ares             yes
Configured with boost              yes
Configured with boost filesystem   yes
Configured with boost date time    yes
Configured with boost regex        yes
Configured with boost thread       yes
Configured with boost system       yes
Configured with boost program opts yes
Configured with zip                yes
Configured for .deb build:         no
Source directory:             ..
Install prefix:               /opt/szarp
Subdirs to include:           libSzarp libSzarp2 extern wx utils resources script


if configure doesn't find boost, check if headers are in /usr/local/boost/include/boost. Also try changing version of autoconf-archive.


Compilation:

make

In wx subdirectories we should get *.exe files. We need also to generate
documentation:

make doc


5. Installation package.

SZARP must be compiled according to previous instructions.
We use NSIS to create installation package, so we need to install it:

apt-get install nsis

Debian version of nsis does not include some required plugins, so we need
to download KillProc plugin (http://nsis.sourceforge.net/KillProc_plug-in) separately:
wget http://mulder.googlecode.com/files/NSIS-KillProc-Plugin.2011-04-09.zip
(old version: wget http://mulder.dummwiedeutsch.de/pub/downloads/testing/NSIS-KillProc-Plugin.2006-12-16.zip)
unzip NSIS-KillProc-Plugin.2011-04-09.zip
cp KillProc.dll /usr/share/nsis/Plugins

Then:

make winsetup

It should create SzarpSetup.exe in wx subdirectory.
That's all, folks!
