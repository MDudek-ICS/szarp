<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY szarp-info SYSTEM "../common/szarp-info.sgml">
]>

<!--
	$Id: ipk.sgml 6720 2009-05-13 14:18:44Z koder $
 -->

<book lang="pl" id="szarp">

<bookinfo>

&szarp-info;

<title>System SZARP - dokumentacja techniczna</title>

<subtitle>SZARP v.3.1</subtitle>
<authorgroup>
<author><firstname>Micha³</firstname><surname>Blajerski</surname></author>
<author><firstname>S³awomir</firstname><surname>Chy³ek</surname></author>
<author><firstname>Marcin</firstname><surname>Goliszewski</surname></author>
<author><firstname>Jaros³aw</firstname><surname>Janik</surname></author>
<author><firstname>Pawe³</firstname><surname>Kolega</surname></author>
<author><firstname>Dariusz</firstname><surname>Marcinkiewicz</surname></author>
<author><firstname>Pawe³</firstname><surname>Pa³ucha</surname></author>
<author><firstname>Adam</firstname><surname>Smyk</surname></author>
</authorgroup>

<abstract>

<para>
Niniejszy dokument opisuje ró¿ne zagadnienia zwi±zane z systemem SZARP,
nieinteresuj±ce z punktu widzenia zwyk³ego u¿ytkownika. Jest przeznaczony dla
osób rozwijaj±cych aplikacje czy te¿ konfiguruj±cych system.
</para>

<para>
$Id: ipk.sgml 6720 2009-05-13 14:18:44Z koder $
</para>

</abstract>

</bookinfo>

<chapter id="install">
<title>Instalacja systemu SZARP</title>

<para>
Instalacja systemu SZARP wymaga instalacji i przygotowania systemu Linux. Wspierana dystrybucja
to Debian GNU/Linux w wersji najnowszej stabilnej (Lenny) lub niestabilnej (Sid). Zainstalowany powinien byæ podstawowy system wraz ze ¶rodowiskiem graficznym KDE lub GNOME (ew. inne wspieraj±ce standard Freedesktop). Do prawid³owego dzia³ania czê¶ci programów zw³aszcza konsolowych wymagane jest ustawienie kodowania w systemie (locales) na pl_PL.ISO-8859-2 (a nie pl_PL.UTF-8). Prawdopodobnie bez wiêkszych problemów SZARP powinien dzia³aæ tak¿e na Ubuntu, choæ nie jest to regularnie testowane. Przystosowanie SZARP'a do dzia³ania pod inn± dystrybucj± jest oczywi¶cie mo¿liwe, ale mo¿e wymagaæ sporo pracy.
</para>
<para>
Bezpo¶rednia kompilacja oprogramowania ze ¼róde³ jest oczywi¶cie mo¿liwa, ale podstawow± metod± instalacji jest instalacja z pakietów Debiana. W zwi±zku z tym standardowa instalacja ze ¼róde³ mo¿e wymagaæ rêcznych poprawek (zak³adanie u¿ytkowników, ustawianie uprawnieñ), które normalnie wykonywane s± poczas instalacji pakietów.
</para>
<para>
Repozytorium SVN ze ¼ród³ami dostêpne jest na stronie SourceForge projektu - 
<ulink url="http://sourceforge.net/projects/szarp">sourceforge.net/projects/szarp</ulink>.
Programy klienckie dostêpne s± te¿ w wersji dla Windows - ze strony powy¿ej mo¿na ¶ci±gn±æ
instalator.
</para>

<section id="install-libs">
<title>Wymagane biblioteki i programy</title>

<para>
W chwili obecnej zalecan± metod± instalacji systemu SZARP jest u¿ycie
pakietów binarnych, zamiast bezpo¶redniej kompilacji ze ¼róde³. Zwalnia
to u¿ytkownika z konieczno¶ci rêcznej instalacji wymaganych bibliotek.
</para>
<para>
Wiêkszo¶æ wymaganych przez system bibliotek jest standardowo obecna we
wspó³czesnych dystrybucjach Linuksa. Spis wiêkszo¶ci wymaganych do kompilacji narzêdzi i biliotek
znajduje siê w pliku <filename>debian/control</filename> w polu <emphasis>Build-Depends</emphasis>. 
Lista wymaganych bibliotek i programów jest wypisywana przez skrypt <filename>./configure</filename> 
w g³ównym katalogu ¼róde³ - skrypt informuje o tym czego mu brakuje.
Do tworzenia dokumentacji potrzebne s± narzêdzia jade (lub openjade) wraz z
zainstalowanym docbookiem, pdfjadetex i ImageMagic (convert).
</para>

</section> <!-- install-libs -->

<section id="install-compile">
<title>Kompilacja i instalacja systemu</title>

<para>
Sposób kompilacji i instalacji systemu SZARP jest dok³adnie opisany w pliku 
INSTALL znajduj±cym siê w g³ównym katalogu ze ¼ród³ami systemu. W wiêkszo¶ci
przypadków sprowadza siê to do wydania w katalogu ze ¼ród³ami komend:
<programlisting>
<![CDATA[
./autogen.sh
./configure
make
make doc
su
make install
]]>
</programlisting>
</para>

</section> <!-- install-compile -->

<section id="install-deb">
<title>Instalacja pakietów binarnych</title>

<section id="install-deb-preparation">
<title>Przygotowanie systemu</title>
<para>
	System SZARP dostêpny jest tak¿e w postaci pakietów deb. 
	Instalacjê nale¿y
rozpocz±æ od dodania wpisów do pliku
<filename>/etc/apt/sources.list</filename>:
<programlisting>
deb http://www.szarp.org/debian stable main non-free
deb http://www.szarp.com.pl/debian unstable main non-free
</programlisting>
Oczywi¶cie, mo¿emy dodaæ tylko jedn± z w/w linii je¿eli zamierzamy korzystaæ
tylko i wy³±cznie z jednej wersji SZARPa. Zalecane jest jednak, by plik
sources.list zawiera³ wszystkie wymienione wpisy, umo¿liwi to potem zmianê
u¿ywanej wersji SZARPa za pomoc± skryptów konfiguracyjnych paczki
<emphasis>szarp-updater</emphasis>.  Kolejno¶æ wpisów ma znacznie,
<emphasis>apt-get</emphasis> stara siê instalowaæ pakiety ze ¼ród³a, które
wystêpuje jako pierwsze, zachowanie to mo¿na zmieniæ opcj±
<emphasis>-t</emphasis> programu 
<emphasis>apt-get</emphasis> (np. <emphasis>apt-get -t stable</emphasis>)
</para>
<para>
¦ci±gamy indeksy repozytorium komend±:
<programlisting>
apt-get update
</programlisting>
Za pomoc± komendy:
<programlisting>
apt-cache search szarp
</programlisting>
mo¿emy przejrzeæ listê dostêpnych pakietów zwi±zanych z SZARP'em, szczegó³y dotycz±ce
konkretnego pakietu mo¿emy obejrzeæ wywo³uj±c komendê np.
<programlisting>
apt-cache show szarp-server
</programlisting>
</para>

</section> <!-- install-deb-preparation -->
<section id="install-deb-role-choosing">
<title>Wybór roli</title>
<para>
Podczas instalacji musimy zdecydowaæ jak± rolê ma pe³niæ komputer, na którym
uruchamiamy system SZARP: serwera, terminala lub te¿ s³u¿y³ bêdzie jedynie do
przegl±dania baz. Dla ka¿dej z tych ról przewidziana jest oddzielna paczka, s±
to odpowiednio: <emphasis>szarp-server</emphasis>,
<emphasis>szarp-terminal</emphasis> oraz <emphasis>szarp-viewer</emphasis>.
</para>
<para>
Instalujemy wybran± paczkê np. nastêpuj±c± komend±:
<programlisting>
apt-get install szarp-terminal
</programlisting>
</para>

<para>
W trakcie instalacji nale¿y odpowiedzieæ na kilka pytañ, na podstawie
udzielonych odpowiedzi zostanie stworzona konfiguracja systemu, niektóre
pytania s± specyficzne dla pewnych pakietów.
<itemizedlist>

<listitem><para><emphasis>szarp-server</emphasis></para>

<itemizedlist> 

<listitem><para>Skrypt poprosi o podanie prefiksu konfiguracji,
wpisujemy tutaj odpowiedni± nazwê.  Nale¿y zaznaczyæ, ¿e skrypt startowy
(parstart) wymaga by nazwa serwera, zwracana przez komendê <command>hostname
-s</command>, by³a identyczna z prefiksem konfiguracji, w przeciwnym wypadku
demony w³a¶ciwe dla serwera nie zostan± uruchomione.
</para></listitem>

<listitem><para>Mo¿emy tak¿e zostaæ zapytani, czy chcemy by zosta³ utworzony
katalog szbase w katalogu <filename>/opt/szarp/prefix</filename>, gdzie prefix
jest podan± nazw± prefiksu. Zwykle 
nale¿y odpowiedzieæ twierdz±co na to pytanie.</para></listitem>
</itemizedlist>

<listitem> <para><emphasis>szarp-terminal</emphasis></para>
<para>Proces konfiguracji paczki przebiega podobnie jak pakietu
<emphasis>szarp-server</emphasis>, pojawiaj± siê jedynie dwa dodatkowe pytania:

<itemizedlist><listitem><para>Czy chcemy by adres serwera zosta³ dodany do pliku
<filename>/etc/hosts</filename>. W przypadku typowych instalacji odpowied¼ na
to pytanie powinna byæ twierdz±ca.</para></listitem> <listitem><para>Je¿eli na
poprzednie pytanie odpowiedzieli¶my twierdz±co, zostaniemy poproszeni o
wprowadzenie adresu serwera</para></listitem>
</itemizedlist>
</para>

<listitem><para><emphasis>szarp-viewer</emphasis></para>
	<para>Podczas instalacji paczki zostaniemy poproszeni o wybranie sposobu aktualizacji
		danych z serwera.</para>
</listitem>
</itemizedlist>
</section> <!-- install-deb-role-choosing -->

<section id="install-deb-packages-update">
<title>Aktualizacja pakietów</title>

<para>Pakiet <emphasis>szarp-updater</emphasis> s³u¿y do aktualizacji systemu,
podczas konfiguracji pakietu nale¿y zdecydowaæ jakiego wydania systemu SZARPa
chcemy u¿ywaæ. Do wyboru s± trzy standardowe: <emphasis>stabilne</emphasis>,
<emphasis>testowe</emphasis> oraz <emphasis>niestabilne</emphasis>.  Ponadto
mo¿na wybraæ opcjê <emphasis>inne</emphasis>, wtedy samodzielnie musimy
okre¶liæ nazwê wydania.  Próba aktualizacji odbywa siê raz na dobê, je¿eli
pojawi siê nowa wersja systemu zostanie ona zainstalowana.</para>
<para>
Wersja stabilna jest zalecana do u¿ycia w ¶rodowisku produkcyjnym, zawiera poprawki
wszystkich krytycznych b³êdów oraz w miarê regularnie dodawane nowe funkcje - po ich przetestowaniu.
Wersja niestabilna jest czêsto budowan± wersj± dewelopersk±, zawieraj±c± najnowsze funkcje. Zalecana
jest do u¿ycia w mniej krytycznych zastosowaniach - czyli np. tam gdzie realizowany jest
tylko podgl±da danych.
</para>
</section> <!-- install-deb-packages-update -->

<section id="install-deb-packages-description">
<title>Opis pakietów</title>
<para> Poni¿ej zosta³y opisane g³ówne pakiety sk³adaj±ce siê na system
SZARP. Szczegó³owy, najbardziej aktualny spis zawarto¶ci poszczególnych
pakietów znajduje siê w pliku <filename>debian/control</filename> w katalogu
¼róde³ systemu. 
<itemizedlist>

<listitem><para><emphasis>szarp-base</emphasis> - na pakiet ten sk³adaj± siê
podstawowe komponenty systemu, takie jak: schematy DTD, skrypty do nawi±zywanie
po³±czeñ ppp, aktualizacji pakietów deb, <emphasis>szrsync</emphasis>, skrypty
xslt.<para></listitem>

<listitem><para><emphasis>szarp-daemons</emphasis> - zawiera demony systemu
SZARP: <emphasis>parcook</emphasis>, <emphasis>meaner3</emphasis>,
<emphasis>analiza</emphasis>, <emphasis>netpard</emphasis> oraz demony
linii.</para></listitem>

<listitem><para><emphasis>szarp-utils</emphasis> - w tym pakiecie znajduj± siê
narzêdzia, s³u¿±ce do konwersji konfiguracji miêdzy formatami IPK oraz SZARP
2.1, edycji baz danych szbase, skrypty do odpytywania wêz³ów po³±czonych za
pomoc± modemów analogowych oraz ISDN, programy <emphasis>sendhex</emphasis>
oraz <emphasis>sendhex-wrapper</emphasis>.</para></listitem>

<listitem><para><emphasis>szarp-scripts</emphasis> na pakiet sk³adaj± siê
ró¿ne pomocnicze skrypty.</para></listitem>

<listitem><para><emphasis>szarp-wx</emphasis>
to zbiór aplikacji klienckich SZARP wykorzystuj±cych bibliotekê wxWidgets. W jego sk³ad wchodz±
programy <emphasis>draw3</emphasis>, <emphasis>ipkedit</emphasis>,
<emphasis>ekstraktor3</emphasis>, <emphasis>kontroler3</emphasis>,
<emphasis>raporter3</emphasis>, <emphasis>wxhelp</emphasis>,
<emphasis>SCC</emphasis> oraz <emphasis>synchronizator</emphasis>,
<emphasis>filler</emphasis>.</para></listitem>

<listitem><para><emphasis>szarp-paramd</emphasis> w pakiecie umieszczono
serwer <emphasis>paramd</emphasis> udostêpniaj±cy warto¶ci parametrów za
pomoc± protoko³u HTTP.</para></listitem>

<listitem><para><emphasis>szarp-xsltd</emphasis> zawiera pliki konfiguracyjne,
konieczne do uruchomienia serwera dla programów raporter3 i kontroler.
</para></listitem>

<listitem><para><emphasis>szarp-sss</emphasis> zawiera skrypty dla pomocniczego
serwera (mirrora) baz danych SZARP.</para></listitem>

<listitem><para><emphasis>szarp-sssweb</emphasis> zawiera interfejs WWW
do administracji u¿ytkownikami korzystaj±cymi z synchronizatora danych SZARP.
</para></listitem>

<listitem><para><emphasis>szarp-doc-html</emphasis> oraz
<emphasis>szarp-doc-pdf</emphasis> to pakiety zawieraj±ce dokumentacjê systemu
SZARP w formatach html oraz pdf.</para></listitem>

<listitem><para><emphasis>szarp-doc-server</emphasis> to dokumentacja systemu
SZARP przeznaczona do instalacji na serwer WWW.</para></listitem>

<listitem><para><emphasis>szarp-server</emphasis>,
<emphasis>szarp-terminal</emphasis>, <emphasis>szarp-viewer</emphasis> 
paczki s³u¿± do konfiguracji systemu do pracy w okre¶lonej roli, szczegó³owo 
ich u¿ycie zosta³o opisane w rozdziale Wybór roli <xref linkend="install-deb-role-choosing">.
</para></listitem>

<listitem><para><emphasis>szarp-updater</emphasis> to paczka do automatycznej aktualizacji wersji systemu SZARP.</para></listitem>

</itemizedlist>

</section> <!-- install-deb-packages-description -->

</section> <!-- install-deb -->

<section id="install-dirs">
<title>Struktura katalogów</title>

<para>
Ca³o¶æ systemu SZARP znajduje siê domy¶lnie w katalogu
<filename>/opt/szarp</filename>.
</para>

<para>
W podkatalogu <filename>/opt/szarp/bin</filename> znajduj± siê programy
u¿ytkowe systemu.
</para>

<para>
W podkatalogu <filename>/opt/szarp/resources</filename> znajduj± siê ró¿nego
rodzaju dane wykorzystywane przez system. W szczególno¶ci w podkatalogu
<filename>/opt/szarp/resources/documentation</filename> znajduje siê
dokumentacja systemu.
</para>

<para>
	W podkatalogu <filename>/opt/szarp/lib</filename> znajduj± siê biblioteki wykorzystywane
	przez programy SZARP, miêdzy innymi modu³y Pythona.
</para>

<para>Ka¿da <emphasis>konfiguracja</emphasis> (czyli zestaw plików
konfiguracyjnych a tak¿e bazy z danymi historycznymi systemu) znajduje siê w
katalogu <filename>/opt/szarp/&lt;prefix&gt;</filename>, gdzie
<emphasis>prefix</emphasis> jest nazw± systemu, tak± sam± jak nazwa serwera
SZARP obs³uguj±cego dan± konfiguracjê. Tradycyjnie jest to czteroliterowy
skrót nazwy miast, np. zamo dla Zamo¶cia, gcwp dla ciep³owni WP w Gliwicach
itp.</para>

<para>Katalogów z konfiguracjami mo¿e byæ na jednym komputerze wiele, gdy¿
system umo¿liwia przegl±danie danych z wielu konfiguracji. Przyk³adowo
instalacja w Gliwicach sk³ada siê z trzech serwerów o nazwach gliw, gcie i
gcwp. Na komputerze gliw-t1 (terminal systemu SZARP) bêd± siê znajdowaæ
konfiguracje ze wszystkich trzech serwerów, a wiêc katalogi
<filename>/opt/szarp/gliw</filename>, <filename>/opt/szarp/gcie</filename> i
<filename>/opt/szarp/gcwp</filename>.
</para>

<para>W katalogu <filename>/opt/szarp/&lt;prefix&gt;</filename> mog± znajdowaæ
siê nastêpuj±ce podkatalogi:
<itemizedlist>

<listitem><para>
<filename>config</filename> - katalog z konfiguracj± dla danego systemu.
Zwykle przy zmianach konfiguracji tworzy siê nowy katalog o nazwie
zawieraj±cej informacjê o dacie modyfikacji konfiguracji, np.
<filename>config20040317</filename> (konfiguracja z 17 marca 2004). Wtedy sam
katalog <filename>config</filename> jest linkiem symbolicznym na odpowiedni
katalog. W nowszych instalacjach u¿ywany jest tylko katalog <filename>config</filename>,
ale jest on kopi± robocz± repozytorium SVN zawieraj±cego ca³± historiê konfiguracji.
</para></listitem>

<listitem><para>
<filename>szbase</filename> - zawiera bazê danych historycznych w 
formacie SzarpBase.
</para></listitem>

</itemizedlist>

</para>

<para>
O ile podkatalog <filename>config</filename> zawiera opis konfiguracji
sterowników, parametrów, raportów, wykresów itp. zwi±zany z jak±¶ instalacj±
fizyczn± systemu (zobacz <xref linkend="ipk">), to opcje konfiguracji 
programów wchodz±cych w sk³ad systemu SZARP znajduj± siê w pliku
<filename>/etc/szarp/szarp.cfg</filename> w formacie opisanym w 
<xref linkend="libpar-format">. W instalacjach systemu "na obiektach" (w
przeciwieñstwie do instalacji np. w domach u¿ytkowników ogl±daj±cych dane z
kilku systemów) zwykle plik <filename>szarp.cfg</filename> jest wspólny dla
wszystkich serwerów i terminali na obiekcie. Plik umieszcza siê wtedy w
katalogu <filename>/opt/szarp/&lt;prefix&gt;</filename> jednego z serwerów i
na wszystkich komputerach na obiekcie tworzy siê linki symboliczne
<filename>/etc/szarp/szarp.cfg</filename> wskazuj±ce na ten plik.
Dodatkow± zalet± takiego rozwi±zania jest to, ¿e dziêki mechanizmowi BODAS
zmiany konfiguracji s± przegrywane automatycznie.
</para>

<para>Podobn± konwencjê linku od odpowiedniego katalogu
<filename>/opt/szarp/&lt;prefix&gt;</filename> stosuje siê w przypadku pliku
<filename>/etc/szarp/parstart.cfg</filename>, opisuj±cego sk³adniki systemu
SZARP jakie maj± byæ uruchomione przy starcie systemu. Plik ten jest
wykorzystywany przez skrypt startowy <filename>/etc/init.d/parstart</filename>.
</para>

</section> <!-- install-dirs -->

<section id="install-kde">
<title>Konfiguracja w ¶rodowisku KDE albo window managerze</title>

<para>
Zalecanym obecnie sposobem jest, zamiast dodawania wpisów do menu
mened¿era okien, u¿ycie
programu SCC (Szarp Control Center). Szczegó³y s± opisane w 
<ulink url="http://www.szarp.org/szarp/doc/scc/html/scc.html">
dokumentacji programu SCC</ulink>.
</para>

</section> <!-- install-kde -->

<section id="install-checklist">
<title>Na skróty, czyli o czym pamiêtaæ przy instalacji serwera/terminala systemu SZARP</title>
<para>
Poni¿ej umieszczona lista obejmuje czynno¶ci, które trzeba wykonaæ podczas 
instalacji serwera/terminala SZARP. Nale¿y zatem:

<itemizedlist>

<listitem><para>
Ustawiæ w BIOS'ie automatyczne wstawanie po zaniku napiêcia.
</para></listitem>

<listitem><para>
Zainstalowaæ Debiana, w razie potrzeby zaktualizowaæ do najnowszej wersji.
</para></listitem>

<listitem><para>
Zainstalowaæ system SZARP z paczkami odpowiednimi dla serwera lub terminala.
Nie zapomnieæ, ¿e instalacja szarp-server nie powoduje automatycznej instalacji
szarp-wx.
</para></listitem>

<listitem><para>
Ustawiæ mo¿liwo¶æ zdalnego logowania tylko na root'a, aby nie nara¿aæ systemu przez
s³abe has³a u¿ytkowników - w <filename>/etc/ssh/sshd_config</filename>:
<programlisting>
AllowUsers root
</programlisting>
</para></listitem>

<listitem><para>
Odblokowaæ mo¿liwo¶æ logowania siê bez has³a w
<filename>/etc/pam.d/common-auth</filename>.
</para></listitem>

<listitem><para>
Zdalne logowanie - w³±czyæ XDMCP, pozwoliæ na dostêp w Xaccess, 
w³±czyæ nas³uchiwanie na TCP w serwerze fontów.
</para></listitem>

<listitem><para>
Sprawdziæ w KDE polskie czcionki.
</para></listitem>

<listitem><para>
Skonfigurowaæ Mened¿era logowania ustawiaj±c:
<itemizedlist>
	<listitem><para>
		tekst powitania,
	</para> </listitem>
	<listitem><para>
		logo,
	</para> </listitem>
	<listitem><para>
		obrazki u¿ytkowników,
	</para> </listitem>
	<listitem><para>
		automatyczne logowanie.
	</para> </listitem>
</itemizedlist>

<listitem><para>
Skonfigurowaæ interfejsy sieciowe.
</para></listitem>

<listitem><para>
Skonfigurowaæ NTP (Network Time Protocol).
</para></listitem>

<listitem><para>
Skonfigurowaæ w razie potrzeby approx.
</para></listitem>

<listitem><para>
Skonfigurowaæ szarp-updater.
</para></listitem>

<listitem><para>
W razie potrzeby skonfigurowaæ dostêp (OpenVPN).
</para></listitem>

<listitem><para>
Wymieniæ klucze.
</para></listitem>

</itemizedlist>
</section> <!-- install-checklist -->

</chapter>
<chapter id="old-config">
<title>Konfiguracja SZARP 2.1</title>

<abstract>

	<para><note><para>Obecnie praktycznie wszystkie programy nie
		korzystaj± z opisanych w tym rozdziale plików, ale z pojedynczego
		pliku XML, opisanego w rozdziale <xref linkend="ipk">. Ten rozdzia³
		zostawiono dla celów archiwalnych, pomaga on te¿ zrozumieæ strukturê
		konfiguracji systemu.
		</para>
</note></para>

<para>
Rozdzia³ zawiera opis formatu plików konfiguracyjnych SZARP w wersji 2.1. 
Wszystkie opisywane pliki
konfiguracyjne s± zwyk³ymi plikami tekstowymi, powinny zawieraæ znaki koñca
linii w formacie uniksowym. Na d³ugo¶æ czê¶ci pól na³o¿one s± ograniczenia,
wynikaj±ce z konstrukcji wczytuj±cych je programów. Przekroczenie tych
ograniczeñ mo¿e spowodowaæ zg³oszenie b³êdu przez program, 
obciêcie wczytywanych warto¶ci do maksymalnej d³ugo¶ci lub b³±d programu.
Jako separatory pól powinny byæ stosowane spacje (najlepiej pojedyncze), chyba 
¿e co¶ innego wynika bezpo¶rednio z innych wymagañ.
Trudno okre¶liæ zachowanie programów w przypadku b³êdnego formatu pliku.
Wiêkszo¶æ (zw³aszcza starszych) programów stara siê interpretowaæ nawet b³êdne
pliki, co mo¿e byæ ¼ród³em ró¿nego rodzaju b³êdów.
</para>
</abstract>

<section id="old-config-parcook">
<title>Plik parcook.cfg</title>

<para>
Plik <filename>parcook.cfg</filename> zawiera informacjê o konfiguracji
demonów linii odpowiedzialnych za komunikacjê ze sterownikami, oraz opis
parametrów definiowalnych, wyliczanych przez program
<application>parcook</application>. Plik jest wymagany przez ka¿d± instalacjê
SZARP w wersji 2.1, czytany jest przez program
<application>parcook</application>. Wykorzystywany mo¿e byæ tak¿e do tworzenia
identyfikatorów dla komunikacji miêdzyprocesowej miêdzy aplikacjami systemu.
</para>

<para>
Format pliku jest nastêpuj±cy:
<programlisting>
<![CDATA[
[demony] [okres] [ekstra]
[numer] [ilo¶æ parametrów] [demon] [port komunikacyjny] ...
...
[formu³y]
[formu³a]
...
]]>
</programlisting>
Opis poszczególnych pól:
<itemizedlist>

<listitem>
<para><emphasis>[demony]</emphasis> - liczba okre¶laj±ca ilo¶æ linii z opisami
demonów komunikacyjnych (linii komunikacyjnych), od 1 do 64.
</para>
</listitem>

<listitem>
<para><emphasis>[okres]</emphasis> - d³ugo¶æ w sekundach okresu co jaki
odpytywane bêd± demony linii, nigdy nie u¿ywana by³a liczba inna ni¿
<emphasis>10</emphasis>, skutki wpisania innej warto¶ci pozostaj± nieznane.
</para>
</listitem>

<listitem>
<para><emphasis>[ekstra]</emphasis> - ilo¶æ zdefiniowanych w pliku parametrów
definiowalnych, mo¿e byæ 0.
</para>
</listitem>

<listitem><para><emphasis>[numer]</emphasis> - unikalny numer linii komunikacyjnej,
z zakresu od 1 do 64. Zwykle numery nadawane s± kolejno. Na ka¿d± liniê
komunikacyjn± przypada 1 linia w pliku.
</para>
</listitem>

<listitem><para><emphasis>[ilo¶æ parametrów]</emphasis> - ilo¶æ parametrów
odczytywana ze sterownika, odpowiada wielko¶ci segmentu pamiêci dzielonej
tworzonej dla demona linii, mo¿e byæ równa 0 lub wiêksza. Liczba 0 oznacza
sterownik pusty.
</para>
</listitem>

<listitem><para><emphasis>[demon]</emphasis> - ¶cie¿ka do demona linii -
programu odpowiadaj±cego za komunikacjê w obrêbie jednej linii komunikacyjnej
(czyli fizycznie jednego kabla podpiêtego do komputera). W starych
konfiguracjach bywa³a pusta - <application>parcook</application> przyjmowa³
domy¶ln± warto¶æ <application>/opt/szarp/bin/linedmn</application>. Zobacz te¿
komentarze do nastêpnego pola.
</para>
</listitem>

<listitem><para><emphasis>[port komunikacyjny]</emphasis> - ¶cie¿ka do portu
komunikacyjnego u¿ywanego przez demona linii. W rzeczywisto¶ci
<application>parcook</application> wywo³uje demona linii przekazuj±c mu jako
pierwszy parametr identyfikator (numer linii) - czyli liczbê z pocz±tku linii,
a nastêpnie wszystko co napotka po nazwie demona. Tradycyjnie drugim
argumentem do demona linii jest w³a¶nie ¶cie¿ka do portu. Kolejne argumenty
zale¿± od konkretnego demona, dla najpopularniejszego -
<application>rsdmn</application> mog± to byæ tak¿e prêdko¶æ komunikacji (w
bodach), ilo¶æ bitów stopu, wersja protoko³u (liczba). W niektórych starych
komunikacjach, gdy nie by³a podawana ¶cie¿ka do demona,
<application>parcook</application> tworzy³ tak¿e ¶cie¿kê do portu
komunikacyjnego karty Specialix na podstawie numeru linii (numer linii
odpowiada³ numerowi portu).
</para>
</listitem>

<listitem><para><emphasis>[formu³y]</emphasis> - ilo¶æ linii z formu³ami
opisuj±cymi parametry definiowane. Liczba ta nie musi byæ to¿sama z ilo¶ci±
zdefiniowanych parametrów (pole <emphasis>[ekstra]</emphasis>), gdy¿
dopuszczalne jest wielokrotne przedefiniowanie parametrów. Liczba linii mo¿e
byæ oczywi¶cie równa 0. Nastêpnie powinna wyst±piæ podana liczba linii z
formu³ami.
</para>
</listitem>

<listitem><para><emphasis>[formu³a]</emphasis> - formu³a programu
<application>parcook</application> opisuj±ca parametr. Postaæ formu³y jest
nastêpuj±ca:
<programlisting>
<![CDATA[
formu³a := wyra¿enie  '#' komentarz
wyra¿enie := element ' ' | wyrazenie wyrazenie | 'null'
element := (sta³a|adres_parametru|kod_operacji) ' '
sta³a := #cyfra[cyfra]
adres_parametru := cyfra[cyfra]
cyfra := '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
spacja := ' '
kod_operacji := '&'|'!'|'$'|'#'|'+'|'-'|'*'|'/'
komentarz := nie# [nie#]
nie#: = !'#' (dowolny znak nie bêd±cy '#')
]]>
</programlisting>
Jak wynika z powy¿szego elementy formu³y s± oddzielone spacjami. Formu³a
zapisana jest w Odwrotnej Notacji Polskiej (ONP, RPN). Liczba
oznacza wstawienie na stos warto¶ci parametru o okre¶lonym liczb± indeksie
IPC. Indeksy IPC parametrów to indeksy w tablicy parametrów tworzonej
przez program <application>parcook</application> po kolei na podstawie danych
o demonach linii i ilo¶ci parametrów definiowalnych (liczone od 0). 
Sta³a, oznaczana przez liczbê poprzedzon± znakiem <emphasis>#</emphasis>
powoduje wstawienie na stos warto¶ci sta³ej. Napis <emphasis>null</emphasis>
oznacza formu³ê pust±.
Formu³ê koñczy tak¿e znak
<emphasis>#</emphasis>, po którym nastêpuje nieobowi±zkowy komentarz.
Znaczenie kodów operacji jest nastêpuj±ce:
<itemizedlist>

<listitem><para>
<emphasis>+</emphasis> - pobierz dwa parametry z wierzcho³ka stosu i od³ó¿ na
stos ich sumê
</para></listitem>

<listitem><para>
<emphasis>-</emphasis> - jak wy¿ej, tylko ró¿nica
</para></listitem>

<listitem><para>
<emphasis>*</emphasis> - jak wy¿ej, tylko iloczyn
</para></listitem>

<listitem><para>
<emphasis>/</emphasis> - jak wy¿ej, tylko iloraz
</para></listitem>

<listitem><para>
<emphasis>&</emphasis> - zamieñ miejscami dwa parametry z wierzcho³ka stosu (swap)
</para></listitem>

<listitem><para>
<emphasis>!</emphasis> - kopiuj warto¶æ z wierzcho³ka stosu (duplicate)
</para></listitem>

<listitem><para>
<emphasis>$</emphasis> - wywo³aj funkcjê o identyfikatorze i parametrach
pobranych kolejno z wierzcho³ka stosu
</para></listitem>

<listitem><para>
<emphasis>=</emphasis> - pobierz adres IPC z wierzcho³ka stosu i wstaw pod
niego kolejn± warto¶æ pobran± z wierzcho³ka stosu
</para></listitem>

</itemizedlist>

Pojawienie siê w wyniku obliczeñ b³êdu (np. dzielenie przez 0) spowoduje
¿e wstawiane bêd± pod parametry warto¶ci NO_DATA (brak danych).

</para></listitem>
</itemizedlist>
</para>

<para>
Przyk³adowa zawarto¶æ pliku:
<programlisting>
<![CDATA[
2 10 8
1 32  /opt/szarp/bin/rsdmn /dev/ttyX0
2 58 /opt/szarp/bin/rsdmn /dev/ttyX1
8
31 #0 #2 #7 $ #90 = # wel (Kosmonautów:Wêze³:praca automatyczna w lecie)  -
31 #1 #2 #7 $ #91 = # wel (Kosmonautów:Wêze³:praca automatyczna w zimie)  -
31 #2 #2 #7 $ #1000 * #92 = # wel (Kosmonautów:Wêze³:zawór mieszania otwarty)  Zawór upustowy otw.
31 #3 #2 #7 $ #1000 * #93 = # wel (Kosmonautów:Wêze³:zawór mieszania zamkniêty)  Zawór upuztowy zam.
89 #0 #2 #7 $ #94 = # wel (Kosmonautów:Wêze³CWUiCO:praca automatyczna w lecie) -
89 #1 #2 #7 $ #95 = # wel (Kosmonautów:Wêze³CWUiCO:praca automatyczna w zimie) -
89 #2 #2 #7 $ #1000 * #96 = # wel (Kosmonautów:Wêze³CWUiCO:zawór mieszania otwarty)  Zawór mieszania otw.
89 #3 #2 #7 $ #1000 * #97 = # wel (Kosmonautów:Wêze³CWUiCO:zawór mieszania zamkniêty)  Zawór mieszania zam.
]]>
</programlisting>
</para>

</section>

<section id="old-config-lineX">
<title>Pliki lineX.cfg</title>

<para>Pliki o nazwach <emphasis>lineX.cfg</emphasis>, gdzie zamiast
<emphasis>X</emphasis> wystêpuje numer (identyfikator) linii - taki jak w
pliku <filename>parcook.cfg</filename> - opisuj± konfiguracjê demona linii.
S± wykorzystywane przed demony linii oraz do tworzenia identyfikatorów
mechanizmów IPC do komunikacji miêdzy programem
<application>parcook</application> a demonami linii.
</para>

<para>Plik ma postaæ:
<programlisting>
<![CDATA[
[jednostki]
[kod] [typ] [podtyp] [parametry] [nastawy] [bufor]
...
]]>
</programlisting>
</para>

<para>Pierwsza liczba zawiera liczbê jednostek komunikacyjnych wewn±trz linii.
Najczê¶ciej (w przypadku RS-232) obecna jest jedna linia komunikacyjna. W
przypadku RS-485 linii mo¿e byæ wiêcej. Specjalna warto¶æ 0 oznacza specjalny
okrojony protokó³ RS-232, bez adresowania jednostki. Nastêpnie wystêpuj±
linie, po jednej dla jednostki, z opisem parametrów dla jednostki. Znaczenia
poszczególnych pól s± nastêpuj±ce:
<itemizedlist>
<listitem><para><emphasis>kod</emphasis> - znak ASCII bêd±cy identyfikatorem
linii</para></listitem>
<listitem><para><emphasis>typ</emphasis> - liczba oznaczaj±ca typ raportu
(parametr dla sterownika, z zakresu od 0 do 255)</para></listitem>
<listitem><para><emphasis>podtyp</emphasis> - liczba oznaczaj±ca podtyp raportu
(parametr dla sterownika, z zakresu od 0 do 255)</para></listitem>
<listitem><para><emphasis>parametry</emphasis> - ilo¶æ parametrów
odczytywanych z jednostki</para></listitem>
<listitem><para><emphasis>nastawy</emphasis> - ilo¶æ parametrów
wysy³anych do jednostki (przez program <application>sender</application>)
</para></listitem>
<listitem><para><emphasis>bufor</emphasis> - wielko¶æ bufora u¶rednieñ dla
demona linii</para></listitem>
</itemizedlist>
</para>
<para>
Typowa zawarto¶æ pliku <filename>lineX.cfg</filename>:
<programlisting>
<![CDATA[
1
1 1 1 32 0 
]]>
</programlisting>
</para>

<para>
Nieco inaczej wygl±da sk³adnia pliku w przypadku u¿ycia radiomodemów. W takiej
sytuacji pierwsza linia zaczyna siê od znaku <emphasis>R</emphasis>, po którym
wystêpuje natychmiast (bez separatorów) ilo¶æ linii radiowych obs³ugiwanych
przez demona. W nastêpnych liniach dla ka¿dej linii radiowej znajduje siê
sekcja sk³adaj±ca siê z linii z tekstowym identyfikatorem modemu oraz opisu
konfiguracji dla linii zgodnie ze zwyk³ym formatem pliku. Przyk³adowy
konfiguracja dla komunikacji przez radiomodem z dwoma identycznymi
sterownikami:
<programlisting>
<![CDATA[
R2
Toszek
1
1 1 0 21 1 3
Jeden
1
1 1 0 21 1 3
]]>
</programlisting>

Oba sterowniki dostarczaj± w sumie 42 parametry. Ciekawostk± w powy¿szym
przyk³adzie (autentycznym! - konfiguracja z Pyskowic) jest fakt, ¿e obie linie
posiadaj± ten sam identyfikator. Do obu ma byæ wysy³any jeden parametr.
Poniewa¿ jednak program <application>sender</application> u¿ywa tylko
identyfikatorów linii (nie korzysta z identyfikatorów modemów), wiêc
prawdopodobnie ewentualne nastawy parametrów wysy³ane mog³yby byæ tylko do
pierwszego z wymienionych sterowników (bo program najpierw jego by
zidentyfikowa³ jako posiadaj±cego odpowiedni identyfikator).
</para>

</section>

<section id="old-config-ptt">
<title>Plik PTT.act</title>

<para>
Plik <filename>PTT.act</filename> opisuje mapowanie parametrów na indeksy w
bazie w formacie CodeBase, a tak¿e zawiera szereg informacji o parametrach,
takich jak pe³na nazwa, skrót, jednostka, czy precyzja reprezentacji danych.
Plik jest wykorzystywany przez du¿± czê¶æ programów SZARP 2.1, w szczególno¶ci
<application>meaner</application>, <application>draw</application>,
<application>dysp</application>. Numer linii z opisem parametru w pliku jest
czêsto wykorzystywany przez starsze programy jako identyfikator parametru
(zwykle liczony od 1, opis parametru pierwszego parametru znajduje siê w linii
2).
Jest on bezpo¶rednio przeliczalny na indeks w bazie (numer rekordu i numer
pola) wed³ug zale¿no¶ci:
<programlisting>
numer_rekordu = (indeks_PTT - 1) / 15 + 1
numer_pola = (indeks_PTT - 1) % 15
</programlisting>
</para>

<para>
Pierwsza linia w pliku <filename>PTT.act</filename> zawiera 3 liczby,
oddzielone spacjami. Pierwsza
to teoretycznie numer wersji formatu pliku, w praktyce zawsze jest to
<emphasis>1</emphasis>.
Druga liczba to ilo¶æ parametrów zapisywanych do bazy. Trzecia (nie mniejsza
od drugiej) to ilo¶æ opisów parametrów w pliku (równa liczbie linii pliku
minus 1). Opisów parametrów mo¿e byæ wiêcej ni¿ parametrów zapisywanych do
bazy, bo nie wszystkie parametry musz± byæ zapisywane do bazy.
Ka¿da linia z opisem parametru ma nastêpuj±cy format:
<programlisting>
<![CDATA[
[indeks IPC] [precyzja] [skrót nazwy] [pe³na nazwa] [jednostka];[nazwa wykresu]#komentarz
]]>
</programlisting>
</para>

<para>
Znaczenie poszczególnych pól jest nastêpuj±ce:
<itemizedlist>

<listitem><para><emphasis>indeks IPC</emphasis> - indeks IPC parametru (od 0).
Warto¶ci wiêksze od 65536 oznaczaj± parametr pusty - obecny w bazie ale
niezbierany ze sterownika.
</para></listitem>

<listitem><para><emphasis>precyzja</emphasis> - liczba od 0 do 7. Warto¶ci od
0 do 4 oznaczaj± ilo¶æ miejsc po przecinku, z jak± jest reprezentowany
parametr w bazie. Przyk³adowo, je¶li w bazie zapisana jest warto¶æ 125, a
precyzja wynosi 1, to rzeczywista warto¶æ jak± otrzymamy to 12.5. Warto¶æ 5
oznacza, ¿e parametr mo¿e przyjmowaæ warto¶ci 0 (interpretowana jako "nie")
lub 1 (interpretowana jako "tak"). Warto¶æ 6 oznacza ¿e mo¿liwe warto¶ci to
0 ("Pochmurno"), 1 ("Zmiennie"), 2 ("S³onecznie"). Warto¶æ 7 oznacza mo¿liwe
warto¶ci -1 ("Minus") i 1 ("Plus").</para></listitem>

<listitem><para><emphasis>skrót nazwy</emphasis> - skrótowa nazwa parametru -
do 4 liter.</para></listitem>

<listitem><para><emphasis>pe³na nazwa</emphasis> - pe³na nazwa parametru,
sk³ada siê z 3 pól oddzielonych dwukropkami.</para></listitem>

<listitem><para><emphasis>jednostka</emphasis> - nazwa jednostki dla warto¶ci
 <emphasis>w nawiasach kwadratowych</emphasis>.</para></listitem>

<listitem><para><emphasis>nazwa wykresu</emphasis> - nazwa wykresu dla
parametru w programie przegl±daj±cym</para></listitem>

</itemizedlist>

Opisy parametrów niezapisywanych do bazy mog± byæ pozbawione czê¶ci od
¶rednika w³±cznie.

</para>

<para>
Przyk³adowy fragment zawarto¶ci pliku:
<programlisting>
<![CDATA[
1 32 36
0 1 Tcie Armii Ludowej:Wêze³:temperatura wody z ciep³owni [°C];Temp. wej. w wê¼le# (1,  0)
1 1 Tpow Armii Ludowej:Wêze³:temperatura wody powrotnej [°C];Temp. powrotna# (1,  1)
2 2 Gw Armii Ludowej:Wêze³:przep³yw wêz³a [t/h];Przep³yw wêz³a# (1,  2)
3 3 Qw Armii Ludowej:Wêze³:moc wêz³a [MW];Wydajno¶æ wêz³a# (1,  3)
4 1 Tzew Armii Ludowej:Wêze³:temperatura zewnêtrzna [°C];Temp. zewnêtrzna# (1, 4)
5 1 Tcox Armii Ludowej:Wêze³:temperatura CO w funkcji zewnêtrznej [°C];Temp. zad. CO od z.# (1,  5)
6 1 Tcok Armii Ludowej:Wêze³:zadana temperatura CO [°C];Temp. zadana CO# (1,  6)7 1 Tco Armii Ludowej:Wêze³:temperatura wyj¶ciowa CO [°C];Temp. wyj. na CO# (1,  7)
8 1 Tpn Armii Ludowej:Wêze³:temperatura powrotna z CO [°C];Temp. powrotu z CO# (1,  8)
9 3 DPx Armii Ludowej:Wêze³:zadane ci¶nienie dyspozycyjne [MPa];Zadana dyspozycja# (1,  9)
10 3 DP Armii Ludowej:Wêze³:ci¶nienie dyspozycyjne [MPa];Ci¶nienie dyspoz.# (1,  10)
11 1 Polz Armii Ludowej:Wêze³:po³ozenie zaworu upustowego [%];Po³ozenie upustu# (1,  11)
12 1 Tre1 Armii Ludowej:Wêze³:temperatura rezerwowa 1 [°C];Temp. rezerwowa 1# (1,  12)
13 1 Tre2 Armii Ludowej:Wêze³:temperatura rezerwowa 2 [°C];Temp. rezerwowa 2# (1,  13)
15 1 Kenl Armii Ludowej:Wêze³:energia z licznika lsw [GJ];Energia lsw# (1,  14)
16 1 Kenm Armii Ludowej:Wêze³:energia z licznika msw [GJ];Energia msw# (2,  0)
17 0 Kwol Armii Ludowej:Wêze³:woda z licznika lsw [m3];Woda lsw# (2,  1)
18 0 Kwom Armii Ludowej:Wêze³:woda z licznika msw [m3];Woda msw# (2,  2)
19 0 Khl Armii Ludowej:Wêze³:czas pracy z licznika lsw [h];Czas pracy lsw# (2, 3)
20 0 Khm Armii Ludowej:Wêze³:czas pracy z licznika msw [h];Czas pracy msw# (2, 4)
21 2 Ktz Armii Ludowej:Wêze³:temperatura zasilania z licznika [°C];Temp. zasilania# (2,  5)
22 2 Ktp Armii Ludowej:Wêze³:temperatura powrotu z licznika [°C];Temp. powrotu# (2,  6)
23 1 Kml Armii Ludowej:Wêze³:moc z licznika lsw [kW];Moc lsw# (2,  7)
24 1 Kmm Armii Ludowej:Wêze³:moc z licznika msw [kW];Moc msw# (2,  8)
25 3 Kpl Armii Ludowej:Wêze³:przep³yw z licznika lsw [t/h];Przep³yw lsw# (2,  9)26 3 Kpm Armii Ludowej:Wêze³:przep³yw z licznika msw [t/h];Przep³yw msw# (2,  10)
26 3 Kpm Armii Ludowej:Wêze³:przep³yw z licznika msw [t/h];Przep³yw msw# (2,  10)
27 1 Kmsl Armii Ludowej:Wêze³:moc szczytowa z licznika lsw [kW];Moc szczytowa lsw# (2,  11)
28 1 Kmsm Armii Ludowej:Wêze³:moc szczytowa z licznika msw [kW];Moc szczytowa msw# (2,  12)
29 0 Kinl Armii Ludowej:Wêze³:informacja z licznika lsw [-];Informacja lsw# (2,  13)
30 0 Kinm Armii Ludowej:Wêze³:informacja z licznika msw [-];Informacja msw# (2,  14)
34 5 Zupo Armii Ludowej:Wêze³:zawór mieszania otwarty [%];Zawór upustowy otw.# (3,  0)
35 5 Zupz Armii Ludowej:Wêze³:zawór mieszania zamkniêty [%];Zawór upustowy zam.# (3,  1)
14 1 imco Armii Ludowej:Wêze³:czas trwania impulsu ruchu zaworem CO [s];-
31 0 wel Armii Ludowej:Wêze³:zakodowany stan wej¶æ logicznych [-];-
32 5 Alat Armii Ludowej:Wêze³:praca automatyczna w lecie [-];-
33 5 Azim Armii Ludowej:Wêze³:praca automatyczna w zimie [-];-
]]>
</programlisting>
</para>

</section>

<section id="old-config-definable">
<title>Plik definable.cfg</title>

<para>
Plik <filename>definable.cfg</filename> opisuje tak zwane parametry
definiowalne przegl±daj±cego (patrz <xref linkend="define-drawdefinable">,
czyli parametry których warto¶ci mog± byæ przedstawiane na wykresach
przez program przegl±daj±cy <application>draw</application>,
a wyliczane s± na podstawie innych parametrów zapisanych do bazy.
</para>

<para>
Plik jest wczytywany za pomoc± biblioteki <emphasis>libpar</emphasis>, wiêc
sk³ada siê z szeregu parametrów o zadanej nazwie i warto¶ci, zgodnie
opisem w rozdziale <xref linkend="libpar-format">. Linie puste i zaczynaj±ce
siê od znaku <emphasis>#</emphasis> s± ignorowane.
</para>

<para>
Najpierw wczytywane s± warto¶ci parametrów o nazwach
<emphasis>def_offset</emphasis> i <emphasis>def_count</emphasis>. Pierwszy z
nich musi mieæ warto¶æ równ± liczbie parametrów zdefiniowanych w pliku
<filename>PTT.act</filename> (zobacz <xref linkend="old-config-ptt">) -
czyli trzeciej liczbie w pierwszej linii tego pliku. Oznacza ona przesuniêcie
- indeks, od jakiego zaczynaj± siê parametry definiowalne przegl±daj±cego
(indeks w sensie pliku PTT.act).
Warto¶æ parametru <emphasis>def_count</emphasis> oznacza ilo¶æ zdefiniowanych
w pliku parametrów definiowalnych.
</para>

<para>
W kolejnych liniach dla ka¿dego ze zdefiniowanych parametrów definiowalnych
musz± znale¼æ siê dwie definicje. Pierwsza, o nazwie
<emphasis>def_par_formula(X)</emphasis>, gdzie <emphasis>X</emphasis> nale¿y
zast±piæ kolejnym numerem parametru (od 1 do warto¶ci def_count) opisuje formu³ê
definiuj±c± parametr. Postaæ formu³y jest bardzo podobna do tej z pliku
<filename>parcook.cfg</filename> - zobacz <xref linkend="old-config-parcook">.
Pe³en opis znajduje siê w rozdziale <xref linkend="define-drawdefinable">.
    
<para>
<emphasis>Uwaga!</emphasis> Je¿eli baza wykorzystuje automatyczne indeksy
(a wiêc nie istniej± indeksy bazy CodeBase), to zamiast indeksów bazowych
wykorzystywane s± wirtualne indeksy parametrów, równe ich indeksom IPC. Jest
to rozwi±zanie tymczasowe, maj±ce pozwoliæ na wspó³prace programu
<application>draw</application> z nowym formatem bazy danych. Zobacz te¿ 
<xref linkend="szbase">.
</para>

<para>
Druga definicja dla parametru to <emphasis>def_par_ptt(X)</emphasis>, gdzie
<emphasis>X</emphasis> równie¿ nale¿y zast±piæ przez numer parametru.
Warto¶ci± musi byæ opis parametru zgodny z tym w pliku
<filename>PTT.act</filename> (zobacz <xref linkend="old-config-ptt">), tyle ¿e
pozbawiony pierwszego pola - czyli indeksu IPC, który dla parametrów
definiowalnych przegl±daj±cego nie ma sensu.
</para>

<para>
Przyk³adowa zawarto¶æ pliku:
<programlisting>
<![CDATA[
def_offset=378
def_count=7
def_par_formula(1)=117 #0 N 239 #0 N + 257 #0 N +
def_par_ptt(1)=2 Qsum Sieæ:Sterownik:Sumaryczna moc ciep³owni [MW];Sumaryczna
moc # (26,  3)
def_par_formula(2)=38 #0 N 94 #0 N + 218 #0 N +
def_par_ptt(2)=3 Msum Sieæ:Sterownik:sumaryczna masa wêgla do kot³a
[t/h];Sumaryczna masa # (26,  4)
def_par_formula(3)=11 #0 N 67 #0 N + 186 #0 N +
def_par_ptt(3)=3 Vsum Sieæ:Sterownik:sumaryczna objêto¶æ wêgla do kot³a
[m3/h];Sumaryczna objêto¶æ # (26,  5)
def_par_formula(4)=378 #10000 * 379 /
def_par_ptt(4)=3 Kmsm Sieæ:Sterownik:sumaryczny stosunek energia / masa
[MWh/t];Energia/masa sum. # (26,  6)
def_par_formula(5)=378 #10000 * 380 /
def_par_ptt(5)=3 Kosm Sieæ:Sterownik:sumaryczny stosunek objêto¶æ / masa
[MWh/m3];Energia/obj. sum. # (26,  7)
def_par_formula(6)=15 #750 / #1000 * #36 * #100 / #100 52 #72 * #1000 / #10 /
#2 + - #100 / /
def_par_ptt(6)=2 Wcs Kocio³ 1:Sterownik:wyliczona warto¶æ opa³owa
[kJ/g];Wyliczona wart. opa³. # (26,  8)
def_par_formula(7)=71 #750 / #1000 * #36 * #100 / #100 108 #72 * #1000 / #10 /
#2 + - #100 / /
def_par_ptt(7)=2 Wcs Kocio³ 2:Sterownik:wyliczona warto¶æ opa³owa
[kJ/g];Wyliczona wart. opa³. # (26,  9)
# A to jest komentarz.
]]>
</programlisting>
</para>

</section>

<section id="old-config-ekrncor">
<title>Pliki konfiguracyjne programu <application>draw</application></title>

<para>
Program przegl±daj±cy <application>draw</application> korzysta z pliku
<filename>PTT.act</filename> (<xref linkend="old-config-ptt">) oraz z w³asnych
plików, opisuj±cych dostêpne zestawy wykresów (tzw. okna) i konkretne wykresy.
S± dwa rodzaje tych plików, o bardzo zbli¿onej sk³adni. Pliki o nazwie
<emphasis>ekrnXXXX.cor</emphasis>, gdzie <emphasis>XXXX</emphasis> nale¿y
zast±piæ nazw± prefiksu konfiguracji zawieraj± spis okien i wykresów dla
konfiguracji. Pliki o nazwie <emphasis>ekrnXXXX.def</emphasis> zawieraj± spis
okien tzw. definiowalnych u¿ytkownika, czyli zestawy wykresów samodzielnie
tworzonych przez u¿ytkownika (s± one umieszczane w katalogu domowym
u¿ytkownika).
</para>

<para>
Plik <filename>ekrnxxxx.cor</filename> jest plikiem tekstowym. Wszystkie linie 
zaczynaj±ce siê od znaku <emphasis>#</emphasis> (hash) traktowane s± jako 
komentarz i mog± byæ pominiête, jednak ich kasowanie czy rêczna edycja nie ma 
wiêkszego sensu, poniewa¿ mog± byæ one zapisane przez program przegl±daj±cy 
wywo³any z opcj±:
<programlisting>
/opt/szarp/bin/draw -drawupdateekrancor
</programlisting>
</para>

<para>
Ponadto przy ka¿dym zakoñczeniu program przegl±daj±cy zapisuje plik 
<filename>ekrnxxxx.def</filename> przypadku, gdy w danej sesji u¿ytkownik 
przegl±da³ okna definiowalne i przynajmniej raz nacisn±³ w oknie tworzenia 
okna definiowalnego przycisk <emphasis>Ze zmianami</emphasis>.
</para>

<para>
Dobrze jest, je¶li dany wykres wystêpuje tylko raz w pliku 
<filename>ekrnxxxx.cor</filename> (wszystkie wykresy w pliku 
<filename>ekrnxxxx.def</filename> pochodz± z pliku 
<filename>ekrnxxxx.cor</filename>), choæ w praktyce zasada ta jest czêsto 
³amana. Jest to o tyle niewygodne, ¿e w oknie wyboru wykresów do okna 
definiowalnego umieszczone s± nazwy pierwszych okien w pliku 
<filename>ekrnxxxx.cor</filename>, w których wystêpuj± te wykresy, co czasem 
mo¿e byæ myl±ce dla u¿ytkownika (wybra³ np.
<emphasis>Kocio³1|Wydajno¶æ</emphasis>, a pokazuje mu siê potem 
<emphasis>Wydajno¶ci ciep³owni|Wydajno¶æ kot³a 1</emphasis>).
</para>

<para>
W dalszej czê¶ci tekstu jako nazwy pól przyjêto w³a¶nie umieszczone przed nimi
komentarze.
</para>

<section id="old-config-ekrncor-struct">
<title>Struktura pliku ekrnxxxx.cor</title>

<para>
<programlisting>
nazwa_ciep³owni
ilo¶æ_okien
&#60;opis_okna_1&#62;
&#60;opis_okna_2&#62;
...
&#60;opis_okna_n&#62;
</programlisting>
</para>

<para>
Pola:

<itemizedlist>

<listitem>
<para>
Nazwa: <emphasis>nazwa_ciep³owni</emphasis>
</para>
<para>
Typ: string, maksymalnie 80 znaków
</para>
<para>
Opis: Nazwa wy¶wietlana w tytu³owym pasku okna programu przegl±daj±cego.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>ilo¶æ_okien</emphasis>
</para>
<para>
Typ: int, bez ograniczeñ
</para>
<para>
Opis: Ilo¶æ struktur <emphasis>&#60;opis_okna&#62;</emphasis>, 
które opisano dalej. Nale¿y pamiêtaæ, aby po dodaniu nowego okna do pliku 
bezwzglêdnie zwiêkszyæ odpowiednio warto¶æ pola 
<emphasis>ilo¶æ_okien</emphasis>, poniewa¿ program przegl±daj±cy nie 
zasygnalizuje b³êdu, je¶li w pliku jest wiêcej struktur 
<emphasis>&#60;opis_okna&#62;</emphasis> ni¿ wynosi warto¶æ 
<emphasis>ilo¶æ_okien</emphasis>. W takim przypadku okna o numerach 
powy¿ej <emphasis>ilo¶æ_okien</emphasis> zostan± zignorowane, a przy zapisie 
na ¿±danie pliku <emphasis>ekrnxxxx.cor</emphasis> pominiête. W przypadku, 
gdy struktur <emphasis>&#60;opis_okna&#62;</emphasis> jest mniej ni¿ warto¶æ 
<emphasis>ilo¶æ_okien</emphasis>, program nie bêdzie dzia³a³ prawid³owo.
</para>
</listitem>
</itemizedlist>
</para>
</section> <!-- old-config-ekrncor-struct -->


<section id="old-config-ekrncor-window">
<title>Struktura okna</title>

<para>
<programlisting>
WindowID
Title
NumberOfAxes_n
&#60;opis_osi_0&#62;
&#60;opis_osi_1&#62;
...
&#60;opis_osi_n-1&#62;
FirstDraw
NumberOfDraw_m
&#60;opis_wykresu_1&#62;
&#60;opis_wykresu_2&#62;
...
&#60;opis_wykresu_m&#62;
</programlisting>

Ka¿dy opis okna jest otoczony dodatkowymi liniami komentarza:
<programlisting>
# okno x {
...
# koniec okna x }
</programlisting>
które s± automatycznie generowane przez program przy wymuszonym 
zapisie <filename>ekrnxxxx.cor</filename>. 
Nawiasy klamrowe u³atwiaj± przechodzenie od okna do okna w edytorze 
vi - klawiszem <emphasis>%</emphasis>.
</para>

<para>
Pola:
<itemizedlist>

<listitem>
<para>
Nazwa: <emphasis>WindowID</emphasis>
</para>
<para>
Typ: unsigned long, zapisany w hexie
</para>
<para>
Opis: Identyfikator okna, okre¶laj±cy jego specjalne w³a¶ciwo¶ci. Pole to 
jest najczê¶ciej sum± bitow± identyfikatora rodzaju okna (patrz ni¿ej) i 
wyró¿ników wykresów, których dotycz± te w³a¶ciwo¶ci. Najm³odszy bit dotyczy 
wykresu 1, starszy wykresu 2 itd. a¿ do 12 bitu, czyli ostatnie trzy cyfry w 
hexie mog± przybieraæ warto¶æ od 000 (nie dotyczy ¿adnego wykresu) do 3ff 
(dotyczy 12 wykresów). Najstarsze 4 bity zarezerwowane s± na identyfikatory 
rodzaju, i tak:

<itemizedlist>
<listitem>
<para>
<emphasis>80000XXX</emphasis> - okno definiowalne, czyli okno, którego sk³ad 
mo¿e u¿ytkownik okre¶liæ sam; standardowo bity wykresów s± niewykorzystywane 
(ten identyfikator wystêpuje tylko w <filename>ekrnxxxx.def</filename>, 
nigdy w <filename>ekrnxxxx.cor</filename>)
</para>
</listitem>
<listitem>
<para>
<emphasis>40000XXX</emphasis> - wydajno¶ci ciep³owni, rzadko u¿ywane okno; w 
oknie dodatkowym tworzony jest wykres tortowy z porcjami wyznaczonymi przez 
wykresy wyró¿nione odpowiednimi bitami <emphasis>WindowID</emphasis>
</para>
</listitem>

<listitem>
<para>
<emphasis>20000XXX</emphasis> - sumowanie godzinowo, najczê¶ciej u¿ywana 
funkcja, w wyniku której w oknie dodatkowym pojawiaj± siê dodatkowe zestawienia
dotycz±ce wykresów wyró¿nionych odpowiednimi bitami; takich operacji dokonuje 
siê na wydajno¶ciach, przep³ywach i wszystkich pozosta³ych wielko¶ciach 
liczonych jako pewna wielko¶æ dzielona przez czas (zawsze - godziny); 
przyk³adowo: 20000005 oznacza, ¿e sumowane maj± byæ wykres nr 1 i wykres nr 3
</para>
</listitem>
</itemizedlist>
</para>

<para>
Jest mo¿liwe umieszczenie w oknie definiowalnym wydajno¶ci ciep³owni (wówczas 
identyfikator ma postaæ c0000XXX) albo sumowania godzinowego (wówczas 
identyfikator ma postaæ a0000XXX) i odpowiednich bitowych wyró¿ników wykresów. 
Generalnie jednak nie nale¿y siê tym przejmowaæ, bo okna definiowalne s± zwykle
w pe³ni obs³ugiwane przez program. Nale¿y natomiast pamiêtaæ o tym, ¿e nie s± 
dozwolone identyfikatory mieszane, np. 60000XXX.
</para>
<para>
Poza identyfikatorami bêd±cymi sumami bitowymi wystêpuj± jeszcze inne 
(oprócz 0 - rzadkie) identyfikatory:

<itemizedlist>

<listitem>
<para>
0 - najczêstszy: zwyk³e okno bez ¿adnych szczególnych w³a¶ciwo¶ci
</para>
</listitem>
<listitem>
<para>
1 - zawory: obecnie ju¿ nie stosowane, zachowane dla kompatybilno¶ci wstecz - 
wszystkie wykresy w oknie traktowane s± jako binarne wskazania krañcówek 
zaworów, gdzie warto¶æ 1 oznacza zawór otwarty, warto¶æ -1 oznacza zawór 
zamkniêty, natomiast pozycja po¶rednia to brak danych; dla takiego okna 
program sam wyznacza osie i pola <emphasis>DivBy</emphasis> wykresów 
(patrz dalej)
</para>
</listitem>
<listitem>
<para>
2 - wykresxy: rzadko u¿ywana prymitywna funkcja y=f(x), bez ¿adnych filtrów 
czy u¶rednieñ; takie okno tworzy tylko program przegl±daj±cy - w pliku 
<filename>ekrnxxxx.cor</filename> ta warto¶æ jako identyfikator nie ma prawa 
siê znale¼æ
</para>
</listitem>
<listitem>
<para>
3 - stosunek: wystêpuje tylko na Ciep³owni G³ównej w Suwa³kach -  
w oknie musz± byæ dok³adnie dwa wykresy, których stosunek warto¶ci pierwszego do drugiego umieszczony jest w oknie dodatkowym.
</para>
</listitem>

<listitem>
<para>
4 - ró¿nica: wystêpuje tylko na Ciep³owni G³ównej w Suwa³kach; w oknie 
dodatkowym podawana jest ró¿nica warto¶ci: ostatnia-pierwsza widocznego w 
oknie wy¶wietlanego wykresu, albo w przypadku rozdwojonego kursora warto¶æ 
drugiego kursora minus warto¶æ drugiego kursora.
</para>
</listitem>

</itemizedlist>
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Title</emphasis>
</para>
<para>
Typ: char, maksymalna d³ugo¶æ 50 znaków
</para>
<para>
Opis: Tytu³ okna. Dozwolone s± wszystkie znaki oprócz '*' (gwiazdka), który wystêpuje tylko na pocz±tku tytu³ów okien definiowalnych. Poniewa¿ tre¶æ tytu³u okna definiowalnego jest dowolny, '*' na pocz±tku nazwy w li¶cie dostêpnych okien pokazuje, ¿e jest to okno definiowalne.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>NumberOfAxes</emphasis>
</para>
<para>
Typ: unsigned char
</para>
<para>
Opis: Ilo¶æ dostêpnych osi, których mo¿e byæ nie wiêcej ni¿ wykresów, czyli 12.  Osie s± indeksowane od zera.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>FirstDraw</emphasis>
</para>
<para>
Typ: unsigned char
</para>
<para>
Opis: Numer porz±dkowy pierwszego wykresu, zazwyczaj 1, czasami (np. Wydajno¶ci ciep³owni) 0.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>NumberOfDraw</emphasis>
</para>
<para>
Typ: unsigned char, maksymalnie 12
</para>
<para>
Opis: Ilo¶æ opisów wykresów. Wykresy indeksowane s± od 1.
</para>
</listitem>

</itemizedlist>
</para>

</section> <!-- old-config-ekrncor-window -->

<section id="old-config-ekrncor-axis">
<title>Struktura opisu osi</title>

<para>
<programlisting>
Maxval x
Minval x
Maxrozsz x
Minrozsz x
Procrozsz x
</programlisting>
</para>

<para>
Pola:
<itemizedlist>

<listitem>
<para>
Nazwa: <emphasis>Maxval</emphasis>
</para>
<para>
Typ: double
</para>
<para>
Opis: Maksymalna warto¶æ osi Y.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Minval</emphasis>
</para>
<para>
Typ: double
</para>
<para>
Opis: Minimalna warto¶æ osi Y.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Maxrozsz</emphasis>
</para>
<para>
Typ: double
</para>
<para>
Opis: Maksymalna warto¶æ rozszerzenia na osi Y (patrz opis <emphasis>Procrozsz</emphasis>).
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Minrozsz</emphasis>
</para>
<para>
Typ: double
</para>
<para>
Opis: Minimalna warto¶æ rozszerzenia na osi Y (patrz opis 
<emphasis>Procrozsz</emphasis>).
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Procrozsz</emphasis>
</para>
<para>
Typ: unsigned char
</para>
<para>
Opis: Procent rozszerzenia odcinka <emphasis>Maxrozsz</emphasis> - 
<emphasis>Minrozsz</emphasis> na osi Y. Dla prawid³owego dzia³ania 
programu musi zachodziæ zale¿no¶æ:
</para>
<para>
<emphasis>Minval</emphasis> &#60;= <emphasis>Minrozsz</emphasis> &#60;= 
<emphasis>Maxrozsz</emphasis> &#60;= <emphasis>Maxval</emphasis>
</para>
<para>
Najczê¶ciej u¿ywane s± osie liniowe, gdzie <emphasis>Procrozsz</emphasis> 
ma warto¶æ 0. Osie nieliniowe maj± miejsce np. przy wydajno¶ci wêz³ów 
(w zimie wysokie, w lecie niskie). Osie nieliniowe nale¿y stosowaæ ostro¿nie, 
poniewa¿ s± one bardzo myl±ce - szczególnie nale¿y uwa¿nie dobieraæ 
rozszerzenie tak, aby wykresy jak najrzadziej przyjmowa³y warto¶ci z 
pogranicza rozszerzonej i nierozszerzonej czê¶ci osi.  Rozszerzenie mo¿e byæ 
de facto zwê¿eniem, np. dla Maxval=100.0, Minval=0.0, Maxrozsz=50.0, 
Minrozsz=0.0 i Procrozsz=25 [%].
</para>
</listitem>

</itemizedlist>
</para>

</section>

<section id="old-config-ekrncor-draw">
<title>Struktura opisu wykresu</title>

<para>
<programlisting>
Item y
Menuitem y
DivBy y
Color y
WhichRecord y
WhichField y / IPKName y
Drawunit y
Axisnr y
</programlisting>
</para>

<para>
Pola:
<itemizedlist>

<listitem>
<para>
Nazwa: <emphasis>Item</emphasis>
</para>
</listitem>

<listitem>
<para>
Typ: char, maksymalna d³ugo¶æ 10 znaków
</para>
</listitem>

<listitem>
<para>
Opis: Skrótowa nazwa wykresu, ta sama co PTT -&#62; tab[y].sym, czyli 3 
pozycja w odpowiednim wierszu <emphasis>PTT.act</emphasis> (patrz ni¿ej 
opis <emphasis>WhichRecord</emphasis> i <emphasis>WhichField</emphasis>). 
Przy modyfikacji pliku <emphasis>ekrnxxxx.cor</emphasis> na systemie z 
dzia³aj±cym parcook'iem tej pozycji mo¿na nie wpisywaæ (tzn. trzeba wpisaæ 
cokolwiek, ale nie musi to byæ zgodne z rzeczywist± nazw± parametru), gdy¿ 
wynika ona jednoznacznie z numeru rekordu i pola w rekordzie (patrz dalej).
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Menuitem</emphasis>
</para>
<para>
Typ: char, maksymalna d³ugo¶æ 30 znaków, zalecane do 23
</para>
<para>
Opis: Pe³na nazwa wykresu, ta sama co PTT -&#62; tab[y].alt, czyli 7 - 
ostatnia (przed komentarzem) pozycja w odpowiednim wierszu 
<emphasis>PTT.act</emphasis> (patrz ni¿ej opis <emphasis>WhichRecord</emphasis>
i <emphasis>WhichField</emphasis>). Przy modyfikacji pliku 
<emphasis>ekrnxxxx.cor</emphasis> na systemie z dzia³aj±cym parcook'iem 
tej pozycji mo¿na nie wpisywaæ (tzn. trzeba wpisaæ cokolwiek, ale nie musi 
to byæ zgodne z rzeczywist± nazw± parametru), gdy¿ wynika ona jednoznacznie 
z numeru rekordu i pola w rekordzie (patrz dalej).
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>DivBy</emphasis>
</para>
<para>
Typ: double
</para>
<para>
Opis: Przez ile nale¿y dzieliæ warto¶æ z bazy aby dostaæ warto¶æ rzeczywist±, 
czyli 10 do potêgi miejsce przecinka, gdzie miejsce przecinka to PTT -&#62; 
tab[y].dot , czyli 2 pozycja w odpowiednim wierszu <emphasis>PTT.act</emphasis>
(patrz ni¿ej opis <emphasis>WhichRecord</emphasis> i 
<emphasis>WhichField</emphasis>). Przy modyfikacji pliku 
<emphasis>ekrnxxxx.cor</emphasis> na systemie z dzia³aj±cym parcook'iem tej 
pozycji mo¿na nie wpisywaæ (tzn. trzeba wpisaæ cokolwiek, ale nie musi to byæ 
zgodne z rzeczywist± nazw± parametru), gdy¿ wynika ona jednoznacznie z numeru 
rekordu i pola w rekordzie (patrz dalej).
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Color</emphasis>
</para>
<para>
Typ: unsigned char
</para>
<para>
Opis: Indeks koloru wykresu, od 1 do 12. Poszczególne kolory s± zdefiniowane 
w <filename>/opt/szarp/resources/Motif/SzarpDraw/SzarpDraw.res</filename>.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>WhichRecord</emphasis>
</para>
<para>
Typ: int
</para>
<para>
Opis: Tradycyjnie by³ to numer rekordu, w którym s± dane z wykresu. Numery 
zaczynaj± siê od 1, dla numeru 0 wykres jest niewy¶wietlany (to¿same z brakiem 
danych). Numer rekordu jest w bazie warto¶ci± pola <emphasis>ID</emphasis>. 
<emphasis>WhichRecord</emphasis> mo¿na wyliczyæ z numeru wiersza w 
<emphasis>PTT.act</emphasis> (pomijaj±c pierwszy wiersz opisuj±cy ilo¶æ linii 
pliku):
</para>
<para>
<emphasis>WhichRecord</emphasis> = &#60;numer_wiersza&#62; div 15 + 1
</para>
<para>
Nowa konwencja umo¿liwia nadanie temu polu warto¶ci <emphasis>-1</emphasis>, 
która umo¿liwia identyfikacjê parametru przez nazwê a nie indeks w bazie.
</para>
<para>
Nazwa: <emphasis>WhichField</emphasis> lub <emphasis>IPKName</emphasis>
</para>
<para>
Typ: int, zakres 0 - 14, lub string
</para>
<para>
Opis: Tradycyjnie by³ to numer pola w rekordzie numer 
<emphasis>WhichRecord</emphasis>, zawieraj±cego dane z wykresu. Numery 
zaczynaj± siê od 0. Ca³y rekord ma 15 pól. Numer pola okre¶la w bazie pole o 
nazwie <emphasis>FIELDXX</emphasis>, gdzie XX to WhichField. WhichField mo¿na 
wyliczyæ z numeru wiersza w <emphasis>PTT.act</emphasis> (pomijaj±c pierwszy 
wiersz opisuj±cy ilo¶æ linii pliku):
</para>
<para>
<emphasis>WhichField</emphasis> = (&#60;numer_wiersza&#62; - 1) mod 15
</para>
<para>
Odwrotnie: aby znale¼æ w <emphasis>PTT.act</emphasis> wiersz opisuj±cy dany 
parametr nale¿y (pomijaj±c pierwszy wiersz z informacjami ogólnymi) znale¼æ 
wiersz o numerze:
</para>
<para>
&#60;numer_wiersza&#62; = (<emphasis>WhichRecord</emphasis> - 1) * 15 + <emphasis>WhichField</emphasis> + 1
</para>
<para>
Je¿eli warto¶æ <emphasis>WhichRecord</emphasis> by³a mniejsza od 0, to zamiast 
pola <emphasis>WhichField</emphasis> powinno wyst±piæ pole 
<emphasis>IPKName</emphasis>, zawieraj±ce pe³n± nazwê parametru. Decyzja, czy 
spodziewaæ siê tej nazwy, czy te¿ numeru pola
jest podejmowana na podstawie warto¶ci <emphasis>WhichRecord</emphasis>.
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Drawunit</emphasis>
</para>
<para>
Typ: char, maksymalna d³ugo¶æ 10 znaków
</para>
<para>
Opis: Nazwa jednostki wykresu, ta sama co zawarto¶æ nawiasów kwadratowych 
pola PTT -&#62; tab[y].full, czyli 6 pozycji w odpowiednim wierszu 
<emphasis>PTT.act</emphasis> (patrz wy¿ej opis <emphasis>WhichRecord</emphasis>
i <emphasis>WhichField</emphasis>). Ka¿da linia musi wiêc mieæ jednostkê w 
nawiasach kwadratowych, o czym nale¿y pamiêtaæ modyfikuj±c 
<emphasis>PTT.act</emphasis>, zw³aszcza przy temperaturach i warto¶ciach bez 
mian, np. korektach (nale¿y wówczas wpisaæ jednostkê "nic" czyli [-]). Przy 
modyfikacji pliku <emphasis>ekrnxxxx.cor</emphasis> na systemie z dzia³aj±cym 
parcook'iem tej pozycji mo¿na nie wpisywaæ (tzn. trzeba wpisaæ cokolwiek, ale 
nie musi to byæ zgodne z rzeczywist± nazw± parametru), gdy¿ wynika ona 
jednoznacznie z numeru rekordu i pola w rekordzie (patrz wy¿ej).
</para>
</listitem>

<listitem>
<para>
Nazwa: <emphasis>Axisnr</emphasis>
</para>
<para>
Typ: unsigned char
</para>
<para>
Opis: Indeks osi odpowiadaj±cej danemu wykresowi (patrz opis struktury osi).  
Indeksy zaczynaj± siê od 0.
</para>
</listitem>

</itemizedlist>
</para>

</section> <!-- old-config-ekrncor-draw -->

</section> <!-- old-config-ekrncor -->

</chapter> <!-- old-config -->

<chapter id="sender">
<title>Program sender</title>

<para>
 Program <filename>sender</filename> wykorzystywany jest do komunikacji z demonami linii, a dok³adnie do wysy³ania parametrów do sterowników i do odbierania ewentualnych odpowiedzi.
</para>

<section id="sender-config">
<title>Konfiguracja programu <filename>sender</filename></title>

<para>
Aplikacja <filename>sender</filename> w swojej poprzedniej wersji wykorzystywa³a do konfiguracji plik <filename>sender.cfg</filename>. W aktualnej wersji program <filename>sender</filename> do konfiguracji wykorzystuje wy³±cznie plik <filename>params.xml</filename> z katalogu <filename>/opt/szarp/{aktualna konfiguracja}/config/</filename>.
Do konfiguracji programu <filename>sender</filename> wykorzystujemy dwa zasadnicze elementy pliku <filename>params.xml</filename>:   
<itemizedlist>
<listitem>
<para>
Pierwszy z nich, <emphasis>send_freq</emphasis>, dotyczy czêstotliwo¶ci wysy³ania parametrów do sterownika i powinien zostaæ podany zaraz na pocz±tku pliku konfiguracyjnego. 
<programlisting>
<![CDATA[
<params xmlns="http://www.praterm.com.pl/SZARP/ipk" 
        xmlns:exec="http://www.praterm.com.pl/SZARP/ipk-extra"
        version="1.0" 
        read_freq="10" 
        send_freq="10" 
        title="Pamieci">
]]>
</programlisting>  
</para></listitem>
<listitem><para>
Drugi z nich, <emphasis>send</emphasis>, mo¿e zostaæ zdefiniowany dowoln± ilo¶æ razy. Miejsce jego definicji okre¶la jednoznacznie, do którego sterownika zostanie wys³any w³a¶nie definiowany parametr. Dok³adniejszy opis tego parametru zosta³ podany w sekcji <xref linkend="form-el-send">.
</para></listitem>
</itemizedlist>
</para>
</section>

<section id="sender-run">
<title>Uruchamianie programu sender</title>

<para>
Uruchamianie programu <application>sender</application>:

<programlisting>
<![CDATA[
/opt/szarp/bin/sender --help
Usage: sender [OPTION...]
SZARP sender application daemon.

      --D<param>=val         Set initial value of libpar variable <param> to
                             val.
  -n, --no-daemon            Do not fork and go into background, useful for
                             debug.
  -?, --help                 Give this help list
      --usage                Give a short usage message
  -V, --version              Print program version

Config file szarp.cfg:
These parameters are read from section 'sender' and are optional:
        log             path to log file, default is /opt/szarp/log/sender.log
        log_level       log level, from 0 to 10, default is from command line
                        (-Ddebug=needed_log_level parameter) or 2.

Report bugs to coders@praterm.com.pl.
]]>
</programlisting>
</para>
<para>
W aktualnej wersji, aplikacja <filename>sender</filename> mo¿e pracowaæ w trybie "debug" lub w trybie normalnym (bez debugowania). Uruchomienie w trybie "debug" mo¿e nast±piæ w kilku przypadkach:
<itemizedlist>
<listitem>
<para>
<programlisting>
<![CDATA[
/opt/szarp/bin/sender
]]>
</programlisting>
<programlisting>
<![CDATA[
Przyk³adowa zawarto¶æ sekcji sender pliku szarp.cfg: 
:sender
log_level=3
log=/opt/szarp/logs/senderek.log
]]>
</programlisting>
Je¿eli uruchomiamy program bez podania ¿adnych parametrów w linii argumentów, ale w pliku konfiguracyjnym <filename>szarp.cfg</filename> w sekcji <emphasis>sender</emphasis> zosta³ zdefiniowany parametr <emphasis>log_level</emphasis> o warto¶ci wiêkszej od 0, lub parametr <emphasis>log_level</emphasis> nie zosta³ zdefiniowany, przez co aplikacja <filename>sender</filename> przyjmuje jego domy¶ln± warto¶æ na 2. Dodatkowo, w pliku <filename>szarp.cfg</filename> w sekcji <emphasis>sender</emphasis>, mo¿na zdefiniowaæ parametr <emphasis>log</emphasis>, który opisuje ¶cie¿kê do pliku, do którego zapisywane bêd± wszystkie informacje diagnostyczne generowane przez program <filename>sender</filename>. Tak uruchomiona aplikacja bêdzie dzia³aæ w tle (uruchomiona zostanie jako demon).    
</para>
</listitem>
<listitem>
<para>
<programlisting>
<![CDATA[
/opt/szarp/bin/sender -n
]]>
</programlisting>
Podobnie jak w poprzednim przypadku, wszelkie informacje o sposobie zapisywania informacji diagnostycznych zostan± pobrane z pliku <filename>szarp.cfg</filename> lub zostan± przyjête warto¶ci domy¶lne. Aplikacja uruchomiona z paramtrem -n (lub --no-deamon) nie bêdzie dzia³aæ w tle.    
</para>
</listitem>
<listitem>
<para>
<programlisting>
<![CDATA[
/opt/szarp/bin/sender -n -Ddebug=5
]]>
</programlisting>
Je¿eli w pliku <filename>szarp.cfg</filename> nie ma informacji o warto¶ci parametru  <emphasis>log_level</emphasis>, wówczas mo¿emy j± zdefiniowaæ z linii argumentów z wykorzystaniem parametru <emphasis>debug</emphasis> i w ten sposób okre¶liæ poziom diagnostyki. 
</para>
</listitem>
</itemizedlist>
Uruchomienie w trybie normalnym nastêpuje zawsze wtedy kiedy poziom diagnostyki zosta³ ustawiony na 0.  
</para>
<para>
Po uruchomieniu aplikacji sender w trybie diagnostycznym, wa¿na jest obserwacja w dwóch miejscach:
<itemizedlist>
<listitem><para>
po uruchomieniu wszystkie paramtery typu send zostan± odczytane przez aplikacjê i zapisane do pliku konfiguracyjnego, przez co bêdzie mo¿liwa kontrola ich poprawno¶ci np.:
</para>
<para>
<programlisting>
 NumberOfPars=20 BasePeriod=10
Par 000 src=    12 dst=    48, 4 retry=1 rtype=13107200 Probe  skipped
Par 001 src=    15 dst=   305, 5 retry=1 rtype=13107201 Minute skipped
Par 002 src=   123 dst=  3890, 4 retry=1 rtype=13107202 Min10  SENT
Par 003 src=   112 dst=  4146, 1 retry=1 rtype=13107203 Hour   SENT
Par 004 src=   112 dst=  4146, 2 retry=1 rtype=13107204 Hour   SENT
Par 005 src=   112 dst=  4146, 3 retry=1 rtype=13107205 Hour   SENT
Par 006 src=   112 dst=  4146, 4 retry=1 rtype=13107206 Hour   SENT
Par 007 src=   112 dst=  4146, 5 retry=1 rtype=13107207 Hour   skipped
Par 008 src=   112 dst=  4146, 6 retry=1 rtype=13107208 Hour   skipped
Par 009 src=   112 dst=  4146, 7 retry=1 rtype=13107209 Hour   skipped
Par 010 src=   112 dst=  4146, 8 retry=1 rtype=13107210 Hour   skipped
Par 011 src=   112 dst=  4146, 9 retry=1 rtype=13107211 Hour   SENT
Par 012 src=   112 dst=  4146, 0 retry=1 rtype=13107212 Hour   SENT
Par 013 src=    21 dst=  5681, 1 retry=1 rtype=13107213 Day    SENT
Par 014 src=    22 dst=  5681, 2 retry=1 rtype=13107214 Min10  skipped
Par 015 src=     0 dst=   562, 0 retry=1 rtype=13107215 Const  SENT
Par 016 src=     0 dst=   562, 1 retry=1 rtype=13107216 Const  SENT
Par 017 src=     0 dst=   562, 2 retry=1 rtype=13107217 Const  SENT
Par 018 src=     0 dst=   562, 3 retry=1 rtype=13107218 Const  SENT
Par 019 src=     0 dst=   562, 4 retry=1 rtype=13107219 Const  SENT
</programlisting>
</para>
<para>
Gdzie:
Par - numer kolejny pozycji na li¶cie, od 0
</para>
<para>
src - adres w pamiêci dzielonej lub 0, je¿eli wysy³ana jest sta³a
</para>
<para>
dst - (numer linii - 1) * 256 + numer jednostki jako znak (np. '0')
</para>
<para>
, numer parametru wej¶ciowego jednostki
</para>
<para>
retry - liczba powtórzeñ 
</para>
<para>
rtype - niewa¿ne (jest to identyfikator nadawcy)
</para>
<para>
Probe, Minute ... Const - typ pamiêci dzielonej lub sta³a
</para>
<para>
SENT, skipped - postêpowanie w wypadku, gdy nast±pi brak danych (SZARP_NO_DATA)
	(wysy³aæ, nie wysy³aæ)
</para>
</listitem>

<listitem>
<para>
oraz podczas wysy³ania komunikatu, co pozwoli nam zorientowaæ siê czy konfiguracja jest poprawna np.:
</para>
<para>
<programlisting>
Message 00048 with param: 4 value:  -32768 rtype: 13107200 bad value, skipped
Message 00305 with param: 5 value:       0 rtype: 13107201 rejected
Message 04146 with param: 1 value:  -32768 rtype: 13107203 not confirmed
Message 04146 with param: 5 value:  -32768 rtype: 13107207 bad value, skipped
Message 04146 with param: 8 value:  -32768 rtype: 13107210 bad value, skipped
Message 04146 with param: 9 value:  -32768 rtype: 13107211 not confirmed
Message 04146 with param: 0 value:  -32768 rtype: 13107212 rejected
Message 05681 with param: 1 value:       0 rtype: 13107213 not confirmed
Message 05681 with param: 2 value:       0 rtype: 13107214 not confirmed
Message 00562 with param: 0 value:  -32768 rtype: 13107215 rejected
Message 00562 with param: 4 value:    9999 rtype: 13107219 status OK
</programlisting>
</para>
<para>
Message, param  - to co dst powy¿ej
</para>
<para>
value - pobrana warto¶æ
</para>
<para>
rtype - jak wy¿ej
</para>
<para>
Najwa¿niejszy jest komunikat na koñcu:
<itemizedlist>
<listitem><para>
bad value, skipped - value jest równa SZARP_NO_DATA i nie nale¿y wysy³aæ
 (ewentualnie adres w pamiêci jest równy NO_PARAM),
  nic nie zosta³o wys³ane do demona.
</para></listitem>
<listitem><para>
- not confirmed - demon nie potwierdzi³ odbioru komunikatu.
</para></listitem>
<listitem><para>
- rejected - komunikat doszed³ do demona, ale sterownik nie odpowiedzia³.
</para></listitem>
<listitem><para>
- status OK - sterownik odpowiedzia³ raportem na polecenie wys³ania parametrów.
</para></listitem>

</itemizedlist>
</para>

</listitem>

</itemizedlist>

</para>
</section> <!-- old-config-sender-run -->

<section id="sender-algo">
<title>Algorytm dzia³ania programu sender</title>

<para>
Program sender przy starcie inicjalizuje tablicê SterInfo, w której dla ka¿dego
wysy³anego parametru znajduj± siê nastêpuj±ce informacje:
<programlisting>
typedef struct _SterData {
	tMsgSetParam msg;       /* komunikat do wys³ania */
	unsigned short srcaddr; /* adres (indeks IPC) wysy³anego parametru */
	unsigned char status;   /* stan transmisji parametru:
					MSG_SEND - do wys³ania
					MSG_NOSEND - nie bêdzie wysy³any (brak
					danych)
					MSG_CONF - czekamy na potwierdzenie
				 */
       unsigned char avgkind;   /* rodzaj ¶redniej do wys³ania */
       unsigned char sendnodata;/* czy wysy³aæ warto¶ci 'NO_DATA' */
} tSterData;
</programlisting>
</para>

<para>
Struktura komunikatu do wys³ania jest nastêpuj±ca:
<programlisting>
typedef struct _MsgSetParam {
	long type;	/* typ wiadomo¶ci, wyliczany na podstawie
			numeru linii i jednostki */
	struct {
		ushort param;	/* numer parametru wyj¶ciowego sterownika */
		short value;	/* warto¶æ parametru */
		long rtype;	/* typ oczekiwanej odpowiedzi od demona,
				dla ka¿dego parametru sendera inny */
		unsigned char retry;
				/* ilo¶æ powtórzeñ przy nieudanym wys³aniu,
				niewykorzystywana w programie */
	} tSetParam;
} tMsgSetParam;
</programlisting>
</para>

<para>
Wykorzystywane s± dwie kolejki - jedna do wysy³ania ¿±dañ ustawienia
parametrów, druga dla odbierania odpowiedzi (potwierdzeñ) od demonów.
</para>

<para>
W pêtli program wykonuje nastêpuj±ce dzia³ania:
<orderedlist>
<listitem><para>
£±czy siê z parcookiem i dla ka¿dego parametru oddzielnie pod³±cza siê do
segmentu pamiêci dzielonej zale¿nego od pola avgkind (rodzaju ¶redniej) dla
parametru. Kopiuje warto¶æ do pola value komunikatu, przy czym je¿eli warto¶æ
jest równa NO_DATA a nie mamy wysy³aæ pustych warto¶ci, to status jest
ustawiany na MSG_NOSEND. Je¿eli mamy wysy³aæ sta³±, to oczywi¶cie zostaje
sta³a (wpisana przy inicjalizacji do pola value komunikatu).
</para></listitem>

<listitem><para>
Dla ka¿dego parametru który ma status MSG_SEND (do wys³ania) próbuje wstawiæ
do kolejki uprzednio przygotowany komunikat. Zapamiêtuje je¿eli choæ w jednym
przypadku siê to nie uda³o. Podobnie jak w innych miejscach w programie,
operacje na kolejkach wykonywane s± z flag± NO_WAIT - nieblokuj±co.
</para></listitem>

<listitem><para>
Je¿eli w poprzednim kroku nie uda³o siê wys³aæ wszystkich komunikatów, program
zak³ada, ¿e kolejka jest zapchana i próbuje wyj±æ z kolejki tyle komunikatów
ile jest parametrów (a wiêc na pewno nie mniej ni¿ w³o¿y³). Wykorzystywany
jest typ komunikatu 0, oznaczaj±cy dowolny komunikat. Zapchanie kolejki nie
jest takie proste - kolejka ma standardowo wielko¶æ 16 KB, pojedynczy
komunikat to oko³o 24 bajty (mo¿e zale¿eæ od kompilatora - sposobu pakowania
pól w strukturze), a wiêc kolejka mie¶ci ponad 680 komunikatów. Je¿eli
wk³adamy komunikaty co 10 sekund (i nikt ich nie wyjmuje), kolejka zacznie siê
zapychaæ po prawie dwóch godzinach...
</para></listitem>

<listitem><para>
Je¿eli w kroku 1 nie uda³o siê wys³aæ wszystkich komunikatów, powtórz kroki 
2 i 3, a nastêpnie przejd¼ do kroku 5.
</para></listitem>

<listitem><para>
Czekaj 10 sekund (lub tyle sekund ile wynosi warto¶æ parametru send_freq zdefiniowanego w pliku params.xml).
</para></listitem>

<listitem><para>
Dla ka¿dego parametru pobierz z kolejki odpowiedzi 
wszystkie komunikaty o oczekiwanym 
typie zwrotnym. Je¿eli odpowied¼ dla danego parametru by³a oczekiwana (a wiêc
pole status dla parametru mia³o warto¶æ MSG_CONF), sprawd¼ czy pola param i
value odebranego komunikatu s± takie jak komunikatu wysy³anego (dla danego
parametru). Je¿eli wszystko siê zgadza, ustawiany jest status - MSG_NOREP
je¿eli ilo¶æ pozosta³ych 
powtórzeñ zg³oszona przez demona linii jest równa 0 lub MSG_OK
w przeciwnym przypadku. Oznacza to tak¿e, ¿e status MSG_NOREP (oznaczaj±cy
b³±d) jest ustawiany tak¿e w sytuacji, gdy po prostu w pliku konfiguracyjnym
nie za¿±dali¶my powtarzania. Status ten nie ma jednak ¿adnego wp³ywu na
dzia³anie sendera, wykorzystywany jest tylko do diagnostyki.
</para></listitem>

<listitem><para>
Z kolejki odpowiedzi usuwane s± wszystkie pozosta³e tam komunikaty.
</para></listitem>

<listitem><para>
Program przechodzi do kroku 1.
</para></listitem>

</orderedlist>
</para>

<para>
Nale¿y zauwa¿yæ, ¿e demony ró¿nie podchodz± do wspó³pracy z senderem.
Najbardziej zaawansowany jest linedmn, który próbuje wysy³aæ potwierdzenia, co
mo¿e skutkowaæ poprawnym logowaniem przez sendera faktu dotarcia lub
niedotarcia danych do sterownika (choæ domy¶lnie logowanie jest wy³±czone).
Demon rsdmn wysy³a potwierdzenia, ale z b³êdnym typem komunikatu, wiêc s± one
usuwane przez sendera z kolejki jako b³êdne. Demon mbrtudmn nie wysy³a w ogóle
potwierdzeñ (co wydaje siê najsensowniejszym rozwi±zaniem). Pozosta³e demony
(w chwili pisanie tego rozdzia³u) nie wspó³pracuj± w ogóle z senderem.
</para>
</section> <!-- old-config-sender-algo -->
</chapter> <!-- sender -->


<chapter id="libpar">
<title>Biblioteka libpar</title>
<abstract>
<para>Rozdzia³ opisuje format g³ównego pliku konfiguracyjnego systemu SZARP -
<filename>szarp.cfg</filename> i bibliotekê <emphasis>libpar</emphasis>
s³u¿±c± do odczytywania warto¶ci konfiguracyjnych z tego pliku. Unikaln±
w³asno¶ci± stosowanego rozwi±zania jest mo¿liwo¶æ korzystania w pliku
konfiguracyjnym z warto¶ci opcji podanych przy uruchamianiu programu.
</para>

</abstract>

<section id="libpar-format">
<title>Format pliku <filename>szarp.cfg</filename></title>

<section id="libpar-format-descr">
<title>Opis ogólny</title>
<para>
Plik <filename>szarp.cfg</filename> zawiera parametry o zadanym nazwach i
warto¶ciach, podzielone na sekcje. Spo¶ród sekcji (o dowolnych nazwach) jedna
sekcja - sekcja globalna jest wyró¿niona. Program pytaj±cy siê (za pomoc±
biblioteki libpar) o warto¶æ parametru mo¿e wskazaæ, w jakiej sekcji nale¿y
szukaæ parametru. Je¿eli parametr nie zostanie znaleziony we wskazanej sekcji,
szukany jest w sekcji globalnej. Je¿eli program nie poda nazwy sekcji,
parametr bêdzie szukany tylko w sekcji globalnej.
</para>
<para>
Poza deklaracjami sekcji i parametrów w pliku mo¿na znale¼æ tak¿e
<emphasis>dyrektywy</emphasis> i deklaracje <emphasis>zmiennych</emphasis>.
</para>
<para>
Wszêdzie poza nazwami sekcji i parametrów oraz nazw± pliku w dyrektywie
<emphasis>$include</emphasis> (a wiêc w komentarzach, dyrektywach, sta³ych 
znakowych i w warto¶ciach parametrów) backslash na koñcu linii powoduje jej 
kontynuacjê.
</para>

<para>
Edycjê pliku <filename>szarp.cfg</filename> u³atwia wykorzystanie pliku do
pod¶wietlania sk³adni edytora <application>vim</application>. Wykorzystywany
typ pliku to <emphasis>libpar</emphasis> (:set ft=libpar).
</para>

<para>
Linie puste s± ignorowane. Podobnie linie zaczynaj±ce siê od znaku
<emphasis>#</emphasis> - traktowane s± jako komentarze.
Wszystkie istotne linie (poza komentarzami i pustymi) musz± koñczyæ siê
znakiem koñca linii a nie np. koñca pliku.
W miejscach, gdzie dopuszczalny jest "bia³y znak", mog± wyst±piæ spacje
i tabulacje w dowolnej ilo¶ci.
</para>
</section>

<section id="libpar-format-sections">
<title>Sekcje</title>

<para>Sekcje oznacza siê przez podanie nazwy sekcji poprzedzonej znakiem
<emphasis>:</emphasis> (dwukropka) - przy czym dwukropek musi byæ pierwszym
znakiem w linii, a miêdzy nim a nazw± sekcji nie mo¿e byæ ¿adnych znaków.
Nazwa sekcji mo¿e zawieraæ znaki alfanumeryczne i podkre¶lenie. Sekcje o tej
samej nazwie mo¿na deklarowaæ wielokrotnie - bêd± one logicznie sklejane w
jedn±. Na pocz±tku pliku rozpoczyna siê sekcja globalna - obowi±zuj±ca do
napotkania pocz±tku innej sekcji. Sekcjê globaln± mo¿na tak¿e bezpo¶rednio
zadeklarowaæ przez podanie nazwy sekcji <emphasis>global</emphasis> (w tym i
tylko w tym przypadku wielko¶æ liter nie ma znaczenia).
<programlisting>
# Teraz mamy sekcjê globaln±

:sekcja1

# A teraz sekcjê o nazwie 'sekcja 1'

:global

# A teraz znowu sekcjê globaln±.

</programlisting>
</para>
</section>

<section id="libpar-format-params">
<title>Parametry</title>

<para>
Deklaracja parametru polega na podaniu nazwy parametru (znaki alfanumeryczne i
podkre¶lenie), bezpo¶rednio po niej znaku <emphasis>=</emphasis> a potem
warto¶ci parametru:
<programlisting>
nazwa=to jest warto¶æ parametru
</programlisting>
Jest to równowa¿ne:
<programlisting>
nazwa=to jest \
warto¶æ parametru
</programlisting>
Za warto¶æ parametru podstawiany jest ca³y ci±g tekstowy, do koñca linii (ale
bez niego). Powtórne zadeklarowanie parametru nadpisuje star± warto¶æ.
</para>

</section>


<section id="libpar-format-direct">
<title>Dyrektywy</title>

<para>
W pliku mog± wystêpowaæ tak zwane dyrektywy. Dyrektywy musz± zaczynaæ siê na
pocz±tku linii. Obecnie dostêpne s± nastêpuj±ce:

<itemizedlist>

<listitem>
<para>
<emphasis>$include "nazwa_pliku"</emphasis> - 
powoduje tekstowe wklejenie w miejscu jej wyst±pienia zawarto¶ci pliku o
podanej nazwie. Nazwa pliku mo¿e zawieraæ dowolne znaki poza podwójnym
cudzys³owem i koñcem linii. Mo¿liwe jest wklejanie rekurencyjne, do maksymalnej
g³êboko¶ci okre¶lanej przez sta³± (obecnie 10).
</para>
</listitem>

<listitem>
<para>
<programlisting>
$if warunek
...
$elseif warunek
...
$else
...
$end
</programlisting>
Dyrektywa warunkowa. Ga³êzie <emphasis>$elseif</emphasis> i
<emphasis>$else</emphasis> s± opcjonalne, przy czym
pierwsza z nich mo¿e wystêpowaæ wiele razy. Warunki maj± postaæ:
<programlisting>
argument = argument
</programlisting>
lub
<programlisting>
<![CDATA[
argument <> argument
]]>
</programlisting>
(odpowiednio test na równo¶æ i ró¿no¶æ leksykograficzn± argumentów).
Argumentem mo¿e byæ pojedyncze s³owo lub sta³a tekstowa w podwójnych cudzys³owach
(np. "Ala ma kota"). Obs³ugiwane s± poprawnie nastêpuj±ce sekwencje znaków:
<programlisting>
\n
\t
\\
\"
</programlisting>
</para>
<para>
Inn± postaci± argumentu mo¿e byæ wywo³anie funkcji, postaci:
<programlisting>
identyfikator ( parametr )
</programlisting>
gdzie identyfikator zaczyna siê od litery lub podkre¶lenia i mo¿e zawieraæ
tak¿e cyfry, a parametr jest sta³± znakow± lub kolejnym wywo³aniem funkcji.
Wywo³anie funkcji w czasie parsowania jest zastêpowane zwracanym przez ni±
napisem. Dostêpne funkcje opisane s± w <xref linkend="libpar-format-funcs">.
</para>
<para>
Warunki s± wyliczane podczas parsowania i parsowane s± tylko ga³êzie, dla
których warunki by³y spe³nione.
Dyrektywy warunkowe mo¿na zagnie¿d¿aæ do g³êboko¶ci 10.
</para>
</listitem>

</itemizedlist>
</para>

</section>

<section id="libpar-format-funcs">
<title>Funkcje</title>

<para>
Aktualnie zaimplementowane funkcje:
<itemizedlist>

<listitem><para>
<emphasis>execute("komenda")</emphasis> - zwraca to, co wypisze na 
stdout podana jako parametr komenda, zaimplementowane tylko pod Linuksem.
Pod Windows zwraca pusty ci±g.
</para></listitem>

<listitem><para>
<emphasis>exec("komenda")</emphasis> - jak wy¿ej, ale obcina znak koñca linii,
równie¿ dostêpna tylko pod Linuksem.
Pod Windows zwraca pusty ci±g.
</para></listitem>

<listitem><para>
<emphasis>platform()</emphasis> - zwraca napis <emphasis>linux</emphasis> pod
Linuksem i <emphasis>windows</emphasis> pod Windows.
</para></listitem>

</itemizedlist>
</para>
</section>

<section id="libpar-format-vars">
<title>Zmienne</title>

<para>
W pliku konfiguracyjnym we wszystkich sta³ych tekstowych, nazwach sekcji
i parametrów oraz zawarto¶ciach parametrów mog± wystêpowaæ wyra¿enia postaci
<emphasis>$nazwa$</emphasis>. S± one zastêpowane aktualn± warto¶ci± zmiennej o 
nazwie <emphasis>nazwa</emphasis>.
</para>
<para>
Zmiennym mo¿na przypisywaæ warto¶ci w nastêpuj±cy sposób:
<programlisting>
$nazwa$ := warto¶æ
</programlisting>
gdzie warto¶æ jest albo sta³± tekstow± albo wywo³aniem funkcji. Nastêpuj±cy
fragment:
<programlisting>
$command$ := "hostname -s"
$prefix$ := exec("$command$")
:Motif_$prefix$
</programlisting>
na komputerze o nazwie <emphasis>leg1</emphasis> spowoduje powstanie sekcji 
o nazwie <emphasis>Motif_leg1</emphasis>.
</para>
<para>
Je¿eli zmiennej nie nadamy warto¶ci pocz±tkowej, bêdzie ona zastêpowana
pustym tekstem.
Zmienne nie mog± wystêpowaæ w parametrach dyrektywy
<emphasis>$include</emphasis>.
</para>
<para>
Zmienne mo¿na deklarowaæ w linii komend za pomoc± argumentu:
<programlisting>
<![CDATA[
-D<nazwa>=<warto¶æ>
]]>
</programlisting>
Wymaga to odpowiedniej inicjalizacji biblioteki libpar w programie (zobacz
<xref linkend="libpar-api-init">).
</para>

<para>
Poza tym biblioteka automatycznie udostêpnia zmienne o nazwach
<emphasis>argc</emphasis>, <emphasis>argv0</emphasis>,
<emphasis>argv1</emphasis> itd., których warto¶ci± s± odpowiednio ilo¶æ
parametrów przekazanych do programu i kolejne parametry, pocz±wszy od nazwy
programu. Zmienne te nie uwzglêdniaj± argumentów programu s³u¿±cych do 
inicjalizacji warto¶ci zmiennych libpar.
</para>

</section> <!-- libpar-format-vars -->

</section> <!-- libpar-format -->

<section id="libpar-api">
<title>Interfejs biblioteki</title>

<para>
Biblioteka korzysta z parsera pliku napisanego we fleksie i udostêpnia proste
API do pobierania warto¶ci parametrów. Dane wewnêtrzne biblioteki
przechowywane s± w statycznych, globalnych zmiennych. Nie zaleca siê
korzystania z biblioteki inaczej ni¿ przez opisane API.
Korzystanie z biblioteki wymaga w³±czenia do programu pliku nag³ówkowego
<filename>libpar.h</filename>.
</para>

<section id="libpar-api-init">
<title>Inicjalizacja biblioteki</title>

<para>
Przed u¿yciem jakiejkolwiek funkcji z biblioteki konieczna jest jej
inicjalizacja. Dokonuje siê tego przez u¿ycie jednej z dwóch funkcji:
<itemizedlist>

<listitem><para>
<emphasis>libpar_init_with_filename(char *filename, int exit_on_error)</emphasis>
- inicjalizuje bibliotekê i wczytuje plik konfiguracyjny o podanej nazwie.
Je¿eli wyst±pi³ b³±d podczas odczytu pliku i warto¶æ zmiennej
<emphasis>exit_on_error</emphasis> jest ró¿na od 0, wywo³ywana jest funkcja
<emphasis>exit(1)</emphasis> - program koñczy dzia³anie. Je¿eli zamiast nazwy
pliku podamy <emphasis>NULL</emphasis>, wczytany zostanie plik konfiguracyjny
z domy¶lnej lokalizacji - pod Linuksem jest to
<filename>/etc/szarp/szarp.cfg</filename>. Pod Windows nie ma domy¶lnej
lokalizacji i funkcja nie za³aduje ¿adnego pliku (wyst±pi b³±d).
</para></listitem>

<listitem><para>
<emphasis>libpar_init()</emphasis> - równowa¿ne
<emphasis>libpar_init_with_filename(NULL, 1)</emphasis>.
</para></listitem>

</itemizedlist>
</para>

<para>
Aby mo¿liwe by³o korzystanie w pliku konfiguracyjnym ze zmiennych
zadeklarowanych w linii komend uruchamianego programu (parametry
<emphasis>-Dnazwa=warto¶æ</emphasis> - zobacz 
<xref linkend="libpar-format-vars">), nale¿y jeszcze wywo³aæ funkcjê
<emphasis>libpar_read_cmdline(int *argc, char *argv[]) </emphasis>.
Argumentami funkcji s± <emphasis>wska¼niki</emphasis> do standardowych
argumentów funkcji <emphasis>main()</emphasis>. Warto¶æ tych argumentów jest
modyfikowana - argc jest zmniejszany, a argv modyfikowany tak, ¿e w efekcie
argumenty obs³ugiwane przez bibliotekê s± w dalszej czê¶ci programu
niewidoczne. Pozwala to na nieprzejmowanie siê programu obs³ug± opcji '-D'.
</para>

<para>
Funkcja <emphasis>libpar_reinit_with_filename(char *filename, int exit_on_error)</emphasis>
ponownie inicjalizuje bibliotekê plikiem konfiguracyjnym o podanej nazwie. Je¿eli 
zamiast nazwy zostanie podany NULL, biblioteka u¿yje pliku <filename>/etc/szarp/szarp.cfg</filename>
(jest to dozwolone tylko w Linuksie). Parametry z pliku, którym poprzednio zainicjalizowano
bibliotekê, przestaj± byæ dostêpne. Je¿eli parametr <emphasis>exit_on_error</emphasis> ma warto¶æ
ró¿n± od 0 i podczas odczytu pliku wyst±pi b³±d, biblioteka wywo³a funkcjê <emphasis>exit(1)</emphasis>.
Wywo³ania funkcji <emphasis>libpar_reinit()</emphasis> jest równowa¿ne 
<emphasis>libpar_reinit_with_filename(NULL,1)</emphasis>.
</para>

<para>
Ostatnim etapem korzystania z biblioteki powinno byæ wywo³anie funkcji
<emphasis>libpar_done()</emphasis>. Zwalnia ona zajmowan± przez bibliotekê 
pamiêæ i powoduje, ¿e dostêp do warto¶ci parametrów staje siê niemo¿liwy.
</para>

</section> <!-- libpar-api-init -->

<section id="libpar-api-params">
<title>Odczytywanie warto¶ci parametrów</title>

<para>
Do pobierania warto¶ci parametrów zwykle u¿ywa siê jednej z dwóch funkcji:
<itemizedlist>

<listitem><para>
<programlisting>
void libpar_readpar(char *section, char *par, char *buf,
                    int size, int exit_on_error);
</programlisting>
Funkcja szuka w sekcji o nazwie <emphasis>sections</emphasis> (lub globalnej
je¿eli podano <emphasis>NULL</emphasis>) parametru o nazwie
<emphasis>par</emphasis>. Je¿eli znaleziono parametr, jego warto¶æ jest
kopiowana do bufora o adresie <emphasis>buf</emphasis> i wielko¶ci
<emphasis>size</emphasis> (je¿eli warto¶æ parametru by³a d³u¿sza, to jest ona
obcinana - w efekcie bufor mo¿e nie koñczyæ siê znakiem '\000'). 
Parametr <emphasis>exit_on_error</emphasis> ró¿ny od 0 powoduje, ¿e
nieznalezienie parametru koñczy program z b³êdem. Wypisywany jest odpowiedni
komunikat. Je¿eli nie znaleziono parametru, bufor nie jest modyfikowany.
</para>
</listitem>

<listitem>
<para>
<programlisting>
char *libpar_getpar(char *section, char *par, int exit_on_error);
</programlisting>
Funkcja dzia³a podobnie do poprzedniej, ale warto¶æ parametru jest kopiowana
do nowo zaalokowanego bufora o odpowiedniej wielko¶ci, którego adres jest zwracany. 
Zwolnienie bufora za pomoc± funkcji <emphasis>free()</emphasis> nale¿y do
programu. Je¿eli nie
znaleziono parametru i podano <emphasis>exit_on_error</emphasis> równe 0,
funkcja zwraca <emphasis>NULL</emphasis>.
</para>
</listitem>
</itemizedlist>

</para>

</section> <!-- libpar-api-params -->

</section> <!-- libpar-api -->

</chapter> <!-- libpar -->

<chapter id="ipk">
<title>IPK - konfiguracja systemu SZARP</title>

<abstract>

<para>
IPK jest opartym na XML formacie opisu konfiguracji systemu SZARP. Niniejszy
rozdzia³ opisuje za³o¿enia IPK, format samego pliku, tworzenie i modyfikacjê
konfiguracji (w tym wspó³pracê z programami korzystaj±cymi z systemu
konfiguracji SZARP 2.1), a tak¿e zawiera uwagi dla programistów pisz±cych
programy korzystaj±ce z IPK.
</para>
<para>
Dokumentacja ta nie jest przeznaczona dla u¿ytkowników systemu, ale dla osób
konfiguruj±cych system oraz programistów rozwijaj±cych obecne i pisz±cych nowe
aplikacje wchodz±ce w jego sk³ad. Zak³ada siê w szczególno¶ci znajomo¶æ
ogólnej struktury systemu, w szczególno¶ci tradycyjnych plików konfiguracyjnych 
wersji 2.1.
</para>


</abstract>

<section id="konc">
<title>Koncepcja</title>

<section id="konc-poco">
<title>Po co nowy format konfiguracji</title>

<para>
Konfiguracja SZARP'a 2.1 sk³ada siê z wielu plików, opisuj±cych ró¿ne aspekty
systemu. Oddzielne pliki opisuj± sposób komunikacji ze sterownikami,
przyporz±dkowanie danym ze sterowników konkretnych parametrów, parametry
wyliczane na podstawie innych (dwóch rodzajów), strukturê bazy danych do
zapisu parametrów, generowane raporty i wykresy. 
Dodatkowo ka¿dy program (np. <emphasis>analiza</emphasis>
czy <emphasis>sender</emphasis>) wprowadza zwykle w³asny plik konfiguracyjny.
</para>

<para>
Podej¶cie takie jest z jednej strony do¶æ elastyczne, w szczególno¶ci nie jest
konieczne opisywanie elementów systemu, które nie s± w danej instalacji
wykorzystywane. Czê¶æ zmian i modyfikacji mo¿e byæ wykonywana lokalnie, bez
ingerencji w opis innych elementów.
</para>

<para>
Niestety, miêdzy opisywanymi w ró¿nych miejscach elementami zachodz± czêsto
do¶æ g³êbokie i skomplikowane zale¿no¶ci. W szczególno¶ci jako identyfikatory
parametrów w systemie stosowane s± albo indeksy IPC, albo numery linii w pliku
<filename>PTT.act</filename> (które odpowiadaj± z grubsza indeksom w bazie). 
Powoduje to jednak, ¿e
o ile dodawanie nowych elementów do systemu jest do¶æ proste, to usuwanie czy
te¿ modyfikacja uk³adu parametrów ju¿ istniej±cych jest do¶æ skomplikowane.
</para>

<para>
Dodatkowo, pliki konfiguracyjne by³y konstruowane w taki sposób, aby ³atwo
mog³y z nich korzystaæ programy. Na przyk³ad wiêkszo¶æ plików zawiera na
pocz±tku liczniki linii, co z dzisiejszego punktu widzenia jest anachronizmem,
utrudniaj±cym modyfikacjê konfiguracji przez cz³owieka.
</para>

<para>
Rozmiary poszczególnych instalacji tak¿e zapewne przeros³y nieco pocz±tkowe
zamierzenia twórców. W efekcie rêczna edycja konfiguracji sta³a siê bardzo
skomplikowana i pracoch³onna, trudno siê przy niej ustrzec b³êdów. Rozwi±zaniem
mia³ byæ program <emphasis>parconf</emphasis>, czyli edytor konfiguracji
systemu SZARP. 
</para>

<para>
Program parsowa³ ca³± strukturê konfiguracji SZARP'a, a nastêpnie pozwala³ za
pomoc± jêzyka poleceñ na dokonywanie w niej modyfikacji, których wykonanie
rêczne wymaga³oby dokonania setek przeliczeñ i zmian ró¿nego rodzaju indeksów.
Rewolucyjnym pomys³em by³o tak¿e wprowadzenie szablonów, które pozwala³y na
szybkie i proste dodawanie zestawu parametrów na podstawie stworzonego
wcze¶niej opisu dla konkretnego sterownika.
</para>

<para>
Program parconf nie jest niestety pozbawiony wad. Dodanie nowego pliku
konfiguracyjnego (dla nowego programu) wymaga³oby dodania obs³ugi tego pliku do
parconfa. Uci±¿liwe okaza³y siê istniej±ce w programie b³êdy (które objawiaj±
siê tylko w niektórych przypadkach), skutecznie uniemo¿liwiaj±ce poprawne
wygenerowanie niektórych konfiguracji. Dodatkowo, parconf jest napisany w
jêzyku skryptowym Tcl/Tk. Efektem jest nie tylko powolne dzia³anie, ale, w 
po³±czeniu z do¶æ enigmatycznym stylem kodowania autora, powoduje, ¿e utrzymywanie
i dalsze rozwijanie programu sta³o siê bardzo trudne. 
</para>

<para>
Wszystkie te czynniki przes±dzi³y o rozpoczêciu prac nad nowym ujêciem problemu
konfiguracji systemu SZARP.
</para>

</section>

<section id="konc-zal">
<title>Za³o¿enia</title>

<para>
Robocza nazwa, jaka pojawi³a siê przy planowaniu nowego systemu konfiguracji
SZARP'a to <emphasis>Idealny Plik Konfiguracyjny</emphasis>, st±d skrót
<emphasis>IPK</emphasis>. Przy projektowaniu IPK przyjêto nastêpuj±ce
wymagania:

<itemizedlist>

<listitem><para>
Nowy format musi byæ ³atwy do edycji rêcznej (za pomoc± edytora tekstowego).
</para></listitem>

<listitem><para>
Wprowadzanie wiêkszo¶ci zmian powinno byæ lokalne (nie powodowaæ konieczno¶ci
zmian w innych miejscach).
</para></listitem>

<listitem><para>
Musi byæ zachowana kompatybilno¶æ wstecz, w szczególno¶ci ze wzglêdu na nak³ad
pracy nie jest mo¿liwe dostosowywanie do nowego formatu istniej±cych programów.
</para></listitem>

<listitem><para>
Powinien istnieæ mechanizm typu szablony parconfa, u³atwiaj±cy tworzenie
konfiguracji z gotowych elementów.
</para></listitem>

<listitem><para>
Dodawanie nowych elementów (funkcjonalno¶ci, programów) powinno byæ proste i
nie mieæ wp³ywu na elementy ju¿ istniej±ce.
</para></listitem>

</itemizedlist>

Przyjête rozwi±zanie polega na tworzeniu jednego pliku, obejmuj±cego ca³o¶æ
informacji zawartych w nastêpuj±cych plikach konfiguracyjnych SZARP 2.1:

<itemizedlist>

<listitem><para>
<filename>parcook.cfg</filename>
</para></listitem>

<listitem><para>
<filename>line*.cfg</filename>
</para></listitem>

<listitem><para>
<filename>PTT.act</filename>
</para></listitem>

<listitem><para>
<filename>definable.cfg</filename>
</para></listitem>

<listitem><para>
<filename>sender.cfg</filename>
</para></listitem>

<listitem><para>
<filename>ekrn*.cor</filename>
</para></listitem>

<listitem><para>
<filename>*.rap</filename>
</para></listitem>

</itemizedlist>

Plik jest dokumentem XML o sk³adni opisanej w rozdziale <xref linkend="form">.
Centralnym pojêciem jest parametr, czyli obiekt o pewnych w³a¶ciwo¶ciach,
takich jak nazwa, precyzja itp., który mo¿e byæ prezentowany na wykresach i
raportach oraz odpowiada mu warto¶æ liczbowa uzyskiwana b±d¼ ze sterownika, b±d¼ na
podstawie wyliczeñ (byæ mo¿e wykorzystuj±cych inne parametry).
</para>

<para>
Identyfikatorem parametru jest tylko i wy³±cznie jego pe³na nazwa (np.
<emphasis>Kocio³ 1:Sterownik:temperatura zadana</emphasis>), która w zwi±zku z
tym <emphasis>musi byæ unikalna w ramach danej konfiguracji</emphasis>.
</para>

<para>
Informacje o wykresach, raportach, formu³ach itp. s± przypisane do danego
parametru, tzn. je¶li parametr wystêpuje w jakim¶ raporcie, to informacja o tym
znajduje siê przy opisie parametru. Dziêki temu w jednym miejscu mamy
zgrupowane wszystkie informacje dotycz±ce parametru. Oznacza to tak¿e, ¿e je¶li
chcemy np. zmieniæ nazwê raportu, to nale¿y tego dokonaæ dla wszystkich
wystêpuj±cych w nim parametrów. Zwykle nie powinno to stanowiæ jednak wiêkszego
problemu, np. mo¿na wykorzystaæ mechanizm typu "znajd¼ i zast±p" edytora
tekstowego.
</para>

<para>
Zaprojektowany format jest do¶æ odporny na b³êdy. B³êdy typu sk³adniowego
oczywi¶cie ³atwo jest usun±æ, natomiast trudno jest pope³niæ b³±d innego
rodzaju, gdy¿ uniemo¿liwia to struktura samego pliku. Jedyn± rzecz± nie ujêt± w
strukturze jest sprawa indeksów w bazie, która wymaga pewnej uwagi edytuj±cego
konfiguracjê.
</para>

<para>
Wad± u¿ycia XML-a i zgrupowania wszystkich informacji w jednym dokumencie jest
du¿a objêto¶æ pliku konfiguracyjnego i w zwi±zku z tym mo¿liwe trudno¶ci w
wyszukiwaniu danego fragmentu. Zaleca siê w zwi±zku z tym korzystanie z
mechanizmów wyszukiwania u¿ywanego edytora. Zalet± jest natomiast ³atwa
rozszerzalno¶æ (dodawanie elementów i atrybutów nie wp³ywa na dzia³anie
dotychczasowych aplikacji) a tak¿e mo¿liwo¶æ korzystania z ró¿nego rodzaju
narzêdzi (edytorów, przegl±darek) do XML-a i ³atwa konwersja na inne formaty.
W szczególno¶ci wiele operacji na konfiguracji mo¿e byæ wykonanych z
wykorzystaniem szablonów XSLT. Szczegó³y znajduj± siê w rozdziale 
<xref linkend="konf">. Poza tym parsery XML s± dostêpne w praktycznie
wszystkich obecnie u¿ywanych jêzykach programowania.
</para>

<para>
Zachowanie zgodno¶ci wstecz osi±gniêto przez stworzenie narzêdzi,
umo¿liwiaj±cych obustronn± konwersjê konfiguracji ze starego na nowy format i
odwrotnie. Dziêki temu mo¿na dokonywaæ zmian w konfiguracji korzystaj±c z IPK,
a nastêpnie wygenerowaæ konfiguracjê w starym formacie, u¿ywanym przez programy
nie korzystaj±ce z IPK. Nale¿y zaznaczyæ, ¿e dla niektórych konfiguracji
automatyczna konwersja na IPK nie jest mo¿liwa, wymaga to nieco pracy ze strony
edytuj±cego konfiguracjê.
</para>

<para>
Korzystanie przez programy bezpo¶rednio z dokumentu XML mog³oby byæ czasami
uci±¿liwe. St±d czê¶ci± projektu jest biblioteka, pozwalaj±ca odczytywaæ i
edytowaæ informacje o konfiguracji. Biblioteka potrafi te¿ odczytaæ
konfiguracjê w starym (tradycyjnym) formacie, choæ z biegiem czasu bêd± siê
pojawiaæ informacje, które w starym formacie nie bêd± mog³y byæ zapisane (np.
obs³uga nowego formatu bazy z indeksami automatycznymi).
</para>

</section>

</section>

<section id="form">
<title>Format pliku IPK</title>

<para>
Plik konfiguracyjny IPK jest pojedynczym dokumentem XML 1.0, zgodnym ze 
schematem RelaxNG
umieszczonym w pliku <filename>resources/dtd/ipk-params.rng</filename>
(lokalizacja pliku wzglêdem g³ównego katalogu SZARP), u¿ywaj±cym przestrzeni
nazw o identyfikatorze
<emphasis>http://www.praterm.com.pl/SZARP/ipk</emphasis>.
Wiêcej informacji mo¿na znale¼æ:

<itemizedlist>

<listitem><para>
<ulink url="http://www.w3.org/XML">www.w3.org/XML</ulink> - specyfikacja XML 1.0 i DTD
</para></listitem>

<listitem><para>
<ulink url="http://www.w3.org/TR/REC-xml-names">www.w3.org/TR/REC-xml-names</ulink> 
 - specyfikacja XML Namespaces
</para></listitem>

<listitem><para>
<ulink url="http://www.relaxng.org">www.relaxng.org</ulink> - specyfikacja
RelaxNG
</para></listitem>

</itemizedlist>

</para>

<para>
Wspomniany schemat RelaxNG zawiera szczegó³owy opis sk³adni IPK, w tym poszczególnych
elementów i atrybutów, ich dopuszczalnych warto¶ci. Plik ten jest ¼ród³em
informacji nadrzêdnym w stosunku do tej dokumentacji i odzwierciedla stan 
aktualny, który mo¿e byæ ró¿ny od opisanego w tej dokumentacji w przypadku
opó¼nieñ w uzupe³nianiu dokumentacji.
</para>


<section id="form-struktura">
<title>Struktura pliku</title>

<para>
Struktura pliku odpowiada fizycznej strukturze systemu, w szczególno¶ci zawiera
dane o parametrach w takiej kolejno¶ci, w jakiej przychodz± one ze sterowników
(wynika to w³a¶ciwie ze sposobu dzia³ania programu parcook). Dane z
poszczególnych sterowników s± pogrupowane. Oddzielnie zgrupowane s± parametry
definiowalne przegl±daj±cego oraz parametry definiowalne parcooka, które nie s±
redefinicjami istniej±cych fizycznie parametrów. Ogólna struktura wygl±da wiêc
nastêpuj±co:
<programlisting>
&lt;params&gt;
    &lt;device&gt;
       Opis parametrów ze sterownika 1
       ...
    &lt;/device&gt;
    &lt;device&gt;
       Opis parametrów ze sterownika 2
       ...
    &lt;/device&gt;
    ....
    &lt;defined&gt;
    	Opis parametrów definiowalnych (parcooka)
	...
    &lt;/defined&gt;
    &lt;drawdefinable&gt;
    	Opis parametrów definiowalnych (przegl±daj±cego)
	...
    &lt;/drawdefinable&gt;
    &lt;boilers&gt;
    	Opis konfiguracji kot³ów dla programu analiza
	...
    &lt;/boilers&gt;
&lt;/params&gt;
</programlisting>

</para>

<para>
Na pocz±tku pliku znajduje siê deklaracja XML, mo¿e ona tak¿e zawieraæ
informacjê o kodowaniu. Nazwy, atrybuty i zawarto¶ci elementów, a tak¿e
ewentualne komentarze musz± byæ zapisane w podanym kodowaniu. Je¶li kodowanie
nie jest podane, przyjmuje siê Unicode (UTF-8 lub UTF-16).
W dowolnym miejscu w pliku mog± znajdowaæ siê XML-owe komentarze.
</para>

</section> <!-- form-struktura -->

<section id="form-el-params">
<title>Element params</title>

<para>
Nadrzêdnym elementem jest element <emphasis>params</emphasis>. Zawiera on
informacjê o wersji IPK (aktualnie 1.0), tytu³ konfiguracji i okresy (w
sekundach), co ile odbywa siê odpytywanie sterowników o dane (przez 
demony linii) i wysy³anie danych przez program sender. Tytu³ konfiguracji
bêdzie widoczny
jako tytu³ okna programu przegl±daj±cego. Do prawid³owego dzia³ania szablonów
XSLT powinna byæ tak¿e obecna deklaracja przestrzeni nazw (atrybut
<emphasis>xmlns</emphasis>).
</para>

<para>
Przyk³adowy pocz±tek pliku mo¿e wygl±daæ tak:
<programlisting>
&lt;?xml version="1.0" encoding="ISO-8859-2"?&gt;
&lt;!--
  To jest konfiguracja dla Katowic.
   --&gt;
&lt;params xmlns="http://www.praterm.com.pl/SZARP/ipk" version="1.0"
        read_freq="10" send_freq="10" title="ZEC Katowice Wydzia³ V"&gt;
       
</programlisting>
</para>

</section> <!-- form-el-params -->


<section id="form-el-device">
<title>Element device</title>

<para>
W elemencie <emphasis>params</emphasis> umieszcza siê elementy
<emphasis>device</emphasis>. Opisuj± one pojedyncz± liniê komunikacyjn±,
obs³ugiwan± przez konkretnego demona linii. Zawieraj± informacje z
pliku <filename>parcook.cfg</filename>,takie jak ¶cie¿ka do urz±dzenia i
demona linii, prêdko¶æ transmisji, ilo¶æ bitów stopu. 
Mo¿liwe s± nastêpuj±ce atrybuty:
<itemizedlist>

<listitem><para>
<emphasis>daemon</emphasis> - ¶cie¿ka do demona linii odpowiedzialnego za
obs³ugê danej linii. Parametr jest przekazywany do programu parcook, wiêc je¶li
nie jest obecny, zostanie u¿yta warto¶æ domy¶lna wybrana przez ten program.
</para></listitem>

<listitem><para>
<emphasis>path</emphasis> - ¶cie¿ka do urz±dzenia (portu komunikacyjnego), 
na którym ma dzia³aæ demon linii. Je¶li nie zostanie podana, demon linii u¿yje
domy¶lnego portu (zale¿nie od numeru linii, czyli kolejno¶ci, w jakiej dany
element device wyst±pi³ w pliku konfiguracyjnym).
</para></listitem>

<listitem><para>
<emphasis>speed</emphasis> - prêdko¶æ komunikacji w bodach, domy¶ln± warto¶æ
ustala demon linii.
</para></listitem>

<listitem><para>
<emphasis>stop</emphasis> - ilo¶æ bitów stopu, parametr dla demona linii,
mo¿liwe warto¶ci to 1 lub 2.
</para></listitem>

<listitem><para>
<emphasis>protocol</emphasis> - wersja protoko³u, parametr przyjmowany 
na przyk³ad przez demona rsdmn, liczba ca³kowita, zwykle 0 lub 1.
</para></listitem>

<listitem><para>
<emphasis>special</emphasis> - dla niektórych demonów w pierwszej linii pliku
<filename>lineX.cfg</filename> nale¿a³o podawaæ specjaln± warto¶æ, nie bêd±c±
licznikiem jednostek (a wiêc w³a¶ciwie tylko 0). Atrybut ten przechowuje t±
warto¶æ.
</para></listitem>

<listitem><para>
<emphasis>options</emphasis> - dodatkowe opcje do demona linii, dodawane na
koñcu linii w pliku <filename>parcook.cfg</filename>. Opcje te nie s±
interpretowane, mo¿e byæ tu podany dowolny napis, który zostanie przekopiowany
do tego pliku. S± przydatne dla demonów linii, które wymagaj± dodatkowych,
niestandardowych parametrów. <emphasis>Uwaga! Opcje powinny zaczynaæ siê od
znaku '-' (minus). Ka¿dy napis zaczynaj±cy siê od minusa, wystêpuj±cy w pliku
parcook.cfg, bêdzie interpretowany jako opcje przez program
szarp2ipk.</emphasis>
</para></listitem>

</itemizedlist>

Przyk³adowy element <emphasis>device</emphasis> zwykle wygl±da wiêc tak:
<programlisting>
    &lt;device daemon="/opt/szarp/bin/linedmn" path="/dev/ttyA12"&gt;
</programlisting>

W bardziej skomplikowanych przypadkach mo¿e to byæ np.:
<programlisting>
    &lt;device daemon="/opt/szarp/bin/rsdmn" path="/dev/ttyA12"
        speed="4800" stop="1" special="0"&gt;
</programlisting>
</para>

</section> <!-- form-el-device -->

<section id="form-el-unit">
<title>Elementy radio i unit</title>

<para>
W ramach jednej linii mo¿e wystêpowaæ kilka (co najmniej jedna) 
tzw. jednostek komunikacji. Ka¿da 
z tych jednostek ma odpowiadaj±cy sobie element <emphasis>unit</emphasis>.
Struktura elementu <emphasis>device</emphasis> wygl±da w takim przypadku 
nastêpuj±co:
<programlisting>
    &lt;device &gt;
       &lt;unit&gt;
           Lista parametrów jednostki 1
           ...
        &lt;/unit&gt;
        &lt;unit&gt;
           Lista parametrów jednostki 2
           ...
        &lt;/unit&gt;
        ...
    &lt;/device&gt;
</programlisting>
Je¿eli mamy do czynienia z komunikacj± radiow±, dochodzi nam jeszcze jeden
element, po¶redni miêdzy <emphasis>device</emphasis> a
<emphasis>unit</emphasis> - identyfikator linii radiowej (modemu radiowego),
czyli element <emphasis>radio</emphasis>. Wtedy struktura elementu
<emphasis>device</emphasis> przedstawia siê nastêpuj±co:
<programlisting>
    &lt;device &gt;
        &lt;radio&gt;
           &lt;unit&gt;
               Lista parametrów jednostki 1 modemu 1
               ...
            &lt;/unit&gt;
            &lt;unit&gt;
               Lista parametrów jednostki 2 modemu 1
               ...
            &lt;/unit&gt;
            ...
        &lt;/radio&gt;
        &lt;radio&gt;
	    ...
        &lt;/radio&gt;
	...
    &lt;/device&gt;
</programlisting>
</para>

<para>
Element <emphasis>radio</emphasis> ma tylko jeden atrybut
<emphasis>id</emphasis> - tekstowy identyfikator linii radiowej. Przyk³adowa
deklaracja:
<programlisting>
        &lt;radio id="Wolek"&gt;
	    ...
        &lt;/radio&gt;
</programlisting>
</para>

<para>
Element <emphasis>unit</emphasis> zawiera listê wchodz±cych w sk³ad danej
jednostki parametrów, najpierw odczytywanych ze sterownika (elementy
<emphasis>param</emphasis>) a nastêpnie (opcjonalnie) wysy³anych do sterownika
(elementy <emphasis>send</emphasis>). 
W³a¶ciwo¶ci konkretnej jednostki komunikacyjnej
opisuje kilka atrybutów (wszystkie s± wymagane):
<itemizedlist>

<listitem><para>
<emphasis>id</emphasis> - identyfikator jednostki, w postaci jednego znaku
ASCII, nie mo¿e siê powtarzaæ w ramach linii komunikacyjnej.
</para></listitem>

<listitem><para>
<emphasis>type</emphasis> - typ raportu, warto¶æ interpretowana przez sterownik
(liczba, najczê¶ciej 1).
</para></listitem>

<listitem><para>
<emphasis>subtype</emphasis> - podtyp raportu, warto¶æ interpretowana przez sterownik
(liczba, najczê¶ciej 1).

</para></listitem>

<listitem><para>
<emphasis>bufsize</emphasis> - wielko¶æ bufora u¶redniania dla parametrów w bajtach (liczba).
</para></listitem>

</itemizedlist>
Przyk³ad deklaracji elementu <emphasis>unit</emphasis>:
<programlisting>
        &lt;unit id="5" type="1" subtype="2" bufsize="3"&gt;
	    ...
        &lt;/unit&gt;
</programlisting>
</para>

</section> <!-- form-el-unit -->


<section id="form-el-send">
<title>Element send</title>

<para>
Wchodz±ce w sk³ad jednostki elementy <emphasis>send</emphasis> opisuj± elementy
wysy³ane do sterownika przez program sender (w SZARP 2.1 opis tych elementów
znajdowa³ siê w pliku <filename>sender.cfg</filename>). Elementy
<emphasis>send</emphasis> nie posiadaj± ¿adnych identyfikatorów, s±
rozpoznawane na podstawie kolejno¶ci wyst±pienia wewn±trz danej jednostki
komunikacyjnej (elementu <emphasis>unit</emphasis>). Elementy
<emphasis>send</emphasis> posiadaj± nastêpuj±ce atrybuty:
<itemizedlist>

<listitem><para>
Jeden z atrybutów <emphasis>param</emphasis> albo <emphasis>value</emphasis>
(wymagany jest jeden z nich). <emphasis>param</emphasis> opisuje nazwê 
parametru (zwykle definiowalnego),
którego warto¶æ ma zostaæ wys³ana do sterownika. Musi istnieæ parametr o takiej
nazwie (a wiêc element <emphasis>param</emphasis> z atrybutem
<emphasis>name</emphasis> o takiej zawarto¶ci). Zamiast
<emphasis>param</emphasis> mo¿e wyst±piæ atrybut <emphasis>value</emphasis>,
którego warto¶ci± jest liczba (sta³a) wysy³ana do sterownika.
</para></listitem>

<listitem><para>
<emphasis>type</emphasis> - rodzaj wysy³anej próbki, jeden z "probe", "min",
"min10", "hour", "day" (odpowiednio: próbka, ¶rednia minutowa, 10-minutowa,
godzinna, dzienna). Domy¶lnie przyjmuje siê "probe". Przy wysy³aniu sta³ej
warto¶æ tego atrybutu nie ma znaczenia.
</para></listitem>

<listitem><para>
<emphasis>repeat</emphasis> - liczba, ilo¶æ powtórzeñ, je¶li sterownik nie
potwierdzi³ przyjêcia parametru, domy¶lnie 1. Praktycznie warto¶æ tego
atrybutu nie ma ¿adnego znaczenia (zobacz <xref linkend="sender-config">).
</para></listitem>

<listitem><para>
<emphasis>send_no_data</emphasis> - je¶li atrybut jest obecny (niezale¿nie od 
warto¶ci), to sender bêdzie wysy³a³ do sterownika warto¶æ NO_DATA. Je¶li go nie
ma, to w przypadku je¶li mia³by wysy³aæ tak± warto¶æ, nic nie bêdzie wys³ane.
</para></listitem>

</itemizedlist>
Przyk³ad:
<programlisting>
<![CDATA[
        <send param="Wiatromierz:LB-746:prêdko¶æ wiatru" type="hour"
            repeat="1" send_no_data="1"/>
]]>
</programlisting>

Czasami zdarza siê, ¿e konfiguracja jednostki zawiera pewn± ilo¶æ parametrów
zadawanych, tymczasem nie s± one skonfigurowane (a wiêc program sender nie
bêdzie ich wysy³a³). W takim przypadku w pliku IPK powinien pojawiæ siê element
<emphasis>send</emphasis> pusty, tak¿e bez ¿adnych atrybutów. Jest to istotne
zw³aszcza w sytuacji, gdy po parametrach nieskonfigurowanych ma nast±piæ jaki¶
skonfigurowany.

</para>
</section> <!-- form-el-send -->


<section id="form-el-param">
<title>Element param</title>

<para>
Najwa¿niejsz± czê¶ci± elementu <emphasis>unit</emphasis> s± 
elementy <emphasis>param</emphasis>, opisuj±ce parametry odczytywane ze
sterownika. Identyfikatorem parametru jest nazwa, unikalna w obrêbie ca³ej
konfiguracji. To, jakiemu fizycznemu parametrowi odpowiada dany opis, jest
ustalane na podstawie kolejno¶ci parametrów w jednostce komunikacyjnej -
kolejno¶æ opisów musi odzwierciedlaæ kolejno¶æ parametrów ze sterownika.
Mo¿liwe atrybuty to:
<itemizedlist>

<listitem><para>
<emphasis>name</emphasis> - unikalny identyfikator parametru, powinien mieæ
postaæ 3 pól tekstowych oddzielonych dwukropkami, np.: 
"Kocio³ 1:Sterownik:temperatura zadana".
</para></listitem>

<listitem><para>
<emphasis>short_name</emphasis> - wymagany, skrócona nazwa parametru, np.
"Tza". Dobrze ¿eby by³a unikalna przynajmniej w ramach jednostki komunikacyjnej
(choæ samo IPK ¿adnych takich wymagañ nie nak³ada). D³ugo¶æ skróconej nazwy
powinna wynosiæ od 1 do 4 znaków.
</para></listitem>

<listitem><para>
<emphasis>draw_name</emphasis> - nazwa u¿ywana jako nazwa wykresu parametru w
programie przegl±daj±cym, np. "Temperatura zadana". Dobrze je¶li nie jest
d³u¿sza ni¿ 20 znaków. Je¶li nie jest podana, u¿yta bêdzie nazwa pe³na.
</para></listitem>

<listitem><para>
<emphasis>unit</emphasis> - nazwa jednostki w jakiej prezentowany jest parametr,
np. "°C". Je¶li nie jest podana, oznacza to brak jednostki, czyli "-".
</para></listitem>

<listitem><para>
<emphasis>base_ind</emphasis> - indeks parametru w bazie. Dla bazy w formacie
SZARP 2.1 jest to liczba, równa numerowi linii w pliku PTT.act pomniejszonemu o
2 (a wiêc indeks pierwszego parametru to 0). Dla nowego formatu bazy SzarpBase
mo¿e to byæ napis <emphasis>auto</emphasis>, oznaczaj±cy indeks automatyczny
(nowa baza nie wymaga indeksów, pos³uguje siê nazwami parametrów).
Je¶li atrybut nie wystêpuje, oznacza to ¿e parametr nie jest zapisywany do bazy.
</para><para>
<emphasis>Uwaga! Warto¶æ atrybutu "auto" nie jest obs³ugiwana przez stary
format konfiguracji. Mo¿liwe jest wygenerowanie konfiguracji w formacie 
SZARP 2.1,
ale nie wolno na podstawie tak wygenerowanej konfiguracji ponownie tworzyæ pliku 
IPK, gdy¿ mo¿e spowodowaæ to utratê informacji i wygenerowanie b³êdnej
konfiguracji.</emphasis> Nie powinno siê tak¿e mieszaæ w jednym pliku indeksów
automatycznych i tradycyjnych, gdy¿ wygenerowana z takiego pliku konfiguracja 
w formacie SZARP 2.1 nie bêdzie poprawnie obs³ugiwana np. przez program
przegl±daj±cy.
</para></listitem>

<listitem><para>
<emphasis>prec</emphasis> - ilo¶æ miejsc po przecinku. Parametry liczbowe
przechowywane s± w bazie (i w pamiêci dzielonej) w postaci liczby
sta³oprzecinkowej - ten atrybut okre¶la ilo¶æ miejsc po przecinku w
reprezentacji parametru. Je¿eli mamy warto¶æ w bazie 118 i precyzjê 0, oznacza
to, ¿e rzeczywista warto¶æ jest równa 118, dla precyzji 1 - 11.8, a dla
precyzji 3 - 0.118. Dla parametrów o warto¶ciach dyskretnych (np. "Tak" /
"Nie") opis odpowiednich warto¶ci zawiera element <emphasis>value</emphasis>
</para></listitem>

</itemizedlist>
</para>
<para>
Opis parametru uzupe³niaj± elementy wchodz±ce w sk³ad elementu
<emphasis>param</emphasis>. S± to elementy <emphasis>value</emphasis>,
<emphasis>define</emphasis>, <emphasis>raport</emphasis>,
<emphasis>draw</emphasis> i <emphasis>analysis</emphasis>(wystêpuj± w³a¶nie w tej kolejno¶ci).

</para>
</section> <!-- form-el-param -->


<section id="form-el-value">
<title>Element value</title>

<para>
Wspomniane ju¿ elementy <emphasis>value</emphasis>
opisuj± mo¿liwe warto¶ci parametrów dla parametrów dyskretnych. Je¿eli np.
parametr mo¿e przyjmowaæ warto¶ci "Tak" i "Nie", którym w bazie odpowiadaj±
warto¶ci 1 i 0, to element <emphasis>param</emphasis> bêdzie zawiera³ dwa
elementy <emphasis>value</emphasis> wygl±daj±ce tak:
<programlisting>
        &lt;value int="0" name="Nie"/&gt;
        &lt;value int="1" name="Tak"/&gt;
</programlisting>
Przyk³ad pokazuje dwa mo¿liwe (i wymagane) atrybuty elementu
<emphasis>value</emphasis>:
<itemizedlist>

<listitem><para>
<emphasis>int</emphasis> - warto¶æ liczbowa parametru (w bazie lub pamiêci
dzielonej).
</para></listitem>

<listitem><para>
<emphasis>name</emphasis> - tekstowa reprezentacja warto¶ci (np. w raportach).
</para></listitem>

</itemizedlist>
</para>

</section> <!-- form-el-value-->


<section id="form-el-define">
<title>Element define</title>

<para>
W sk³ad opisu parametru mo¿e te¿ wchodziæ element <emphasis>define</emphasis>.
Jego obecno¶æ oznacza, ¿e warto¶æ parametru ma byæ wyliczana na podstawie
podanej formu³y. Je¿eli parametr, w którym element <emphasis>define</emphasis>
wyst±pi³, wystêpuje w elemencie <emphasis>defined</emphasis> (lista parametrów
definiowalnych parcooka) lub <emphasis>drawdefinable</emphasis> (parametry
definiowalne przegl±daj±cego), to warto¶æ parametru jest po prostu wyliczana na
podstawie podanej formu³y. Je¿eli za¶ parametr jest "normalnym" parametrem ze
sterownika (wystêpuje w elemencie <emphasis>unit</emphasis>), to obecno¶æ
formu³y oznacza, ¿e parametr jest niejako przedefiniowany - w bazie i na
wykresach bêdzie obecna jego warto¶æ wyliczona na podstawie formu³y, zamiast
tej otrzymanej ze sterownika. Konstrukcja taka jest u¿ywana najczê¶ciej do
wprowadzania ró¿nego rodzaju poprawek do warto¶ci parametrów.
</para>
<para>
Element <emphasis>define</emphasis> ma nastêpuj±ce atrybuty:
<itemizedlist>

<listitem><para>
<emphasis>type</emphasis> - typ formu³y opisuj±cej warto¶æ parametru. Mo¿liwe
warto¶ci to "RPN", "DRAWDEFINABLE" i "LUA". Pierwsza warto¶æ jest przyjmowana
domy¶lnie, oznacza ona parametr definiowalny wyliczany przez program parcook,
formu³a jest w odwrotnej notacji polskiej (ONP, RPN - reverse polish notation).
Druga warto¶æ oznacza parametr wyliczany przez program przegl±daj±cy. 
Formu³a jest tak¿e w
ONP, ale nieco inny jest zestaw operatorów. Taki typ parametru mo¿e wyst±piæ
tylko w elemencie <emphasis>drawdefinable</emphasis>.
Trzecia warto¶æ oznacza parametr zapisany w postaci skryptu jêzyka LUA. Parametry w LUA 
mog± byæ wyliczane zarówno przez program parcook, jak i przez program przegl±daj±cy.
</para></listitem>

<listitem><para>
<emphasis>formula</emphasis> - formu³a opisuj±ca sposób wyliczania warto¶ci 
parametru. Jej dok³adna postaæ zale¿y od atrybutu
<emphasis>type</emphasis> (patrz <xref linkend="define">). 
</para></listitem>

</itemizedlist>

Opcjonalnie w przypadku formu³ LUA zamiast atrybutu <emphasis>formula</emphasis> 
formu³a mo¿e byæ zapisana po prostu jako tekstowa zawarto¶æ elementu <emphasis>define</emphasis>.
Jest to wygodne zw³aszcza dla bardziej skomplikowanych formu³, bêd±cych po prostu
skryptami w jêzyku LUA.
</para>

</section> <!-- form-el-define -->

<section id="form-el-raport">
<title>Element raport</title>

<para>
Kolejnym elementem mog±cym wyst±piæ wewn±trz elementów
<emphasis>param</emphasis> jest element <emphasis>raport</emphasis>. Jego
obecno¶æ oznacza, ¿e opisywany parametr ma wyst±piæ w raporcie o podanej
nazwie. Je¿eli parametr ma wyst±piæ w kilku raportach, nale¿y umie¶ciæ kilka
elementów <emphasis>raport</emphasis>. Mo¿liwe atrybuty to:
<itemizedlist>

<listitem><para>
<emphasis>title</emphasis> - tytu³ raportu, warto¶æ tekstowa, wymagany.
</para></listitem>

<listitem><para>
<emphasis>description</emphasis> - opis parametru w raporcie, je¿eli nie
wystêpuje, to jako opis u¿yta bêdzie ostatnia czê¶æ nazwy parametru (po
drugim dwukropku).
</para></listitem>

<listitem><para>
<emphasis>filename</emphasis> - nazwa pliku z opisem raportu w formacie SZARP
2.1. Jest u¿ywana, aby odtworzyæ konfiguracjê z takimi samymi nazwami plików
jak oryginalnie. W nowych konfiguracjach atrybut nie powinien byæ u¿ywany -
przyjmowana jest wtedy warto¶æ domy¶lna, równa warto¶ci parametru
<emphasis>title</emphasis>.
</para></listitem>

<listitem><para>
<emphasis>order</emphasis> - liczba rzeczywista, pozwala na kontrolê kolejno¶ci
wystêpowania parametrów w raportach. Jest to priorytet z jakim parametr 
ma wystêpowaæ w raporcie, im mniejszy tym wy¿ej (wcze¶niej) w raporcie wyst±pi 
parametr. Brak priorytetu lub warto¶æ mniejsza ni¿ 0 oznacza, ¿e parametr ma
wystêpowaæ po tych z dodatnim atrybutem. Parametry o tych samych atrybutach
wystêpuj± w kolejno¶ci jak w pliku IPK (czyli wed³ug indeksów IPC). 
Dotyczy to tak¿e w szczególno¶ci parametrów bez atrybutu.
</para></listitem>

</itemizedlist>
Przyk³ad:
<programlisting>
<![CDATA[
        <raport title="Kocio³ WR 5" description="temperatura zadana"
		filename="Kocio³_WR_5.rap" order="1"/>
]]>
</programlisting>
Wszystkie elementy <emphasis>raport</emphasis> z danym tytu³em tworz± opis
jednego raportu.
</para>

</section> <!-- form-el-raport -->


<section id="form-el-draw">
<title>Element draw</title>

<para>
Element <emphasis>draw</emphasis> opisuje wykres, na którym ma byæ widoczna warto¶æ
parametru w programie przegl±daj±cym. Podobnie jak w przypadku raportów, mo¿na
umie¶ciæ kilka takich elementów, umieszczaj±c w ten sposób parametr na kilku
wykresach. Element <emphasis>draw</emphasis> ma nastêpuj±ce atrybuty:
<itemizedlist>

<listitem><para>
<emphasis>title</emphasis> - tytu³ wykresu (okna z wykresami), wymagany.
Wykresy o tym samym tytule tworz± opis okna programu przegl±daj±cego.
</para></listitem>

<listitem><para>
<emphasis>max</emphasis> - liczba rzeczywista - maksymalna warto¶æ parametru,
okre¶laj±ca górny zakres osi na wykresie parametru. Jest to warto¶æ w takiej
postaci, w jakiej bêdzie widziana na wykresie, a wiêc po wszelkich
przeskalowaniach. Obecno¶æ tego atrybutu jest wymagana przez program
przegl±daj±cy Szarp Draw 2.1.
</para></listitem>

<listitem><para>
<emphasis>min</emphasis> - podobnie jak wy¿ej, tylko dolna granica zakresu
warto¶ci dla parametru. Uwaga -
w IPK nie ma pojêcia "osi" (axis) wystêpuj±cego w plikach konfiguracyjnych
eknrXXXX.cor. Osie s± tworzone automatycznie na podstawie atrybutów min i max.

</para></listitem>

<listitem><para>
<emphasis>scale</emphasis> - atrybut potrzebny do skalowania czê¶ci wykresu.
Program przegl±daj±cy pozwala przeskalowaæ czê¶æ wykresu, tak ¿eby pewien
zakres warto¶ci zajmowa³ inn± czê¶æ osi, ni¿ bez przeskalowania. Granice
przedzia³u skalowania okre¶laj± dwa nastêpne atrybuty, za¶ ten atrybut jest
liczb± ca³kowit±, mówi±c± o tym, ile procent osi powinien zajmowaæ podany
przedzia³ warto¶ci. Je¿eli atrybut jest nieobecny lub ma warto¶æ 0,
przeskalowanie nie jest dokonywane.
</para></listitem>

<listitem><para>
<emphasis>minscale</emphasis> - liczba rzeczywista - dolny zakres warto¶ci
podlegaj±cych przeskalowaniu - patrz wy¿ej.
</para></listitem>

<listitem><para>
<emphasis>maxscale</emphasis> - jak wy¿ej, tylko górny zakres warto¶ci.
</para></listitem>

<listitem><para>
<emphasis>color</emphasis> - kolor wykresu, teoretycznie w jednej ze
standardowych postaci (a wiêc nazwa symboliczna, zapis szesnastkowy warto¶ci
RGB itp.). Dla programu SzarpDraw 2.1 jest wymagany, co wiêcej powinien mieæ
jedn± z warto¶ci: black, red, #FFC246, cyan, green, yellow, #B9F4BE, blue, 
magenta, #00B6FF, #A6A550, #FF825F, #AFAFFF (odpowiedniki kolorów 1 - 12 z
pliku <filename>ekrnXXXX.cor</filename>). Je¶li nie zostanie podany, przy
generacji pliku ekrnXXXX.cor kolory zostan± dobrane automatycznie.
</para></listitem>

<listitem><para>
<emphasis>prior</emphasis> - priorytet wykresu - liczba rzeczywista dodatnia. W 
formacie konfiguracji SZARP 2.1 kolejno¶æ okien z wykresami by³a ustalana przez
kolejno¶æ wpisów w pliku <filename>ekrnXXXX.cor</filename>. Aby umo¿liwiæ
zachowanie tej kolejno¶ci, mo¿na podaæ priorytet - im mniejszy, tym wy¿ej
bêdzie okno na li¶cie. Priorytet dotyczy okna (a nie wykresu), uwzglêdniany
jest najmniejszy priorytet spo¶ród wszystkich wykresów nale¿±cych do danego
okna. Poniewa¿ jest to liczba rzeczywista nie trzeba przeliczaæ innych
priorytetów przy przestawieniu jednego okna (zawsze da siê co¶ wcisn±æ). Zaleca
siê u¿ywanie tylko jednego atrybutu prior na okno (a wiêc tylko w jednym z
wykresów nale¿±cych do okna).
</para></listitem>

<listitem><para>
<emphasis>order</emphasis> - podobnie jak prior jest to liczba rzeczywista
dodatnia, ale dotyczy kolejno¶ci wykresu w oknie. Wykresy nie maj±ce tego
atrybutu bêd± umieszczane na koñcu okna.
</para></listitem>

<listitem><para>
<emphasis>special</emphasis> - atrybut specjalny dla program SzarpDraw 2.1,
warto¶æ tekstowa, jedna z: 
<itemizedlist>
<listitem><para>
"piedraw" - parametr jest liczony do wykresu ko³owego
</para></listitem>
<listitem><para>
"hoursum" - parametr jest liczony do sumowania godzinowego
</para></listitem>
<listitem><para>
"valve" - zawory, atrybut dla kompatybilno¶ci wstecz
</para></listitem>
<listitem><para>
"rel" - je¶li w oknie s± dwa wykresy, to w oknie dodatkowym pojawi siê 
wyliczenie stosunku warto¶ci parametrów z wykresów
</para></listitem>
<listitem><para>
"diff" - w oknie dodatkowym pojawia siê ró¿nica warto¶ci koñcowej i 
pocz±tkowej dla wykresu.
</para></listitem>
<listitem><para>
"none" - warto¶æ domy¶lna, brak specjalnych w³a¶ciwo¶ci.
</para></listitem>
</itemizedlist>
Dok³adne omówienie znaczenia tych atrybutów znajduje siê w pliku
<filename>resources/documentation/draw.ekran.README.html</filename> w
repozytorium SZARP.
</para></listitem>

</itemizedlist>
Przyk³adowy opis wykresu mo¿e wygl±daæ tak:
<programlisting>
<![CDATA[
        <draw title="Kocio³ WR 5 - temperatury" prior="81" color="cyan" min="0"
max="150" order="2"/>
]]>
</programlisting>
</para>

</section> <!-- form-el-draw -->

<section id="form-el-analysis">
<title>Element analysis</title>

<para>
Element <emphasis>analysis</emphasis> obecny w elemencie <emphasis>param</emphasis> oznacza,
¿e warto¶ci tego parametru stanowi± dane, na których operuje program analiza.
</para>

<para>
Element <emphasis>analysis</emphasis> zawiera dwa atrybuty:

<itemizedlist>

<listitem><para>
<emphasis>boiler_no</emphasis> - dodatnia liczba ca³kowita - numer kot³a
</para></listitem>

<listitem><para>
<emphasis>param_type</emphasis> - opisuje typ danych przechowywany przez parametr
</para></listitem>

</itemizedlist>

</para>

<para>
Atrybut <emphasis>param_type</emphasis> przyjmuje jedn± z nastêpuj±cych warto¶ci:

<itemizedlist>

<listitem><para>
<emphasis>analysis_enable</emphasis> - ustawione dwa najmniej znacz±ce bity warto¶ci parametru
oznaczaj±, ¿e regulator kot³a zezwala na wykonywanie analizy
</para></listitem>

<listitem><para>
<emphasis>regulator_work_time</emphasis> - warto¶æ parametru zawiera czas pracy regulatora kot³a
w pracy automatycznej
</para></listitem>

<listitem><para>
<emphasis>coal_volume</emphasis> - aktualna objêto¶æ wchodz±cego do kot³a wêgla
</para></listitem>

<listitem><para>
<emphasis>energy_coal_volume_ratio</emphasis> - aktualna objêto¶æ stosunku energia/objêto¶æ wêgla
</para></listitem>

<listitem><para>
<emphasis>air_stream</emphasis> - wzglêdna ilo¶æ powietrza dla okre¶lonej (zale¿nej od typu kot³a) objêto¶ci wêgla
</para></listitem>

<listitem><para>
<emphasis>max_air_stream</emphasis> - maksymalna dopuszczalna warto¶æ strumienia powietrza podczas analizy
</para></listitem>

<listitem><para>
<emphasis>min_air_stream</emphasis> - minimalna dopuszczalna warto¶æ strumienia powietrza podczas analizy
</para></listitem>

<listitem><para>
<emphasis>left_grate_speed</emphasis> - prêdko¶æ lewego rusztu
</para></listitem>

<listitem><para>
<emphasis>right_grate_speed</emphasis> - prêdko¶æ prawego rusztu
</para></listitem>

<listitem><para>
<emphasis>left_coal_gate_height</emphasis> - wysoko¶æ lewej warstwownicy
</para></listitem>

<listitem><para>
<emphasis>right_coal_gate_height</emphasis> - wysoko¶æ prawej warstwownicy
</para></listitem>

<listitem><para>
<emphasis>analysis_status</emphasis> - program umieszcza w parametrze warto¶æ 1 gdy analiza jest wykonywana,
0 w przeciwnym wypadku
</para></listitem>

<listitem><para>
<emphasis>air_stream_result</emphasis> - w tym parametrze analiza umieszcza wyliczon± warto¶æ strumienia powietrza
</para></listitem>

</itemizedlist>

</para>

</section>

<section id="form-ex-param">
<title>Przyk³ady elementów param</title>

<para>
Na zakoñczenie trzy przyk³ady opisów parametrów:
<programlisting>
<![CDATA[	
    <param name="Kocio³ WR 5:Sterownik:temperatura zadana" short_name="Tod"
            draw_name="Temp. zadana" unit="°C" prec="1" base_ind="0">
        <raport title="Kocio³ WR 5" description="temperatura zadana"
            filename="Kocio³_WR_5.rap"/>
        <raport title="RAPORT TESTOWY" description="Kocio³ WR 5
            Sterownik" filename="test.rap"/>
        <draw title="Kocio³ WR 5 - temperatury"
            prior="81" color="cyan" min="0" max="150"/>
    </param>
]]>
</programlisting>
<programlisting>
<![CDATA[
    <param name="Kocio³; WR 5:Sterownik:stosunek energia / masa"
            short_name="Km" draw_name="Stos. energia/masa" unit="MWh/t" prec="3"
            base_ind="39">
        <define type="RPN" 
	    formula="(*:*:stosunek energia /objêto¶æ) 1000 * (*:*:masa nasypowa wêgla) / "/>
        <raport title="Kocio³ WR 5"
	    description="stosunek energia / masa"
	    filename="Kocio³_WR_5.rap"/>
        <draw title="Waga WR 5 - sprawno¶æ" prior="91"
		  color="cyan" min="0" max="8"/>
    </param>
]]>
</programlisting>
<programlisting>
<![CDATA[
    <param base_ind="auto" name="Kocio³ 3:Sterownik:aktualna objêto¶æ wêgla" short_name="V" 
	draw_name="Obj. wêgla kot³a 3" unit="m3/h" prec="3">
        <raport title="Waga 3" filename="Waga_3.rap" order="6"/>
        <draw title="Waga 3 - dostarczony wêgiel" min="0" max="1.5" special="hoursum" order="2"/>
        <analysis boiler_no="3" param_type="coal_volume"/>
    </param>
]]>
</programlisting>

</para>
</section> <!-- form-ex-param -->


<section id="form-el-defined">
<title>Elementy defined i drawdefinable</title>

<para>
Poza opisanymi wcze¶niej elementami <emphasis>device</emphasis> w g³ównym elemencie
<emphasis>params</emphasis> mog± wystêpowaæ jeszcze elementy
<emphasis>defined</emphasis> i <emphasis>drawdefinable</emphasis>. Oba
zawieraj± elementy <emphasis>param</emphasis> - listê parametrów
definiowalnych. Ró¿nica polega na tym, ¿e w elemencie
<emphasis>defined</emphasis> mamy parametry definiowalne wyliczane przez
parcooka (a wiêc z typem formu³y "RPN"), a w elemencie
<emphasis>drawdefinable</emphasis> wyliczane przez program przegl±daj±cy, a
wiêc z typem formu³y "DRAWDEFINABLE", nie mog± te¿ one wchodziæ w sk³ad
raportów ani mieæ indeksu w bazie.
</para>
</section> <!-- form-el-defined -->

<section id="form-el-boilers">
<title>Elementy boilers oraz boiler</title>

<para>
W elemencie <emphasis>params</emphasis> mo¿e znajdowaæ siê element <emphasis>boilers</emphasis> 
zawieraj±cy konfiguracje kot³ów, których praca podlega analizie.  Element <emphasis>boilers</emphasis> 
zawiera co najmniej jeden element <emphasis>boiler</emphasis>, opisuj±cy konfiguracjê pojedynczego kot³a.
</para>

<para>
W ramach elementu <emphasis>boiler</emphasis> dopuszczalne i wymagane s± nastêpuj±ce atrybuty:

<itemizedlist>

<listitem><para>
<emphasis>boiler_no</emphasis> - numer kot³a, dodatnia liczba ca³kowita
</para></listitem>

<listitem><para>
<emphasis>grate_speed</emphasis> - maksymalna procentowa zmiana prêdko¶ci rusztu podczas 
jednego cyklu analizy
</para></listitem>

<listitem><para>
<emphasis>coal_gate_height</emphasis> - maksymalna procentowa zmiana wysoko¶ci warstwownicy
podczas jednego cyklu analizy
</para></listitem>

<listitem><para>
<emphasis>boiler_type</emphasis> - typ kot³a, parametr ten mo¿e przyjmowaæ nastêpuj±ce warto¶ci:
<itemizedlist>
	<listitem><para>WR-25</para></listitem>
	<listitem><para>WR-10</para></listitem>
	<listitem><para>WR-5</para></listitem>
	<listitem><para>WR-2,5</para></listitem>
	<listitem><para>WR-1,25</para></listitem>
</itemizedlist>
</para></listitem>

</itemizedlist>
</para>

<para>
Element <emphasis>boiler</emphasis> obowi±zkowo musi zawieraæ trzy elementy <emphasis>interval</emphasis>. 
</para>
</section>

<section id="form-el-interval">
<title>Element interval</title>
<para>
Element <emphasis>interval</emphasis> opisuje cykl pracy programu analiza. Stanowi obowi±zkowy sk³adnik elementu <emphasis>boiler</emphasis>.Zawiera nastêpuj±ce atrybuty, których warto¶ci stanowi± dodatnie liczby ca³kowite:

<itemizedlist>

<listitem><para>
<emphasis>grate_speed_lower</emphasis> - dolne ograniczenie prêdko¶ci rusztu podczas cyklu (mm/h) 
</para></listitem>

<listitem><para>
<emphasis>grate_speed_upper</emphasis> - górne ograniczenie prêdko¶ci rusztu podczas cyklu (mm/h)
</para></listitem>

<listitem><para>
<emphasis>duration</emphasis> - d³ugo¶æ cyklu (w sekundach)
</para></listitem>

</itemizedlist>

<para>
Poni¿ej przedstawiono przyk³adow± konfiguracjê kot³ów:
<programlisting>
<![CDATA[
  <boilers>
    <boiler boiler_no="3" grate_speed="15.00" coal_gate_height="4.00" boiler_type="WR-5">
      <interval duration="10800" grate_speed_lower="1000" grate_speed_upper="5000"/>
      <interval duration="8040" grate_speed_lower="4000" grate_speed_upper="6000"/>
      <interval duration="7200" grate_speed_lower="5000" grate_speed_upper="9000"/>
    </boiler>
    <boiler boiler_no="4" grate_speed="15.00" coal_gate_height="4.00" boiler_type="WR-5">
      <interval duration="10800" grate_speed_lower="1000" grate_speed_upper="5000"/>
      <interval duration="8040" grate_speed_lower="4000" grate_speed_upper="6000"/>
      <interval duration="7200" grate_speed_lower="5000" grate_speed_upper="9000"/>
    </boiler>
  </boilers>
]]>
</programlisting>
</para>

<para>
W ramach elementu <emphasis>boiler</emphasis> dopuszczalne i wymagane s± nastêpuj±ce atrybuty:

<itemizedlist>

<listitem><para>
<emphasis>boiler_no</emphasis> - numer kot³a, dodatnia liczba ca³kowita
</para></listitem>

<listitem><para>
<emphasis>grate_speed</emphasis> - maksymalna procentowa zmiana prêdko¶ci rusztu podczas 
jednego cyklu analizy
</para></listitem>

<listitem><para>
<emphasis>coal_gate_height</emphasis> - maksymalna procentowa zmiana wysoko¶ci warstwownicy
podczas jednego cyklu analizy
</para></listitem>

<listitem><para>
<emphasis>boiler_type</emphasis> - typ kot³a, parametr ten mo¿e przyjmowaæ nastêpuj±ce warto¶ci:
<itemizedlist>
	<listitem><para>WR-25</para></listitem>
	<listitem><para>WR-10</para></listitem>
	<listitem><para>WR-5</para></listitem>
	<listitem><para>WR-2,5</para></listitem>
	<listitem><para>WR-1,25</para></listitem>
</itemizedlist>
</para></listitem>

</itemizedlist>
</para>

<para>
Element <emphasis>boiler</emphasis> obowi±zkowo musi zawieraæ trzy elementy <emphasis>interval</emphasis>. 
</para>
</section>

<section id="form-el-season">
<title>Elementy seasons oraz season</title>

<para>
W elemencie <emphasis>params</emphasis> mo¿e znajdowaæ siê element <emphasis>seasons</emphasis> 
opisuj±cy sezony letnie. Element <emphasis>seasons</emphasis> mo¿e zawieraæ dowoln± ilo¶æ elementów
<emphasis>season</emphasis>. Element <emphasis>season</emphasis> musi zawieraæ nastêpuj±ca listê
atrybutów:
<itemizedlist>
	<listitem><para><emphasis>year</emphasis> - rok, dla którego zdefiniowana jest granica sezonu letniego</para></listitem>
	<listitem><para><emphasis>month_start</emphasis> - miesi±c, w którym rozpoczyna siê  sezon letni (liczba z przedzia³u 1-12)</para></listitem>
	<listitem><para><emphasis>day_start</emphasis> - dzieñ, w którym rozpoczyna siê sezon letni (liczba z przedzia³u 1-31)</para></listitem>
	<listitem><para><emphasis>month_end</emphasis> - miesi±c, w którym koñczy siê sezon letni (liczba z przedzia³u 1-12)</para></listitem>
	<listitem><para><emphasis>day_end</emphasis> - dzieñ, w którym koñczy siê sezon letni (liczba z przedzia³u 1-31)</para></listitem>
</itemizedlist>
Element <emphasis>seasons</emphasis> musi zawieraæ atrybuty <emphasis>month_start</emphasis>, <emphasis>day_start</emphasis>, <emphasis>month_end</emphasis> oraz <emphasis>day_end</emphasis>, maj± one identyczne znaczenie jak atrybuty elementu <emphasis>season</emphasis>, ale okre¶laj± domy¶lne granice sezonu u¿ywane, gdy brak jest definicji sezonu dla danego roku.
</para>

<para>
Poni¿ej przedstawiono przyk³adow± konfiguracjê sezonów:
<programlisting>
<![CDATA[
  <seasons month_start="4" day_start="4" month_end="10" day_end="5"> 
    <season year="2006" month_start="3" day_start="3" month_end="11" day_end="11"/>
    <season year="2004" month_start="5" day_start="3" month_end="10" day_end="9"/>
  </seasons>
]]>
</programlisting>
</para>
</section>

<section id="form-other-ns">
<title>Elementy i atrybuty z innych przestrzeni nazw</title>

<para>
Dla potrzeb konfigurowania niestandardowych demonów linii wprowadzono
mo¿liwo¶æ umieszczania w dokumencie IPK elementów i atrybutów z innych
przestrzeni nazw. Elementy te mogê znale¼æ siê na pocz±tku elementu
<emphasis>device</emphasis> oraz na koñcu elementów <emphasis>param</emphasis>
i <emphasis>send</emphasis>. Wiêkszo¶æ elementów (poza wymienionymi
tak¿e <emphasis>params</emphasis> i <emphasis>unit</emphasis>) mo¿e 
zawieraæ te¿ atrybuty z
innych przestrzeni nazw. Szczegó³y mo¿na znale¼æ w kodzie konkretnych
demonów, wiêkszo¶æ z nich u¿ywa przestrzeni nazw 
<emphasis>http://www.praterm.com.pl/SZARP/ipk-extra</emphasis>. Przyk³ad:
<programlisting>
<![CDATA[
  <device daemon="/opt/szarp/bin/mbusdmn" path="/dev/ttyA11" 
        xmlns:modbus="http://www.praterm.com.pl/SZARP/ipk-extra"
	modbus:mode="master">
	....
]]>
</programlisting>
</para>
<para>
	Jednym z takich atrybutów, niezwi±zanym z konkretnym urz±dzeniem, jest atrybut <emphasis>docpath</emphasis>
	elementu <emphasis>device</emphasis>, wskazuj±cy adres internetowy dokumentacji parametrów danego urz±dzenia, np.
<programlisting>
<![CDATA[
  <device daemon="/opt/szarp/bin/mbrtudmn" path="/dev/ttyA11" 
        xmlns:extra="http://www.praterm.com.pl/SZARP/ipk-extra"
	extra:docpath="http://www.szarp.com.pl/howto/zethowto/html/other-szarp-devices.html">
	....
]]>
</programlisting>
</para>

</section> <!-- form-other-ns -->


</section> <!-- form -->


<section id="konf">
<title>Tworzenie i edycja konfiguracji</title>

<section id="konf-use">
<title>U¿ywanie konfiguracji w formacie IPK</title>

<para>
Czê¶ci± IPK jest biblioteka, pozwalaj±ca programom na bezpo¶redni dostêp do
danych konfiguracyjnych, bez potrzeby parsowania pliku konfiguracyjnego IPK.
Niestety, u¿ywanie tej biblioteki (albo te¿ bezpo¶rednio pliku IPK) wymaga³oby
zmian we wszystkich programach wchodz±cych w sk³ad systemu SZARP, co jest
rozwi±zaniem nieakceptowalnym.
</para>
<para>
Dlatego te¿ IPK zosta³ skonstruowany tak, aby mo¿liwa by³a wzajemna konwersja
konfiguracji z formatu SZARP 2.1 na IPK i z powrotem. Do konwersji istniej±
narzêdzia wykonuj±ce j± automatycznie, opisane w <xref linkend="konf-szarp"> i
<xref linkend="konf-ipk">. Narzêdzie te, co dok³adniej jest opisane w tych
rozdzia³ach, mog± sobie jednak nie poradziæ z niektórymi konfiguracjami -
wymagana jest czasami rêczna wstêpna obróbka konfiguracji.
</para>
<para>
Kiedy mamy ju¿ mo¿liwo¶æ konwersji na oba u¿ywane formaty, nale¿y ustaliæ,
który z nich bêdzie formatem g³ównym (tym, w którym bêd± nanoszone
zmiany), a który tym generowanym automatycznie. Sugerowane jest, aby formatem
g³ównym by³ IPK i po ka¿dej zmianie w nim by³a generowana konfiguracja w starym
formacie. <emphasis>Jest to niezbêdne dla konfiguracji wykorzystuj±cych funkcje
IPK niedostêpne w starym formacie konfiguracji, a wiêc np. dla obs³ugi nowego
formatu bazy Szarpa.</emphasis>
</para>
<para>
W ten sposób programy nowe bêd± korzysta³y z biblioteki IPK, za¶ stare z
wygenerowanej konfiguracji w formacie SZARP 2.1. 
</para>
</section>

<section id="konf-xml">
<title>Narzêdzia do plików XML</title>

<para>
Biblioteka IPK u¿ywa bibliotek libxml2 i libxslt 
(<ulink url="http://www.xmlsoft.org">www.xmlsoft.org</ulink>). Wraz z nimi
udostêpniane s± dwa narzêdzia:
<itemizedlist>

<listitem><para>
xmllint - procesor XML, pozwalaj±cy miêdzy innymi weryfikowaæ poprawno¶æ
dokumentu XML i jego zgodno¶æ z podanym schematem, formatowaæ dokument a tak¿e
zmieniaæ jego kodowanie. Przyk³ady u¿ycia znajduj± siê w 
<xref linkend="konf-szarp"> i <xref linkend="konf-verify">.
</para></listitem>

<listitem><para>
xsltproc - procesor XSLT, pozwalaj±cy na przekszta³canie dokumentów XML za
pomoc± szablonów XSLT. Przyk³ady u¿ycia w <xref linkend="konf-templates">.
</para></listitem>

</itemizedlist>
</para>
<para>
Nale¿y zwróciæ uwagê, ¿e stworzone do manipulacji na konfiguracji szablony XSLT
wchodz±ce w sk³ad dystrybucji SZARP'a by³y testowane tylko z przy u¿yciu jako
procesora XSLT programu xsltproc. Nie jest wykluczone, ¿e zawieraj± one b³êdy,
które mog± siê ujawniæ przy u¿yciu innego procesora.
</para>
<para>
Poza wymienionymi istnieje wiele innych narzêdzi, w szczególno¶ci przegl±darek i
edytorów XML, umo¿liwiaj±cych ³atwiejsz± pracê, zw³aszcza z du¿ymi
konfiguracjami, gdy wa¿na jest mo¿liwo¶æ graficznej prezentacji struktury
pliku. Warto wiedzieæ, ¿e edytor XML jest wbudowany np. w przegl±darkê Mozilla
(menu Tools -&gt; Web development -&gt; DOM inspector).
</para>
</section>

<section id="konf-szarp">
<title>Konwersja konfiguracji SZARP 2.1 na IPK.</title>

<para>
Programem s³u¿±cym do konwersji konfiguracji z formatu SZARP 2.1 na IPK jest
program <application>szarp2ipk</application>, znajduj±cy siê w dystrybucji
SZARP'a. Opis korzystania z programu mo¿na uzyskaæ uruchamiaj±c go z opcjami
'-h' lub '--help'. W szczególno¶ci program mo¿e przyjmowaæ do dwóch parametrów
- katalog w którym ma szukaæ plików konfiguracyjnych SZARP 2.1 oraz ewentualnie
tak¿e plik wyj¶ciowy. Domy¶lnie przyjmowany jest odpowiednio katalog bie¿±cy i
plik <filename>params.xml</filename> w katalogu bie¿±cym. Tak wiêc w
najprostszym przypadku nale¿y zmieniæ katalog na katalog z konfiguracj± i
wywo³aæ program bez parametrów - powstanie plik <filename>params.xml</filename>
zawieraj±cy skonwertowan± konfiguracjê.
</para>
<para>
Program wypisuje na standardowe wyj¶cie b³êdów komunikaty o napotkanych b³êdach
i ostrze¿enia. Czê¶æ z nich mo¿e dotyczyæ nieobecno¶ci pewnych plików (co
niekoniecznie musi oznaczaæ b³±d - np. plik <filename>sender.cfg</filename> nie
musi istnieæ we wszystkich konfiguracjach).
</para>
<para>
Czêsto zdarza siê, ¿e konfiguracja, która jest poprawna z punktu widzenia SZARP
2.1 powoduje b³êdy przy próbie konwersji na IPK. Mo¿na wyró¿niæ kilka
podstawowych rodzajów b³êdów:
<itemizedlist>
<listitem><para>
B³êdy sk³adniowe w plikach - parsery u¿ywane przez bibliotekê IPK s± w pewnych
przypadkach bardziej restrykcyjne ni¿ te w programach SZARP'a. Poniewa¿ program
podaje miejsce wyst±pienia b³êdu, powinien on byæ do¶æ prosty do zlokalizowania
i poprawienia - najczê¶ciej chodzi o brak pewnych elementów (np. nazwy
jednostki parametru), czy te¿ o niezgodno¶æ liczby linii pliku z zadeklarowan±
na jego pocz±tku (np. w raportach).
</para></listitem>

<listitem><para>
Istniej± pewne rodzaje b³êdów, które program wykrywa, ale stara siê naprawiæ.
S± w¶ród nich takie, jak brak nazwy parametru (program przydziela nazwê typu
"Unknown:Unknown:Unknown 1"), czy odwo³anie w pliku
<filename>PTT.act</filename> do nieistniej±cego indeksu IPC (wtedy program
stara siê dodaæ pusty parametr definiowalny).
</para></listitem>

<listitem><para>
B³êdy typu podwójne wyst±pienie parametru o jakiej¶ nazwie czy te¿ wielokrotne
zapisywanie (pod ró¿n± nazw±) tego samego parametru do kilku rekordów w bazie
nie s± poprawiane automatycznie i wymagaj± rêcznych poprawek przed konwersj±.
</para></listitem>

<listitem><para>
Najtrudniejsze do poprawienia s± b³êdy wynikaj±ce z rekurencyjnych odwo³añ w
strukturze parametrów definiowalnych. Program
<application>parcook</application> przetwarza formu³y w takiej kolejno¶ci, w
jakiej s± one zapisane w pliku <filename>parcook.cfg</filename>. Umo¿liwia to
wielokrotne przedefiniowanie parametrów definiowalnych, w tym korzystanie z
wcze¶niej wyliczonej warto¶ci definiowanego w³a¶nie parametru. Tego typu
zale¿no¶ci nie da siê zapisaæ w strukturze pliku IPK, gdy¿ wymaga³oby to
przechowywania dodatkowej informacji o kolejno¶ci formu³, oraz u¿ywanie wielu
formu³ dla jednego parametru. W zwi±zku z tym, je¿eli program wykryje tego typu
b³±d, przerywa pracê. Konwersja takiej konfiguracji wymaga rêcznego przepisania
parametrów definiowalnych, tak aby nie korzystaæ z wielokrotnego
przedefiniowania parametrów i wzajemnych
odwo³añ do parametrów. Formu³y nale¿y pisaæ tak, aby nie trzeba by³o przyjmowaæ
¿adnych za³o¿eñ co do kolejno¶ci obliczania formu³ (w praktyce bêd± wyliczane w
kolejno¶ci indeksów IPC).
</para></listitem>

</itemizedlist>
</para>

<para>
Wynika to ze struktury IPK, ale warto mo¿e w tym miejscu przypomnieæ, ¿e
u¿ywane w SZARP 2.1 indeksy IPC w IPK nie s± nigdzie bezpo¶rednio obecne, ale
wynikaj± one z kolejno¶ci parametrów. (Biblioteka IPK pozwala na znalezienie
parametru korzystaj±c z jego numeru IPC, oraz obliczenie numeru IPC dla
parametru - dla zachowanie kompatybilno¶ci wstecz.)
</para>

<para>
Wygenerowany przez program plik wyj¶ciowy jest w kodowaniu ISO-8859-2.
Je¿eli SZARP by³ skompilowany z u¿yciem starszej wersji biblioteki libxml2
mo¿e siê zdarzyæ, ¿e
polskie znaki diakrytyczne bêd± podane za pomoc± encji z kodami tych znaków.
Aby uzyskaæ polskie znaki
w "normalnym" zapisie, mo¿na przepu¶ciæ wygenerowany plik przez program
<application>xmllint</application>:
<programlisting>
# xmllint params.xml > params2.xml
</programlisting>
Zobacz te¿ <xref linkend="konf-xml">.
</para>
<para>
<emphasis>Uwaga! Zaleca siê uruchomienie programu szarp2ipk tylko raz, przy
pierwszej konwersji konfiguracji na IPK a nastêpnie dokonywanie wszelkich
modyfikacji na pliku IPK. Jest to konieczne np. dla obs³ugi nowego formatu bazy
SZARP'a czy u¿ycia dodatkowych opcji do demonów linii.</emphasis>
</para>

<para>
Program szarp2ipk nie wykonuje konwersji plików konfiguracyjnych programu analiza
(analiza.cfg). Zadaniem tym zajmuje siê narzêdzie analiza2ipk. Analiza2ipk
do³±cza do istniej±cego pliku IPK konfiguracjê programu analiza. Program analiza2ipk
operuje bezpo¶rednio na dokumencie XML, co powoduje, ¿e program nie modyfikuje oraz nie traci
dodatkowych informacji np. komentarzy. 
Opis opcji programu mo¿na uzyskaæ uruchamiaj±c go z opcj± -h lub --help. 
Do istotniejszych parametrów przyjmowanych przez program nale¿y nazwa katalogu
z konfiguracj± (katalog musi zawieraæ pliki: params.xml, analiza.cfg, PTT.act) oraz nazwa pliku
docelowego. Gdy katalog z konfiguracj± nie zosta³ podany program bêdzie szuka³ w/w plików w katalogu bie¿±cym.
Domy¶ln± nazw± pliku docelowego jest params.xml. Gdy plik o takiej
samej nazwie jak nazwa pliku docelowego istnieje program odmówi jego nadpisania. Mo¿na usun±æ to ograniczenie
uruchamiaj±c program z prze³±cznikiem -f lub --force. <emphasis>Uruchomienie programu w katalogu z konfiguracj± z podan± 
jedynie opcj± -f lub --force spowoduje nadpisanie istniej±cego pliku params.xml.</emphasis>
</para>

</section>


<section id="konf-ipk">
<title>Konwersja konfiguracji IPK na SZARP 2.1</title>

<para>
Do konwersji konfiguracji z IPK na stary format s³u¿y program
<application>ipk2szarp</application>. Podobnie jak
<application>szarp2ipk</application> po podaniu opcji '-h' lub '--help'
wypisuje informacje o swoim u¿yciu. I podobnie jako parametr mo¿na podaæ plik
wej¶ciowy (domy¶lnie <filename>./params.xml</filename> i katalog wyj¶ciowy
(domy¶lnie bie¿±cy). Program jest zabezpieczony przed przypadkowym nadpisaniem
konfiguracji z katalogu bie¿±cego - nadpisanie jakiegokolwiek pliku wymaga
podania opcji '-f' ('--force'). Bez tej opcji program nie zniszczy ¿adnego
istniej±cego pliku.
</para>
<para>
Program stara siê w przejrzysty sposób sygnalizowaæ wystêpuj±ce b³êdy (jednak
konwersja w t± stronê jest prostsza ni¿ odwrotnie i nie powinna sprawiaæ
problemów). Jednym z wystêpuj±cych problemów mo¿e byæ brak ci±g³o¶ci w nadanych
indeksach w bazie.
</para>
<para>
Automatyczne indeksy w bazie, obecne w IPK, nie s± mo¿liwe do reprezentacji w
starym formacie konfiguracji. W zwi±zku z tym parametry z takimi indeksami w
pliku PTT.act wystêpuj± jakby nie by³y zapisywane do bazy. Z takiej
konfiguracji nie wolno generowaæ IPK, bo straci siê informacje o zapisywaniu
parametrów do bazy. <emphasis>Przej¶cie na nowy format bazy i korzystanie z
automatycznych indeksów oznacza wiêc konieczno¶æ definitywnego przej¶cia na IPK
</emphasis> i wykorzystywania konfiguracji w starym formacie tylko dla 
kompatybilno¶ci ze starymi programami.
</para>
<para>
W konfiguracjach z automatycznymi indeksami nieco inna jest te¿ postaæ pliku
<filename>definable.cfg</filename> - w pliku tym jako identyfikatory
parametrów u¿ywane s± indeksy w bazie. Poniewa¿ nie s± one dostêpne, zamiast
nich generowane s± indeksy IPC (kolejne numery parametrów w pamiêci). Program
przegl±daj±cy potrafi poprawnie zinterpretowaæ te indeksy, pos³uguj±c siê
informacj± z IPK. Natomiast taki plik
nie zostanie poprawnie wczytany przez program <filename>szarp2ipk</filename>,
gdy¿ nie ma sposobu stwierdzenia, jaki typ indeksów jest u¿yty w
<filename>definable.cfg</filename>. Jest to dodatkowy powód, dla którego
konfiguracja z automatycznymi indeksami oznacza konieczno¶æ korzystania z IPK
jako g³ównego formatu konfiguracji.
</para>

</section>


<section id="konf-verify">
<title>Weryfikacja poprawno¶ci konfiguracji</title>

<para>
Po wprowadzeniu poprawek do pliku IPK dobrze jest sprawdziæ jego poprawno¶æ.
Mo¿na w tym celu wykonaæ kilka kroków:
<itemizedlist>
<listitem><para>
Sprawdziæ, czy nasz plik jest w ogóle poprawnym plikiem XML - naj³atwiej przy
u¿yciu programu xmllint:
<programlisting>
<![CDATA[
# xmllint params.xml
]]>
</programlisting>
Je¿eli zrobili¶my jaki¶ b³±d, zostanie wypisany odpowiedni komunikat.
</para></listitem>

<listitem><para>
Kolejnym krokiem mo¿e byæ sprawdzenie, czy nasz plik jest zgodny ze schematem
IPK. Ponownie mo¿na u¿yæ programu xmllint:
<programlisting>
<![CDATA[
# xmllint --relaxng /opt/szarp/resources/dtd/ipk-params.rng params.xml
]]>
</programlisting>
Ten sam efekt mo¿na wywo³aæ wywo³uj±c obecny w Szarpie skrypt
<application>ipk_check_dtd</application>.
</para></listitem>

<listitem><para>
Je¿eli poprzednie kroki siê powiod³y, warto spróbowaæ wygenerowaæ konfiguracjê
SZARP 2.1 (zobacz <xref linkend="konf-szarp">). 
</para></listitem>

</itemizedlist>
Poprawne przej¶cie przez konfiguracjê wszystkich tych kroków daje du¿± szansê
na brak b³êdów w pliku.
</para>
</section>

<section id="konf-templates">
<title>Tworzenie i u¿ywanie szablonów</title>

<para>
W IPK nie ma oddzielnego formatu dla szablonów konfiguracji. Przez szablon
bêdziemy rozumieæ dowolny plik XML (IPK), który mo¿e zostaæ u¿yty do dodania
grupy parametrów do konfiguracji. Struktura IPK powoduje, ¿e tak naprawdê
dodanie grupy parametrów sprowadza siê do tekstowego wklejenia ich w
odpowiednie miejsce (zwykle dodaje siê odpowiedni element lub elementy
<emphasis>device</emphasis>, oraz parametry definiowalne). Problemem jest
jedynie nadanie nowym parametrom odpowiednich indeksów w bazie.
</para>
<para>
Aby jednak u³atwiæ i zautomatyzowaæ dodawanie parametrów przyjêto nastêpuj±ce
rozwi±zanie. Szablonem IPK nazywamy plik, który od poprawnego pliku IPK
opisuj±cego interesuj±ce nas parametry ró¿ni siê w nastêpuj±cy sposób:
<itemizedlist>
<listitem><para>
Czê¶ci nazw parametrów (i innych atrybutów), które s± wspólne dla wszystkich
parametrów w szablonie i powinny byæ zast±pione innych ci±giem znaków przy
konkretnym u¿yciu szablonu zast±pione s± ci±giem piêciu znaków 'X'. Np. je¶li
nasz szablon ma zawieraæ kompletny zestaw parametrów dla kot³a, to zapewne
wszystkie wyst±pienia ci±gu znaków typu 'Kocio³ 1' bêdziemy chcieli zast±piæ
ci±giem X-ów, tak aby potem mo¿na by³o u¿yæ szablonu i zmieniæ nazwy
parametrów na zaczynaj±ce siê od np. 'Kocio³ WR 2'.
</para>
<para>
Odpowiednio zamienione nazwy powinny te¿ wyst±piæ w tytu³ach raportów i
wykresów, a tak¿e w formu³ach definiuj±cych parametry.
</para>
</listitem>

<listitem><para>
Parametry, które maj± byæ zapisywane do bazy nie maj± atrybutu
<emphasis>base_ind</emphasis>, ale zamiast niego maj± atrybut
<emphasis>tobase</emphasis> o warto¶ci 1. Oznacza on, ¿e przy u¿yciu szablonu
nale¿y nadaæ parametrowi odpowiedni indeks w bazie. Nie dotyczy to indeksów
automatycznych - mo¿na do szablonu bezpo¶rednio wstawiæ po prostu 
<emphasis>base_ind="auto"</emphasis>.
</para></listitem>

</itemizedlist>
Oczywi¶cie szablon powinien zawieraæ tylko informacje o interesuj±cych nas
parametrach. Przyk³adowy opis parametru w szablonie mo¿e wygl±daæ tak:
<programlisting>
<![CDATA[
<param name="XXXXX:Sterownik:temperatura zadana" short_name="Tod"
draw_name="Temp. zadana" unit="°C" prec="1" tobase="1">
        <raport title="XXXXX" description="temperatura zadana"
		filename="XXXXX.rap"/>
        <raport title="RAPORT TESTOWY" description="XXXXX Sterownik" 
		filename="test.rap"/>
        <draw title="XXXXX - temperatury" prior="81" color="cyan"
		min="0" max="150"/>
      </param>
]]>
</programlisting>
</para>
<para>
W dystrybucji SZARP'a znajduje siê program
<application>ipk_create_template</application>, który pozwala na wybranie z
podanej konfiguracji parametrów zawieraj±cych podany ci±g znaków (np. 'Kocio³
1') i utworzenie z nich szablonu. Pierwszym parametrem jest szukany podci±g,
drugim plik z konfiguracj±. Wynik dzia³ania jest wypisywany na standardowe
wyj¶cie. Tak wiêc z danej konfiguracji szablon zawieraj±cy opis kot³a mo¿na
uzyskaæ przez wydanie nastêpuj±cej komendy:
<programlisting>
<![CDATA[
/opt/szarp/bin/ipk_create_template 'Kocio³ 1' params.xml > template.xml
]]>
</programlisting>
</para>
<para>
Nastêpnym krokiem jest przejrzenie pliku <filename>template.xml</filename> i
sprawdzenie, czy na pewno umieszczone zosta³y te parametry, które chcemy
umie¶ciæ w szablonie i czy ogólnie nie trzeba wprowadziæ jaki¶ poprawek. 
W szczególno¶ci uwagi na temat ustalania kolejno¶ci wykresów znajduj±
siê w <xref linkend="konf-draws">.
</para>
<para>
Kolejny program u³atwiaj±cy korzystanie z szablonów, to
<application>ipk_add_template</application>. S³u¿y do dodania parametrów opisanych
przez szablon do konfiguracji. Automatycznie zamienia nazwy na podane (z
XXXXX), nadaje tak¿e parametrom odpowiednie indeksy w bazie. W wywo³aniu
nale¿y podaæ ¶cie¿kê do szablonu z dodawanymi parametrami, ci±g znaków do
utworzenia prawid³owych nazw parametrów, oraz nazwê konfiguracji. Je¿eli nie
podamy tego ostatniego parametru, z szablonu zostanie utworzona nowa
konfiguracja. Wynik dzia³ania programu jest wypisywany na standardowe wyj¶cie.
</para>
<para>
<emphasis>Uwaga!</emphasis> 
Z szablonu wklejane s± do konfiguracji ca³e elementy 'device',
tak wiêc nie jest mo¿liwe bezpo¶rednie dodanie parametrów do istniej±cego
sterownika. Mo¿na oczywi¶cie dodaæ sztuczny nowy sterownik, a rêcznie przenie¶æ
parametry do istniej±cego.
</para>
<para>
Je¿eli wiêc do konfiguracji z poprzedniego przyk³adu chcieliby¶my dodaæ
czwarty kocio³, identyczny z pierwszym, maj±c ju¿ utworzony szablon wydajemy
komendê:
<programlisting>
<![CDATA[
/opt/szarp/bin/ipk_add_template template.xml 'Kocio³ 4:' params.xml > new.xml
]]>
</programlisting>
Plik <filename>new.xml</filename> bêdzie zawiera³ now± konfiguracjê.
Oczywi¶cie mo¿liwe, ¿e bêdziemy chcieli poddaæ j± edycji, np. aby dodaæ
parametry dotycz±ce nowego kot³a do wyliczeñ ogólnej sprawno¶ci czy mocy
ciep³owni.
</para>

<para>
Wszystkie wymienione w tym rozdziale programy do operacji na konfiguracji
wykorzystuj± do swego dzia³ania procesor XSLT i odpowiednie szablony. Szablony
te mo¿na tak¿e wykorzystywaæ samodzielnie, znajduj± siê one w dystrybucji
SZARP'a w katalogu <filename>libSzarp2/xslt</filename>. W kodzie ka¿dego 
z szablonów znajduje siê dok³adny opis dzia³ania oraz sposób podawania
parametrów (dla procesora xsltproc, dla innych programów sposób podawania
parametrów mo¿e byæ inny).
</para>
</section>

<section id="konf-create">
<title>Samodzielne tworzenie i edytowanie konfiguracji IPK</title>

<para>
Niniejszy rozdzia³ zawiera kilka ogólnych uwag dotycz±cych edycji konfiguracji
w formacie IPK.
</para>

<itemizedlist>
<listitem>
<para>
Co by³o sygnalizowane ju¿ w innych miejscach dokumentacji, nale¿y staraæ siê 
ograniczaæ ilo¶æ informacji opisanych w konfiguracji - w szczególno¶ci nie
podawaæ warto¶ci atrybutów tam, gdzie wystarcz± warto¶ci domy¶lne. Takie
podej¶cie upraszcza konfiguracjê i u³atwia jej edycjê. Podobnemu celowi mo¿e
s³u¿yæ zastêpowanie czê¶ci nazw parametrów w formu³ach znakami gwiazdki.
</para>
</listitem>

<listitem>
<para>
Usuwanie parametrów sprowadza siê tylko usuniêcia odpowiedniego elementu
<emphasis>param</emphasis>. Nale¿y jednak sprawdziæ, czy przypadkiem parametr
nie pojawia siê w której¶ z formu³. Najlepiej przeszukaæ plik pod k±tem
wystêpowania ostatniego cz³onu nazwy parametru (bo w formu³ach mo¿e byæ u¿ywana
skrócona nazwa parametru, z gwiazdkami zamiast powtarzaj±cego siê fragmentu
nazwy). Inna sprawa, ¿e struktura bazy w SZARP 2.1 nie umo¿liwia usuwania
parametrów, wobec tego, je¶li parametr by³ zapisywany do bazy (i jest u¿ywana
stary format bazy), mo¿na jedynie usun±æ dotycz±ce go raporty i wykresy.
</para>
</listitem>

<listitem>
<para>
Przy dodawaniu parametrów nale¿y zwróciæ uwagê na nadanie odpowiedniego
(kolejnego) indeksu w bazie. Najwiêkszy wystêpuj±cy w konfiguracji indeks
wypisuje wchodz±cy w sk³ad dystrybucji SZARP'a program 
<application>ipk_base_max</application>. Program wczytuje albo konfiguracjê
podana jako parametr, albo ze standardowego wej¶cia. Jak wiêkszo¶æ narzêdzi do
operacji na IPK program jest prostym skryptem korzystaj±cym z szablonów XSLT.
</para>

<para>
Prostszym rozwi±zaniem mo¿e byæ wykorzystanie mechanizmów u¿ywanych tak¿e przy
pracy z szablonami - zamiast atrybutów 'base_ind' dajemy nowym parametrom
atrybuty 'tobase' o warto¶ci '1' (a wiêc w obrêbie elementu 'param' dodajemy
wpis 'tobase="1"'). Nastêpnie na tak przygotowanym pliku uruchamiamy skrypt
<application>ipk_set_base</application>, który ustawi odpowiednie, kolejne
indeksy w bazie.
</para>

<para>
Problem ten nie wystêpuje przy korzystaniu z nowego formatu bazy - wystarczy
podaæ jako warto¶æ indeksu "auto".
</para>

</listitem>

</itemizedlist>

</section>

<section id="konf-draws">
<title>Okre¶lanie kolejno¶ci wykresów i raportów.</title>

<para>
Je¿eli nie nadamy atrybutów <emphasis>prior</emphasis> wykresom, kolejno¶æ
okien w programie przegl±daj±cym bêdzie zale¿na od kolejno¶ci (indeksu IPC)
pierwszego widocznego w oknie parametru. Za pomoc± wspomnianego atrybutu
mo¿emy t± kolejno¶æ zmieniaæ.
</para>
<para>
Kolejno¶æ wyst±pienia okna ostatecznie okre¶lane jest przez najmniejszy 
atrybut spo¶ród wszystkich wykresów wystêpuj±cych w oknie. Mo¿e to ³atwo
spowodowaæ pewien chaos i trudno¶ci z pó¼niejszym uk³adanie okien, je¿eli
bêdziemy mieli du¿o atrybutów <emphasis>prior</emphasis>. Dlatego zaleca siê
nadawanie atrybutu tylko jednemu (np. pierwszemu) wykresowi w oknie. Dziêki
temu zmiana kolejno¶ci bêdzie wymaga³a zmiany tylko jednego atrybutu.
</para>
<para>
Zagadnieniem mog±cym sprawiaæ te¿ problemy jest ustalanie kolejno¶ci wykresów
przy korzystaniu z szablonów. Polecanym rozwi±zaniem jest edycja szablonu
tak, aby wszystkie wykresy mia³y priorytety ustalone jako liczby z zakresu od 1
do 2, czyli np. 1.10, 1.23 itp. Czê¶æ u³amkowa okre¶la kolejno¶æ wykresów
wewn±trz szablonu. Nastêpnie, przed dodaniem szablonu do do konfiguracji nale¿y
zwiêkszyæ wszystkie priorytety, tak aby ustaliæ ich po³o¿enie wzglêdem innych
parametrów ju¿ obecnych w konfiguracji. Pomocny w tym mo¿e byæ szablon XSLT
<filename>move_draw.xsl</filename>. Pozwala on wybraæ z konfiguracji (lub
szablonu) odpowiednie wykresy i zwiêkszyæ lub zmniejszyæ ich priorytet.
Poni¿szy przyk³ad zwiêksza o 12 priorytet wszystkim wykresom, które w tytule
(atrybut <emphasis>title</emphasis>) zawieraj± ci±g znaków 'Kocio³ 1':
<programlisting>
<![CDATA[
xsltproc --stringparam title 'Kocio³ 1' --stringparam num 12 \
        /opt/szarp/resources/xslt/move_draw.xsl params.xml > new.xml
]]>
</programlisting>
Szablon u³atwia wiêc zmienianie priorytetu dla ca³ych grup wykresów. Jako
parametr 'num' mo¿na te¿ oczywi¶cie podaæ liczbê ujemn±, co powoduje
zmniejszenie atrybutu <emphasis>prior</emphasis> wybranych wykresów. 
Jako parametr 'title' mo¿na podaæ pusty string '' - wówczas wszystkie 
wykresy bêd± mia³y zmieniony atrybut <emphasis>prior</emphasis>.
</para>
<para>
W dystrybucji SZARP'a znajduje siê tak¿e program ipk_move_draws, wywo³uj±cy
podany wy¿ej szablon, przez co taki sam efekt mo¿na uzyskaæ wywo³uj±c ten
program:
<![CDATA[
/opt/szarp/bin/ipk_move_draws 'Kocio³ 1' 12 params.xml > new.xml
]]>
</para>
<para>
Innym rozwi±zaniem pozwalaj±cym na proste ustalanie kolejno¶ci zarówno okien
programu przegl±daj±cego jak i samych wykresów oraz raportów jest u¿ycie
programu <application>ipkedit</application>, opisanego w rozdziale 
<xref linkend="ipkedit">.
</para>
</section>

<section id="ipkedit">
<title>Program Edytor IPK</title>

<para>
Wbrew szumnej nazwie program <application>ipkedit</application> nie jest pe³nym
edytorem IPK. W tej chwili jego funkcjonalno¶æ jest ograniczona do zadañ, które
przy bezpo¶rednich operacjach na pliku sprawiaj± najwiêcej problemów, tzn.
ustalania kolejno¶ci okien programu przegl±daj±cego oraz wykresów w oknach i
parametrów w raportach.
</para>

<para>
<application>ipkedit</application> jest aplikacj± graficzn±, korzystaj±c± z
biblioteki wxWindows, st±d te¿ do jego kompilacji potrzebne jest
skonfigurowanie systemu SZARP z u¿yciem wxWindows. Interfejs programu jest
bardzo prosty. Udostêpnia podstawowe operacje plikowe oraz mo¿liwo¶æ zmiany
kolejno¶ci okien, wykresów i raportów.
</para>

<para>
Program nie wykorzystuje biblioteki IPK, ale operuje bezpo¶rednio na pliku XML,
dziêki temu nie modyfikuje i nie traci dodatkowych informacji, takich jak np.
komentarze.
</para>

<para>
Po uruchomieniu program mo¿e wy¶wietliæ komunikat informuj±cy o braku obs³ugi
schematów RelaxNG. Jest to zale¿ne od wersji biblioteki libxml2 u¿ytej do
kompilacji u¿ywanej wersji programu. Brak obs³ugi RelaxNG nie zmniejsza
funkcjonalno¶ci, natomiast ogranicza mo¿liwo¶æ sprawdzenia przez program, czy
³adowany plik zawiera poprawny dokument IPK.
</para>

<para>
Centraln± czê¶æ okna programu zajmuj± dwie zak³adki, zawieraj±ce zgodnie z
nazwami odpowiednio listê raportów i ich elementów, oraz listê okien i
wykresów.
Wiêkszo¶æ funkcji programu dostêpna jest z umieszczonego na górze okna paska
ikon. S± to odpowiednio:
<itemizedlist>
<listitem><para>
Za³adowanie pliku z dysku. Plik jest weryfikowany pod k±tem poprawno¶ci, tzn.
musi byæ dokumentem XML zgodnym ze schematem IPK. Plik do otwarcia mo¿na tak¿e podaæ
jako parametr programu.
</para></listitem>
<listitem><para>
Ponowne za³adowanie pliku (przydatne gdy chcemy za³adowaæ konfiguracjê po
zmianie wykonanej w edytorze).
</para></listitem>
<listitem><para>
Zapisanie pliku na dysku.
</para></listitem>
<listitem><para>
Przesuniêcie obiektu w górê listy. Je¿eli mamy zaznaczony parametr w raporcie, 
przesuwanie dotyczy tego parametru, je¿eli wykres, to wykresu. Je¿eli nie 
zaznaczyli¶my wykresu, a mamy zaznaczone okno przegl±daj±cego, 
przesuwane jest okno. Nie mo¿na przesuwaæ raportów.
Przesuwanie powoduje jedynie zmianê atrybutów <emphasis>prior</emphasis> lub
<emphasis>order</emphasis> obiektów, bez ¿adnych dodatkowych ingerencji w
dokument. Program stara siê maksymalnie zachowaæ istniej±c± strukturê pliku, w
tym nadane uprzednio warto¶ci atrybutów, w razie potrzeby zamieniaj±c po prostu
atrybuty elementów, których kolejno¶æ na li¶cie siê zmieni³a. 
Dokonuje tylko jednej optymalizacji, a mianowicie atrybut <emphasis>prior</emphasis>
okna jest usuwany wszystkim wykresom oprócz pierwszego w oknie. Powinno to
u³atwiæ przysz³± edycjê pliku.
</para></listitem>
<listitem><para>
Przesuniêcie obiektu w dó³ listy - patrz uwagi wy¿ej.
</para></listitem>
<listitem><para>
Wyj¶cie z programu.
</para></listitem>
<listitem><para>
Wy¶wietlenie dokumentacji programu.
</para></listitem>
</itemizedlist>
Wszystkie powy¿ej opisane funkcje dotycz±ce operacji na plikach maj± swoje
odpowiedniki w menu <emphasis>Plik</emphasis>, oraz towarzysz±ce pozycjom menu
skróty klawiszowe. Dodatkowo w menu jest dostêpna funkcja 'Zapisz jako',
pozwalaj±ce zapisaæ plik pod zmienion± nazw±.
</para>
<para>
W menu <emphasis>Edycja</emphasis> poza poleceniami do przesuwania obiektów w
górê i w dó³ listy znajduj± siê dwa dodatkowe polecenia, nie posiadaj±ce
swoich skrótów klawiszowych:
<itemizedlist>
<listitem><para>
<emphasis>Wyczy¶æ atrybuty</emphasis> - usuwa z ca³ego pliku wszystkie
atrybutu <emphasis>order</emphasis> i <emphasis>prior</emphasis> wykresów i
raportów. Po wydaniu polecenia kolejno¶æ obiektów jest zale¿na od kolejno¶ci
wyst±pienia w konfiguracji IPK.
</para></listitem>
<listitem><para>
<emphasis>Przelicz atrybuty</emphasis> - usuwa wszystkie zbêdne atrybuty z
pliku, nadaje kolejne warto¶ci atrybutów zgodne z kolejno¶ci± ustalon± przez
program. 
</para></listitem>
</itemizedlist>
Powy¿sze polecenia s± przydatne w sytuacji, gdy pojawiaj± siê problemy ze
zmian± kolejno¶ci raportów czy wykresów po zapisaniu i powtórnym za³adowaniu
pliku. Mog± one byæ spowodowane na przyk³ad przypisaniem ró¿nym obiektom tych
samych warto¶ci atrybutów decyduj±cych o kolejno¶ci. Je¿eli po¿±dana przez nas
kolejno¶æ jest niewiele ró¿na od tej powsta³ej po u¿yciu polecenia
<emphasis>Wyczy¶æ atrybuty</emphasis>, to polecane jest u¿ycie w³a¶nie jego,
gdy¿ w przeciwieñstwie do drugiego upraszcza ono konfiguracjê. Konfiguracja
powsta³a przez usuniêcie wszystkich atrybutów a potem ewentualne operacje za
pomoc± programu (bez rêcznej edycji pliku) powinna byæ zawsze poprawna i nie
sprawiaæ opisanych wy¿ej problemów.
</para>
<figure id="ipkedit-fig">
<title>Przyk³adowy wygl±d okna programu</title>
<mediaobject>
        <imageobject> 
                <imagedata fileref="pics/ipkedit1.png">
        </imageobject>
</mediaobject>
</figure>
<para>
Je¿eli dana operacja (np. otwarcie pliku) mo¿e spowodowaæ utratê wprowadzonych
zmian, program wy¶wietla okienko pozwalaj±ce na zapisanie lub zignorowanie zmian, 
oraz na rezygnacjê z wykonywanej operacji.
</para>

<para>
Jêzyk komunikatów wy¶wietlanych przez program zale¿y od systemowych ustawieñ 
jêzyka, obecnie dostêpny jest polski i angielski.
</para>

</section> <!-- ipkedit -->

<section id="ipk-tools">
<title>Spis narzêdzi do IPK</title>

<para>
Poni¿ej znajduje siê lista wchodz±cych w sk³ad dystrybucji SZARP'a narzêdzi
pomocnych w pracy z IPK. Wszystkie te narzêdzia obs³uguj± opcjê '-h' (lub
'--help'), po podaniu której wy¶wietlaj± dok³adny opis opcji i parametrów
programu. St±d te¿ poni¿ej znajduj± siê tylko ogólne opisy przeznaczenia
poszczególnych narzêdzi:
<itemizedlist>

<listitem><para>
<emphasis>ipk2szarp</emphasis> - konwersja konfiguracji w formacie IPK
na 'stary' format SZARP 2.1.
</para></listitem>

<listitem><para>
<emphasis>i2smo</emphasis> - (ipk2szarp modified only) nak³adka na 
<emphasis>ipk2szarp</emphasis> tworz±ca pliki wynikowe w tymczasowym katalogu
i kopiuj±ca do katalogu docelowego tylko pliki rzeczywi¶cie zmienione.
Dziêki temu ograniczona jest ilo¶æ zmian wymuszaj±cych restart SZARP'a.
Program przyjmuje takie same opcje jak ipk2szarp, z tym ¿e ignorowany jest brak 
opcji '-f' - zmienione pliki s± zawsze nadpisywane.
</para></listitem>

<listitem><para>
<emphasis>ipk_add_template</emphasis> - dodanie szablonu do konfiguracji
lub stworzenie nowej konfiguracji na podstawie szablonu IPK.
</para></listitem>

<listitem><para>
<emphasis>ipk_base_max</emphasis> - wypisuje najwiêkszy wystêpuj±cy w 
konfiguracji indeks parametru w bazie.
</para></listitem>

<listitem><para>
<emphasis>ipk_check_dtd</emphasis> - sprawdza zgodno¶æ poprawno¶æ konfiguracji
pod k±tem zgodno¶ci ze schematem RelaxNG (nazwa ze wzglêdów historycznych -
wcze¶niej u¿ywano zamiast RelaxNG DTD).
</para></listitem>

<listitem><para>
<emphasis>ipk_create_template</emphasis> - wybiera z konfiguracji parametry na
podstawie fragmentu nazwy i tworzy z nich szablon IPK.
</para></listitem>

<listitem><para>
<emphasis>ipkedit</emphasis> - program z interfejsem graficznym s³u¿±cy do
zmiany kolejno¶ci okien programu przegl±daj±cego, wykresów i parametrów w 
raportach.
</para></listitem>

<listitem><para>
<emphasis>ipk_get_base</emphasis> - wypisuje indeks w bazie parametru o
podanej nazwie.
</para></listitem>

<listitem><para>
<emphasis>ipkmax</emphasis> - jak <emphasis>ipk_base_max</emphasis>, tylko nie
jest to skrypt korzystaj±cy z szablonów XSLT, ale program napisany z
wykorzystaniem biblioteki IPK - napisany by³ jako program przyk³adowy i
testuj±cy bibliotekê.
</para></listitem>

<listitem><para>
<emphasis>ipk_move_draws</emphasis> - zwiêksza lub zmniejsza o zadan± liczbê
priorytet okien programu przegl±daj±cego dla parametrów wybranych na podstawie
fragmentu nazwy.
</para></listitem>

<listitem><para>
<emphasis>ipk_normal_draws</emphasis> - "normalizuje" priorytety okien
programu przegl±daj±cego w pliku wej¶ciowym, przekszta³caj±c je do postaci
'1.X'.
</para></listitem>

<listitem><para>
<emphasis>ipk_remove_filenames</emphasis> - usuwa atrybuty 'filename' z opisu
raportu - zmniejsza to rozmiar i zwiêksza czytelno¶æ konfiguracji. U¿ywane s±
nazwy plików tworzone na podstawie tytu³u raportu.
</para></listitem>

<listitem><para>
<emphasis>ipk_set_base</emphasis> - wyszukuje w konfiguracji wszystkie
atrybuty 'tobase' parametrów i zamienia je na odpowiednie (kolejne) indeksy w
bazie. Dziêki temu przy rêcznym dodawaniu parametrów nie trzeba samodzielnie 
sprawdzaæ najwiêkszego obecnego indeksu w bazie.
</para></listitem>

<listitem><para>
<emphasis>szarp2ipk</emphasis> - tworzenie konfiguracji IPK na podstawie
konfiguracji w formacie SZARP 2.1.
</para></listitem>

</itemizedlist>
</para>

</section>

</section>

<section id="prog">
<title>IPK dla programistów</title>

<section id="prog-api">
<title>Interfejs biblioteki IPK</title>

<para>
Czê¶ci± projektu IPK jest biblioteka, u³atwiaj±ca korzystanie z konfiguracji
programom u¿ytkowym.
Dziêki temu nie jest konieczne samodzielne parsowanie konfiguracji czy
dokonywanie ró¿nych przeliczeñ.
</para>

<para>
Ze wzglêdu na do¶æ spor± z³o¿ono¶æ, oraz aby umo¿liwiæ ³atwiejsz± rozbudowê i
przysz³e modyfikacje, biblioteka zosta³a napisana nie w C, ale w C++. 
</para>

<para>
Dok³adny
opis wszystkich klas mo¿na otrzymaæ przez wygenerowanie dokumentacji z kodu
¼ród³owego. W tym celu w repozytorium SZARP'a w podkatalogu
<filename>libSzarp2</filename> nale¿y wydaæ komendê:
<programlisting>
make doxy
</programlisting>
W katalogu <filename>doxy</filename> zostanie wygenerowana dokumentacja, 
wersja HTML w podkatalogu <filename>html</filename>.
</para>

<para>
Struktura biblioteki odpowiada mniej wiêcej strukturze pliku IPK (zobacz 
<xref linkend="form">). Konfiguracja przechowywana jest w jednym g³ównym
obiekcie typu <emphasis>TSzarpConfig</emphasis>. Obiekt ten zawiera listê
elementów typu <emphasis>TDevice</emphasis>, opisuj±cych poszczególne linie
komunikacyjne, oraz listê parametrów definiowalnych. Obiekty klasy
<emphasis>TDevice</emphasis> zawieraj± za¶ wska¼niki do opisywanych linii
radiowych, jednostek itd.
</para>

<para>
Przyjêto, zgodnie z metodologi± obiektow±, zasadê ukrywania implementacji
poszczególnych elementów. Wszystkie atrybuty s± chronione lub prywatne, je¿eli
jest potrzeba dostêpu do nich, definiowane s± odpowiednie metody.
</para>

<para>
Nale¿y zwróciæ uwagê, ¿e API biblioteki jest jeszcze na do¶æ wstêpnym etapie
rozwoju. W miarê powstawania korzystaj±cych z biblioteki aplikacji bêd± siê
pojawia³y nowe elementy. Mam nadziejê, ¿e obiektowa struktura biblioteki
pozwoli zachowaæ kompatybilno¶æ wstecz.
</para>

<para>
W wiêkszo¶ci wypadków implementacja struktur danych wewn±trz biblioteki jest
listowa. Dziêki temu mo¿liwe jest ³atwe dodawanie i usuwanie elementów (choæ nie
wszêdzie s± w tej chwili napisane odpowiednie interfejsy). Minusem jest liniowy
czas dostêpu do parametrów (np. wyszukiwanie parametrów wed³ug jaki¶
kryteriów). Niektóre algorytmy (np. tworzenie pliku
<filename>eknrcor</filename>) maj± z³o¿ono¶æ kwadratow± wzglêdem liczby
parametrów. Je¿eli w jaki¶ aplikacjach bêdzie to powodowa³o problemy
wydajno¶ciowe, trzeba bêdzie zaimplementowaæ jakie¶ bardziej ambitne algorytmy.
Najprawdopodobniej jednak, przy typowych rozmiarach konfiguracji (maksymalnie
tysi±ce parametrów) i obecnych mocach obliczeniowych aktualna prosta
implementacja oka¿e siê zupe³nie wystarczaj±ca.
</para>

<para>
Biblioteka nie przechowuje w tej chwili ¿adnych dodatkowych informacji pomocniczych,
tak wiêc modyfikacje konfiguracji z poziomu biblioteki, podobnie jak operacje na 
pliku IPK, nie wymagaj± uaktualniania powi±zanych informacji.
</para>

<para>
Do parsowania XML-a wykorzystywana jest biblioteka libxml2. Biblioteka ta
przechowuje wszystkie dane tekstowe (tak¿e atrybuty) w kodowaniu UTF-8.
Natomiast interfejs biblioteki IPK wykorzystuje kodowanie ISO-8859-2 (dokonuj±c
w razie potrzeby odpowiednich konwersji przy wywo³aniach funkcji z biblioteki
XML). St±d te¿ wszystkie parametry do funkcji biblioteki IPK powinny byæ
podawane w tym kodowaniu.
</para>

<para>
Konstruktor obiektu przechowuj±cego konfiguracjê jest bezparametrowy.
Inicjalizacja nastêpuje przez wczytanie informacji z pliku. Funkcja
<emphasis>TSzarpConfig::loadSzarpConfig(char* directory)</emphasis> wczytuje
konfiguracjê w formacie SZARP 2.1 z podanego katalogu. Nale¿y zwróciæ uwagê, ¿e
czê¶æ z wykorzystywanych przez funkcjê parserów plików konfiguracyjnych
(napisanych we fleksie) nie jest 'reentrant' (jaki¶ polski odpowiednik?) i mo¿e
byæ wykorzystywana tylko raz. Ogólnie wiêc funkcjê t± mo¿na w programie wywo³aæ
tylko raz. Lepiej jest wiêc wczytywaæ konfiguracjê w formacie IPK, przy u¿yciu
metody <emphasis>TSzarpConfig::loadXML(char* path)</emphasis>. 
</para>
<para>Oto przyk³adowy program korzystaj±cy z biblioteki. Wypisuje on indeks IPC
parametru o nazwie podanej jako drugi parametr (pierwszym jest nazwa pliku
konfiguracyjnego):
<programlisting>
<![CDATA[
#include <iostream>
#include <string>
using namespace std;

#include "szarp_config.h"

int main(int argc, char* argv[])
{
	TSzarpConfig * config;
	TParam * param;

	if (argc < 2) {
		cout << "Za ma³o parametrów\n" ;
		return 1;
	}

	config = new TSzarpConfig();
	
	if (config->loadXML(argv[1]) != 0) {
		cout << "B³±d podczas wczytywania pliku " << argv[1] << "\n";
		return 1;
	}
	
	param = config->getParamByName(argv[2]);

	if (param == NULL) {
		cout << "Nie znaleziono parametru '" << argv[2] << "'\n";
	} else {
		cout << "Indeks IPC parametru to " << param->GetIpcInd() << "\n";
	}

	delete config;
}
]]>
</programlisting>
Kompilacjê i linkowanie programu mo¿na przeprowadziæ za pomoc± komend:
<programlisting>
<![CDATA[
gcc -Iszarp/libSzarp2/include/ `xml2-config --cflags` -c -Wall getipc.cc
g++ -o getipc -L/usr/X11R6/lib -lXt szarp/libSzarp/libSzarp.so \
	szarp/libSzarp2/libSzarp2.so -lxml2 -lz -lm getipc.o
]]>
</programlisting>
</para>
<para>
Biblioteka by³a testowana za pomoc± debugerów pamiêci. Polecanym przeze mnie
programem jest <application>valgrind</application>, dostêpny pod adresem
<ulink url="http://freshmeat.net/projects/valgrind">
http://freshmeat.net/projects/valgrind</ulink>. Jest bardzo prosty w u¿yciu i
pozwala na wykrycie b³êdów, których zlokalizowanie w inny sposób by³oby prawie
niemo¿liwe.
</para>

</section>

<section id="prog-parsers">
<title>Korzystanie z parserów konfiguracji SZARP 2.1</title>

<para>
Biblioteka IPK musi umieæ parsowaæ wszystkie pliki konfiguracyjne SZARP 2.1. Z
ró¿nych wzglêdów nie chcia³em korzystaæ z istniej±cych parserów i do wszystkich
napisa³em w³asne, korzystaj±ce z programu flex. Dziêki temu parsery maj±
wiêksz± szansê na brak b³êdów (bo kod jest generowany maszynowo przez fleksa),
a poza tym s± du¿o ³atwiejsze do modyfikacji.
</para>
<para>
Parsery mo¿na oczywi¶cie wykorzystaæ niezale¿nie od reszty biblioteki, gdyby by³a 
potrzeba pisania programu, który z jaki¶ wzglêdów musi parsowaæ który¶ z plików
konfiguracyjnych SZARP 2.1. Interfejsy do parserów s± zawarte w plikach w
katalogu <filename>libSzarp2/include</filename>, s± to odpowiednio:
<itemizedlist>
<listitem><para>
<filename>ekrncor.h</filename> - parser plików z opisem okien dla programu
przegl±daj±cego (<filename>ekrnXXXX.cor</filename> i
<filename>ekrnXXXX.def</filename>).
</para></listitem>

<listitem><para>
<filename>parcook_cfg.h</filename> - parser plików
<filename>parcook.cfg</filename>.
</para></listitem>

<listitem><para>
<filename>sender_cfg.h</filename> - parser plików konfiguracyjnych programu
sender (<filename>sender.cfg</filename>.
</para></listitem>

<listitem><para>
<filename>ptt_act.h</filename> - parser plików <filename>PTT.act</filename>.
</para></listitem>

<listitem><para>
<filename>line_cfg.h</filename> - parser plików z opisami linii dla demonów
linii (<filename>lineX.cfg</filename>).
</para></listitem>

<listitem><para>
<filename>definable_parser.h</filename> - parser plików z parametrami
definiowalnymi (<filename>definable.cfg</filename>), napisany w C++.
</para></listitem>

<listitem><para>
<filename>raporter.h</filename> - parser plików konfiguracyjnych raportera,
tak¿e napisany w C++.
</para></listitem>

</itemizedlist>
</para>

<para>
Wszystkie parsery napisane w C, poza <filename>line_cfg.h</filename> (a wiêc
pierwsze cztery) maj± t± wadê, ¿e nie bêd± poprawnie dzia³a³y je¿eli w czasie
jednego przebiegu programu zostan± wywo³ane kolejny raz (flex zapamiêtuje swój
stan globalnie i potem nie chce to za bardzo dzia³aæ). Je¿eli bêdzie to
problemem, trzeba bêdzie zmieniæ interfejs parserów na C++. Docelowo jednak
jedynym programem korzystaj±cym z IPK i wczytuj±cym konfiguracjê w formacie
SZARP 2.1 powinien byæ <application>szarp2ipk</application>, wiêc raczej nie
bêdzie to konieczne.
</para>

<para>
Kolejn± wad± (choæ mo¿na na to ró¿nie patrzyæ) parserów jest ich wiêksza
restrykcyjno¶æ ni¿ parserów u¿ywanych w aplikacjach SZARP 2.1, które potrafi±
sparsowaæ tak¿e pliki nie do koñca zgodne z deklarowanym formatem. Jest to
jednak tak¿e raczej problem okresu przej¶ciowego, dopóki wszystkie konfiguracje
nie zaczn± u¿ywaæ IPK. Poza tym s± to zwykle problemy, które ³atwo poprawiæ.
</para>

</section>

<section id="prog-exp">
<title>Rozszerzanie IPK</title>

<para>
W przysz³o¶ci zapewne IPK bêdzie obs³ugiwaæ wiêcej danych o konfiguracji ni¿
obecnie. Nie ka¿de jednak powstanie nowego programu musi siê wi±zaæ z
rozszerzaniem IPK.
</para>
<para>
W niektórych przypadkach celowe wydaje siê utrzymywanie oddzielnych plików
konfiguracyjnych dla jaki¶ programów. Jest tak np. w przypadku dyspozytora.
Plik konfiguracyjny tego programu nie opisuje w³a¶ciwo¶ci parametrów samych w
sobie, poza tym jest specyficzny dla u¿ytkownika. Przystosowaniem programu do
wspó³pracy z IPK mog³oby byæ natomiast u¿ywanie jako identyfikatorów parametrów
ich nazw, zamiast indeksów w bazie czy pamiêci dzielonej. Uniezale¿nia to taki
program od wiêkszo¶ci zmian w konfiguracji bazowej, trzymanej w IPK (najgorsze
co mo¿e siê staæ to usuniêcie jakiego¶ parametru lub zmiana nazwy - program
straci wtedy dostêp do tego parametru).
</para>
<para>
Inne programy (np. analiza) wykorzystuj± jednak raczej w³a¶ciwo¶ci parametrów
samych w sobie i w zwi±zku z tym byæ mo¿e korzystne by³oby umieszczenie
informacji o roli parametru w analizie w IPK, np. przez dodanie
elementu-dziecka do elementu <emphasis>param</emphasis>. W skrócie dzia³ania
konieczne do dodania nowych danych do IPK przedstawiaj± siê nastêpuj±co:
<itemizedlist>
<listitem><para>
Zaprojektowanie nowego elementu i dodanie go do schematu RelaxNG. 
Oczywi¶cie powinno to byæ
zrobione tak, ¿eby zachowaæ kompatybilno¶æ wstecz.
</para></listitem>

<listitem><para>
Dodaæ strukturê opisuj±c± nowe dane do odpowiedniej z klas opisuj±cych
strukturê IPK (tak aby zachowaæ odpowiednio¶æ ze struktur± pliku IPK).
Potrzebne s± podstawowe metody umo¿liwiaj±ce dostêp do tych danych, ich
modyfikacje i tworzenie. Nale¿y przestrzegaæ zasady nie wprowadzania atrybutów
publicznych. Nowa klasa powinna zostaæ umieszczona w oddzielnym pliku
¼ród³owym. Ka¿da klasa, metoda i atrybut powinny byæ opisane zgodnie z
wymaganiami Doxygena.
</para></listitem>

<listitem><para>
Do funkcji wczytuj±cych i zapisuj±cych XML dodaæ parsowanie i tworzenie
odpowiednich elementów drzewa XML.
</para></listitem>

<listitem><para>
Je¿eli wprowadzane do IPK dane by³y ju¿ obecne w jakim¶ plików konfiguracyjnym
SZARP 2.1 nale¿y napisaæ parser wczytuj±cy te dane i metodê tworz±c± ten plik,
a nastêpnie dodaæ wywo³ania tych funkcji do metod odczytuj±cych i zapisuj±cych
konfiguracjê SZARP 2.1 (<emphasis>TSzarpConfig::loadSzarpConfig()</emphasis> i
<emphasis>TSzarpConfig::saveSzarpConfig()</emphasis>).
</para></listitem>

</itemizedlist>
</para>

</section>

</section>

<section id="ipk-aggregate">
<title>£±czenie wielu konfiguracji w jedn±</title>

<section id="ipk-aggregate-concepts">
<title>Koncepcja</title>

<para>
Mechanizm ³±czenia wielu konfiguracji w jedn± pozwala na prezentowanie w
programie przegl±daj±cym SzarpDraw wykresów z kilku oddzielnych baz na
raz, a tak¿e na tworzenie parametrów definiowalnych, których formu³y odwo³uj±
siê do parametrów z ró¿nych baz.
</para>

<note>
	<para>
	Obecnie system SZARP umo¿liwia definiowanie parametrów odwo³uj±cych
	siê do parametrów z innych baz oraz wy¶wietlanie w jednym zestawie
	wykresów z ró¿nych baz. St±d te¿ konfiguracje agregowane nie
	s± ju¿ niezbêdne i nie maj± takiego znaczenia.
	</para>
</note>

<para>
Konfiguracje sk³adowe musz± byæ w formacie IPK, a bazy musz± byæ w formacie
SzarpBase (<xref linkend="szbase">). W wyniku z³o¿enia powstaje nowa
konfiguracja, której plik <filename>params.xml</filename> zawiera odpowiednio
przekszta³cone wszystkie b±d¼ wybrane parametry z konfiguracji sk³adowych.
Nowo powsta³a baza zawiera natomiast linki symboliczne do odpowiednich
katalogów w bazach sk³adowych. Dziêki temu w miarê pojawiania siê danych w
bazach sk³adowych, bêd± one widoczne w konfiguracji ³±czonej.
</para>

<para>
Konfiguracja ³±czona mo¿e byæ normalnie przesy³ana mechanizmem bodas, mo¿e te¿
byæ tworzona bezpo¶rednio na komputerach, na których ma byæ ogl±dana.
</para>

</section> <!-- ipk-aggregate-concepts -->

<section id="ipk-aggregate-create">
<title>Tworzenie i uaktualnianie konfiguracji</title>

<para>
Konfiguracja jest tworzona przez program <application>agregator</application>
instalowany domy¶lnie w katalogu <filename>/opt/szarp/bin</filename>.
Program przyjmuje jeden parametr - ¶cie¿kê do pliku konfiguracyjnego, którego
format opisany jest w nastêpnym rozdziale. Je¿eli program napotka b³±d,
wypisze o nim komunikat i zakoñczy dzia³anie z kodem 1. Je¿eli wszystko
pójdzie dobrze, program koñczy dzia³anie z kodem 0, nie wypisuj±c ¿adnego
komunikatu.
</para>
<para>
Plik konfiguracyjny opisuje konfiguracje które maj± wej¶æ w sk³ad konfiguracji
³±czonej, przekszta³cenia jakim maj± byæ poddane parametry z nich, oraz
ewentualne parametry definiowalne, korzystaj±ce z danych z konfiguracji
sk³adowych. Plik zawiera te¿ informacjê o prefiksie wynikowej konfiguracji.
W wyniku dzia³ania programu powstaje plik <filename>params.xml</filename> w
katalogu
<filename>/opt/szarp/&lt;prefix&gt;/config</filename>
(który musi istnieæ) oraz odpowiedni katalog 
<filename>/opt/szarp/&lt;prefix&gt;/szbase</filename>
zawieraj±cy strukturê bazy danych (<emphasis>&lt;prefix&gt;</emphasis> to
prefiks konfiguracji ustalony w pliku konfiguracyjnym).
<note>
<para>
Zalecan± konwencj± jest wybieranie prefiksu czteroznakowego, koñcz±cego siê
du¿± liter± 'X'. Np. w przypadku tworzenia konfiguracji obejmuj±cych 
ciep³owniê i wêz³y z Zamo¶cia wybrany prefiks to <emphasis>zamX</emphasis>.
</para>
</note>
</para>
<para>
W zwi±zku z tym operacje potrzebne do stworzenia konfiguracji ³±czonej
sprowadzaj± siê do:
<itemizedlist>
<listitem><para>
Stworzenia katalogu
<filename>/opt/szarp/&lt;prefix&gt;/config</filename>.
</para></listitem>

<listitem><para>
Stworzenia i umieszczenia, najlepiej w utworzonym powy¿ej katalogu, 
pliku konfiguracyjnego
<note><para>Zalecan± konwencj± jest nazywanie pliku konfiguracyjnego
<filename>aggr.xml</filename>.</para></note>
</para></listitem>

<listitem><para>
Uruchomienia programu, podaj±c jako parametr plik konfiguracyjny, np.:
<programlisting>
/opt/szarp/bin/agregator /opt/szarp/zamX/config/aggr.xml
</programlisting>
<note><para>
Do uruchomienia programu potrzebne s± prawa do zapisu do wynikowych katalogów
- zwykle oznacza to uruchamianie programu po prostu przez u¿ytkownika root lub 
korzystania z mechanizmu <application>sudo</application>.
</para></note>
</para></listitem>

</itemizedlist>
</para>

<para>
Program <application>agregator</application> bêdzie musia³ byæ ponownie
uruchamiany po ka¿dej istotniejszej zmianie w którejkolwiek z konfiguracji
sk³adowych - tak, aby móg³ uaktualniæ informacjê o parametrach i linki w bazie.
</para>

<note>
<para>
Program tworzy tylko konfiguracjê w formacie IPK - je¿eli chcemy stworzyæ lub
uaktualniæ konfiguracjê w formacie SZARP 2.1, musimy wywo³aæ program
<application>ipk2szarp</application> (zobacz <xref linkend="konf-ipk">).
</para>
</note>

</section> <!-- ipk-aggregate-create -->

<section id="ipk-aggregate-config">
<title>Plik konfiguracyjny</title>

<para>
Plik konfiguracyjny musi byæ poprawnym dokumentem XML. 
Oto przyk³adowa zawarto¶æ:
<programlisting>
<![CDATA[

<?xml version="1.0" encoding="ISO-8859-2"?>

<aggregate xmlns="http://www.praterm.com.pl/IPK/aggregate" 
		xmlns:aggr="http://www.praterm.com.pl/IPK/aggregate" 
		xmlns:ipk="http://www.praterm.com.pl/SZARP/ipk"
		prefix="zamX" 
		title="Zamo¶æ">
		
	<config prefix="zamo">
		<remove xpath="//ipk:raport"/>
		<regexp xpath="//ipk:draw/@prior">s#.*#10\0#</regexp>
		<attribute xpath="//ipk:draw[not(@prior)]" name="prior"
			value="099"/>
	</config>

	<config prefix="zmk1">
		<remove xpath="//ipk:raport"/>
		<regexp xpath="//ipk:draw/@prior">s#.*#20\0#</regexp>
	</config>

	<config prefix="zmw3">
		<remove xpath="//ipk:raport"/>
		<remove xpath="//ipk:draw/@prior"/>
		<!--<regexp xpath="//ipk:draw/@prior">s#.*#30\0#</regexp>-->
	</config>

	<ipk:drawdefinable>
		<ipk:param name="Test:Bez sensu: sumaryczna temp. zewnêtrzna"
				short_name="x" prec="1" unit="°C">
			<ipk:define type="DRAWDEFINABLE" 
			formula="(Sieæ:Sterownik:temperatura zewnêtrzna) ({zmk1} Komora KM-1:Komora:temperatura wody powrotnej) + 
({zmw3} Komora KW-1:temperatura zewnêtrzna) +" />
			<ipk:draw title="TEST" min="0" max = "200" />
		</ipk:param>
	</ipk:drawdefinable>

</aggregate>

]]>
</programlisting>
</para>

<para>
G³ówny element to <emphasis>aggregate</emphasis>. Powinien on zawieraæ
deklaracje przestrzeni nazw
<filename>http://www.praterm.com.pl/IPK/aggregate</filename> (aggr) i 
<filename>http://www.praterm.com.pl/SZARP/ipk</filename> (ipk). 
Zaleca siê, aby ta pierwsza by³a przestrzeni± domy¶ln±, dziêki czemu nie
trzeba bêdzie siê do niej odwo³ywaæ w ka¿dym elemencie.
</para>
<para>
Wymagane s± tak¿e dwa atrybuty - <emphasis>title</emphasis> zawiera opisowy
tytu³ konfiguracji (wy¶wietlany w programie przegl±daj±cym), natomiast
<emphasis>prefix</emphasis> decyduje o nazwie i po³o¿eniu tworzonej konfiguracji
wynikowej, w sposób opisany w poprzednim rozdziale.
</para>

<para>
Najwa¿niejsz± sk³adow± pliku s± elementy <emphasis>config</emphasis>. Ka¿dy z
nich opisuje jedn± konfiguracjê sk³adow±, o nazwie okre¶lanej przez atrybut
<emphasis>prefix</emphasis>. 
</para>
<para>Pierwszy element <emphasis>config</emphasis>
zawiera opis tak zwanej konfiguracji podstawowej. Parametry z tej konfiguracji
nie bêd± podlega³y przekszta³caniu nazw. Pierwszy parametr z tej konfiguracji
powinien byæ zapisywany do bazy (jest to wymaganie wynikaj±ce ze sposobu
dzia³ania program SzarpDraw). Parametry statusu ca³ej konfiguracji ³±czonej
bêd± kopiowane tak¿e z niej. W zwi±zku z tym warto wybraæ na konfiguracjê
podstawow± konfiguracjê najwiêksz±, o najwiêkszej pewno¶ci prawid³owej 
transmisji danych w ramach systemu BODAS.
</para>

<para>
Obecno¶æ elementu <emphasis>config</emphasis> z danym prefiksem oznacza
w³±czenie do konfiguracji wszystkich parametrów z konfiguracji opisanej
prefiksem. Nazwy parametrów (poza konfiguracj± podstawow±, pierwsz±) s±
przekszta³cane do postaci <emphasis>{prefix} nazwa</emphasis>, np. parametr
<filename>KM-1:Komora:Przep³yw CO</filename> z konfiguracji o prefiksie zmk1
po konwersji bêdzie mia³ nazwê 
<filename>{zmk1} KM-1:Komora:Przep³yw CO</filename>.
</para>
<para>
Jednak <emphasis>przed</emphasis> w³±czeniem i zmian± nazw parametry mog± byæ poddane
przekszta³ceniom opisanym przez elementy sk³adowe elementu
<emphasis>config</emphasis> - <emphasis>remove</emphasis>,
<emphasis>regexp</emphasis> i <emphasis>attribute</emphasis>.
Wszystkie te elementy maj± wymagany atrybut <emphasis>xpath</emphasis>, zawieraj±cy
wyra¿enie XPath opisuj±ce elementy, które maj± byæ poddane przekszta³ceniom.
Wyra¿enia XPath maj± dostêp do przestrzeni nazw IPK za pomoc± prefiksu
<emphasis>ipk</emphasis>.
<note>
<para>
XPath jest jêzykiem do wybierania fragmentów dokumentu XML, maj±cym status
standardu W3C. Oficjalna strona to 
<ulink url="http://www.w3.org/TR/xpath">http://www.w3.org/TR/xpath</ulink>.
W sieci mo¿na znale¼æ wiele przyk³adów i samouczków. Oto kilka 
podstawowych przyk³adów:
<itemizedlist>

<listitem><para>
<filename>//ipk:param</filename> - wszystkie elementy param z dokumentu.
</para></listitem>

<listitem><para>
<filename>//ipk:drawdefinable/ipk:param </filename> - wszystkie elementy
param bêd±ce dzieæmi elementu drawdefinable.
</para></listitem>

<listitem><para>
<filename>///ipk:device//ipk:param </filename> - wszystkie elementy
param maj±ce jako przodka (niekoniecznie bezpo¶redniego) element device.
</para></listitem>

<listitem><para>
<filename>//ipk:param[not(/ipk:define)] </filename> - wszystkie elementy
param nie maj±ce elementu potomnego define.
</para></listitem>

<listitem><para>
<filename>//ipk:param/ipk:draw/@title </filename> - atrybuty title wszystkich
elementów draw bêd±cych dzieæmi elementów param.
</para></listitem>

<listitem><para>
<filename>//ipk:draw[@prior] </filename> - elementy draw posiadaj±ce atrybut
prior.
</para></listitem>

<listitem><para>
<filename>//ipk:draw[contains(@title,'Komora')] </filename> - elementy draw,
których atrybut title zawiera napis <quote>Komora</quote>.
</para></listitem>

<listitem><para>
<filename>//ipk:param/ipk:define[@type='DRAWDEFINABLE']/@formula</filename>
- atrybuty formula wszystkich elementów define, które maj± atrybut type równy
DRAWDEFINABLE i s± dzieæmi elementów param
</para></listitem>

</itemizedlist>
</para>
</note>
</para>

<para>
Mo¿liwe s± trzy typy przekszta³ceñ:
<itemizedlist>

<listitem><para>Element <emphasis>remove</emphasis> powoduje usuniêcie
elementów wybranych elementów XML. Przyk³adowo, zwykle bêdziemy chcieli
usun±æ elementy <emphasis>raport</emphasis>, których i tak nie bêdziemy
wykorzystywaæ:
<programlisting>
<![CDATA[
<remove xpath="//ipk:raport"/>
]]>
</programlisting>
Mo¿emy te¿ usun±æ wybrane atrybuty:
<programlisting>
<![CDATA[
<remove xpath="//ipk:draw/@prior"/>
]]>
</programlisting>
</para></listitem>

<listitem><para>Element <emphasis>regexp</emphasis> pozwala na przekszta³cenie
zawarto¶ci elementu za pomoc± wyra¿enia regularnego (w praktyce odnosi siê to
tylko do zawarto¶ci atrybutów, gdy¿ elementy tekstowe i tak s± usuwane i
przeformatowywane w wynikowym dokumencie). Wyra¿enie regularne podawane jest
jako zawarto¶æ elementu i ma postaæ znan± z edytora vim lub programu sed -
znak 's', potem znak oddzielaj±cy, a nastêpnie wzorce dopasowuj±cy i
zastêpuj±cy, rozdzielone i zakoñczone znakiem oddzielaj±cym. We wzorcu
zastêpuj±cym mo¿emy odwo³ywaæ siê do ca³ego wyra¿enia (za pomoc±
<filename>\0</filename>) lub poszczególnych podwyra¿eñ (np. 
<filename>\1</filename>). 
Przyk³adowo
<programlisting>
<![CDATA[
<regexp xpath="//ipk:draw/@title">s#Komora(.*)#KM-1 \1#</regexp>
]]>
</programlisting>
spowoduje zast±pienie w atrybutach <emphasis>title</emphasis> pocz±tkowego
napisu 'Komora' napisem 'KM-1'. Identyczny efekt mo¿e byæ uzyskany przez nieco
prostsze wyra¿enie regularne:
<programlisting>
<![CDATA[
<regexp xpath="//ipk:draw/@title">s#^Komora#KM-1#</regexp>
]]>
</programlisting>
<note>
<para>Program u¿ywa biblioteki GNU Regex i rozszerzonych wyra¿eñ POSIX. W
starszych wersjach programu (wersje SZARP'a do 2.2.1294 w³±cznie) u¿ywana by³a
biblioteka POSIX Regex i aby dokonaæ podstawienia ca³y napis (np. warto¶æ
atrybutu) musia³ byæ dopasowany do wyra¿enia. Obecnie nie jest to wymagane -
podstawienie jest wykonywane na pierwszym znalezionym najd³u¿szym mo¿liwym
podci±gu pasuj±cym do zadanego wyra¿enia.
</para>
</note>
</para>
</listitem>
<listitem><para>Element <emphasis>attribute</emphasis> pozwala na dodanie do
elementu atrybutu o danej nazwie. Je¿eli istnia³ ju¿ atrybut o takiej nazwie,
to zostanie on usuniêty. Zawarto¶æ atrybutu mo¿e byæ ustalona na
sztywno przez podanie jej w atrybucie <emphasis>value</emphasis>:
<programlisting>
<![CDATA[
<attribute xpath="//ipk:draw[not(@prior)]" name="prior" value="099"/>
]]>
</programlisting>
W powy¿szym przyk³adzie elementy draw, które nie posiadaj± atrybutu prior
otrzymaj± taki atrybut, o warto¶ci "099".
</para><para>
Mo¿liwe jest te¿ ustalenie zawarto¶ci atrybutu przez skopiowanie innego
atrybutu, podanego jako wyra¿enie XPath w atrybucie <emphasis>copy</emphasis>,
przy czym obliczanie wyra¿enia zaczyna siê od elementu docelowego (podanego
jako atrybut <emphasis>xpath</emphasis>). Przyk³adowo:
<programlisting>
<![CDATA[
<attribute xpath="//ipk:param[not(@draw_name)]" name="draw_name" copy="@name"/>
]]>
</programlisting>
Elementy 'param' nie posiadaj±ce atrybutu 'draw_name' dostan± go z warto¶ci±
skopiowan± z atrybutu 'name' tego samego elementu.
</para></listitem>
</itemizedlist>
</para>

<para>
Przekszta³cenia s± stosowane w takiej kolejno¶ci w jakiej wyst±pi± w pliku,
mo¿na je wiêc ³±czyæ aby uzyskaæ ró¿norodne efekty.
</para>

<para>
Ostatecznie, w pliku konfiguracyjnym mo¿e wyst±piæ element
<emphasis>ipk:drawdefinable</emphasis>, zawieraj±cy dowoln± ilo¶æ parametrów
definiowalnych przegl±daj±cego, w postaci dok³adnie takiej, jak w dokumencie
IPK. Formu³y tych elementów maj± dostêp do ca³ej ³±czonej konfiguracji. Nale¿y
tylko pamiêtaæ o zmianie nazw parametrów z konfiguracji sk³adowych (poza
pierwsz±), oraz opatrywaniu wszystkich elementów prawid³owym prefiksem
przestrzeni nazw IPK.
</para>

<para>
Nastêpny rozdzia³ (<xref linkend="ipk-aggregate-templates">) opisuje dodatkowy
zaawansowany mechanizm, który mo¿e byæ wykorzystywany do tworzenia parametrów
definiowalnych za pomoc± szablonów.
</para>

</section> <!-- ipk-aggregate-config -->

<section id="ipk-aggregate-templates">
<title>Szablony parametrów definiowalnych</title>

<para>
Szablony s± mechanizmem pozwalaj±cym na tworzenie parametrów definiowalnych na
podstawie pozosta³ych obecnych w konfiguracji parametrów. Zarówno ilo¶æ
parametrów jak i ich atrybuty mog± byæ zale¿ne od danych obecnych w
konfiguracji.
</para>

<para>
Szablony mog± byæ obecne w elemencie <emphasis>ipk:drawdefinable</emphasis> i s±
przetwarzane równolegle z kopiowaniem pozosta³ych parametrów definiowalnych, a
wiêc po wszelkich innych przekszta³ceniach na konfiguracji. Istotna jest
kolejno¶æ wstawienia szablonu do parametrów definiowalnych - szablon ma dostêp
do parametrów zdefiniowanych przed nim (tak¿e za pomoc± innych szablonów),
natomiast parametry zdefiniowane po nim mog± korzystaæ z parametrów powsta³ych
w wyniku dzia³ania szablonu.
</para>

<para>
Szablon definiujemy przez element <emphasis>template</emphasis> o dwóch
atrybutach:
<itemizedlist>
<listitem><para><emphasis>xpath</emphasis> - (atrybut obowi±zkowy)
okre¶la zbiór elementów
<quote>bazowych</quote> dla szablonu. S± one traktowane jako pocz±tek
kontekstu przy dalszych wyra¿eniach XPath, a poza tym, co wa¿niejsze,
okre¶laj± ilo¶æ utworzonych parametrów. Dla ka¿dego elementu ze zbioru
okre¶lanego przez atrybut zostanie iteracyjnie przetworzona zawarto¶æ elementu
<emphasis>template</emphasis>.
</para></listitem>
<listitem><para><emphasis>name</emphasis> - (opcjonalny) s³u¿y jako komentarz
do szablonu, jego zawarto¶æ zostanie skopiowana do atrybutu
<emphasis>template</emphasis> z przestrzeni nazw
<emphasis>http://www.praterm.com.pl/SZARP/extra</emphasis>. Ma to na celu
u³atwienie debugowania konfiguracji - wiadomo, ¿e dany element w pliku
wynikowym powsta³ jako efekt dzia³ania szablonu i wiadomo jaki to by³ szablon.
</para></listitem>
</itemizedlist>
</para>

<para>
W elemencie <emphasis>template</emphasis> mo¿e byæ umieszczonych dowolna
ilo¶æ elementów <emphasis>variable</emphasis>, które okre¶laj± zmienne
pomocnicze, u¿ywane do tworzenia parametrów wynikowych. Zmienne s± globalne w
ca³ym dokumencie, mog± byæ wielokrotnie przedefiniowywane, za niezainicjowane 
zmienne podstawiane s± puste napisy. Odwo³ania do zmiennych mog± wystêpowaæ w
okre¶lonych, wymienionych w dokumentacji miejscach i maj± postaæ
<command>\n</command>, gdzie <emphasis>n</emphasis> jest numerycznym
identyfikatorem zmiennej (od 0 do 9).
Element
<emphasis>variable</emphasis> mo¿e mieæ nastêpuj±ce atrybuty:
<itemizedlist>
<listitem><para><emphasis>id</emphasis> - obowi±zkowy, numeryczny
identyfikator zmiennej</para></listitem>
<listitem><para><emphasis>xpath</emphasis> - opcjonalny atrybut zawieraj±cy
wyra¿enie XPath typu string, które zostanie podstawione jako warto¶æ zmiennej.
Je¿eli atrybutu nie bêdzie, to zmienna bêdzie pustym napisem. Obliczanie
wyra¿enia XPath zaczyna siê od wêz³a <quote>bazowego</quote>, czyli
zdefiniowanego przez atrybut <emphasis>xpath</emphasis> szablonu. Warto¶æ
wyra¿enia musi byæ typu string, je¿eli potrzeba, mo¿emy pos³u¿yæ siê dodatkowo
funkcj± XPath <emphasis>string()</emphasis>. W zawarto¶ci atrybutu
<emphasis>xpath</emphasis> s± tak¿e dokonywane podstawienia za zmienne (czyli,
w szczególno¶ci, zmienna mo¿e rekurencyjnie zale¿eæ od siebie).
</para></listitem>
</itemizedlist>
Zawarto¶æ elementu <emphasis>variable</emphasis> je¿eli nie jest pusta,
traktowana jest jako wyra¿enie regularne dokonuj±ce podstawieñ na warto¶ci
zmiennej otrzymanej na podstawie atrybutu <emphasis>xpath</emphasis>. Sposób
interpretacji wyra¿enia i dokonywania podstawieñ jest identyczny, jak dla
pozosta³ych elementów konfiguracji zagregowanej.
</para>
<para>
Wszystkie pozosta³e elementy wchodz±ce w sk³ad elementu
<emphasis>template</emphasis> i nie pochodz±ce z przestrzeni nazw
<emphasis>aggr</emphasis> s± rekurencyjnie kopiowane do dokumentu wyj¶ciowego.
Na zawarto¶ci atrybutów i elementów dokonywane jest podstawienie
zdefiniowanych wcze¶niej zmiennych za napisy
postaci <command>\n</command> gdzie <emphasis>n</emphasis> odpowiada
identyfikatorowi zmiennej, której warto¶æ chcemy podstawiæ.
<note>
<para>W dokumencie mog± wiêc wystêpowaæ odwo³ania typu na przyk³ad
<command>\1</command>. Napis taki, zale¿nie od miejsca wyst±pienia, mo¿e
oznaczaæ odwo³anie do zmiennej pomocniczej, albo podstawienie za fragment
wyra¿enia regularnego.</para>
</note>
</para>

<para>
Pomoc± w zrozumieniu dzia³ania mechanizmu mo¿e byæ nastêpuj±cy przyk³ad. 
Za³ó¿my, ¿e w konfiguracji
zagregowanej (po zastosowaniu wcze¶niejszych przekszta³ceñ) mamy zestaw
parametrów opisuj±cych energiê dostarczon± przez wêz³y cieplne, w MWh.
Parametry te maj± postaæ:
<programlisting>
<![CDATA[
<ipk:param name="Wêz³y:[nazwa wêz³a]:energia sumaryczna" short_name="Esum"
    draw_name="Energia sumaryczna" unit="MWh" base_ind="auto" prec="2">
  <ipk:draw title="Wêze³ [nazwa wêz³a]" min="0" max="2"/>
</ipk:param>
]]>
</programlisting>
Chcemy dodaæ do konfiguracji parametry podaj±ce t± sam± wielko¶æ (energia z
wêz³a) ale w GJ, a tak¿e parametr sumuj±cy wszystkie te warto¶ci. Mo¿emy tego
dokonaæ za pomoc± nastêpuj±cych dwóch szablonów:
<programlisting>
<![CDATA[
<ipk:drawdefinable>
    <template xpath="//ipk:param[starts-with(@name, '{chrw}') and
    ( contains(@name, ':Licznik energii CO') or
      ( contains(@name,':Licznik energii  CO'))
    ) and not (
      contains(@name, 'Licznik energii CO ') or
      contains(@name, 'CO+CWU')
    )]"
      name="Energia z wêz³ów - przeliczanie GJ na MWh">
      <variable id="0" xpath="string(./@name)"/>
      <variable id="1" xpath="string(./@name)">s#^.*$#\0 GJ#</variable>
      <variable id="2" xpath="string(./ipk:draw/@title)"/>
      <variable id="9" xpath="'\9 (\1) 0 N +'"/>
      <ipk:param name="\1" short_name="Esum" draw_name="Energia sumaryczna MWh"
        unit="GJ" prec="2">
        <ipk:define type="DRAWDEFINABLE" formula="(\0) 0 N 3600 / "/>
        <ipk:draw title="\0" min="0" max="7200"/>
      </ipk:param>
    </template>
    <template xpath="//ipk:drawdefinable" name="Energia z wêz³ów - suma MWh">
      <ipk:param name="Wêz³y:Definiowalne:suma energii z wêz³ów"
        short_name="ESum" draw_name="Sumaryczna energia z wêz³ów"
        unit="GJ" prec="2">
        <ipk:define type="DRAWDEFINABLE" formula="0 \9"/>
        <ipk:draw title="Wêz³y - wielko¶ci sumaryczne" min="0" max="20000"/>
      </ipk:param>
    </template>
  </ipk:drawdefinable>
]]>
</programlisting>
Pierwszy szablon wybiera interesuj±ce nas parametry (przyk³ad jest
rzeczywisty, wiêc zawiera kilka obej¶æ dla b³êdów literowych, takich jak
podwójne spacje w nazwach parametrów). Zmienna <emphasis>\0</emphasis> zawiera
nazwê parametru, zmienna <emphasis>\1</emphasis> nazwê parametru po
przekszta³ceniu wyra¿eniem regularnym (efekt dodania napisu <quote>GJ</quote>
na koñcu mo¿na oczywi¶cie osi±gn±æ pro¶ciej, nie korzystaj±c z wyra¿eñ
regularnych). Interesuj±ca jest natomiast zmienna <emphasis>\9</emphasis>,
która tworzy rekurencyjnie formu³ê zawieraj±c± sumê wszystkich parametrów.
Jest ona potem wykorzystywana do utworzenia parametru sumuj±cego wszystkie
poprzednie.
</para>

</section>

</section> <!-- ipk-aggregate -->

</chapter> <!-- ipk -->

<chapter id="define">
    <title>Sk³adnia formu³ parametrów definiowalnych</title>
    <para>
        Sk³adnia formu³ parametrów definiowalnych przyjmuje nieco ró¿n±
        postaæ w zale¿no¶ci od typu parametru (<emphasis>RPN</emphasis>,
	<emphasis>DRAWDEFINABLE</emphasis> lub <emphasis>LUA</emphasis>), w którym dana formu³a
        jest definiowana.
    </para>
    <section id="define-drawdefinable">
        <title>Sk³adnia formu³ typu DRAWDEFINABLE</title>
        <para>
            Formu³y typu DRAWDEFINABLE s± zapisywane jako formu³y
            matematyczne w odwrotnej notacji polskiej (ang. reverse polish
            notation - RPN). Oznacza to, i¿ przetwarzanie formu³y odbywa siê
            na stosie, na którym budowana jest jej reprezentacja. Wyst±pienie
            liczby (czy to podanej jako sta³a, czy to jako parametr z bazy
            danych SZARP-a) powoduje od³o¿enie jej na szczyt stosu, za¶ 
            wyst±pienie operatora powoduje zdjêcie ze stosu odpowiedniej liczby
            parametrów (zale¿nej od rodzaju operatora), wykonanie operacji
            odpowiadaj±cej danemu operatorowi, a nastêpnie od³o¿enie wyniku
            na szczyt stosu. Przyk³adowo sumê trzech liczb w RPN przedstawiæ
            mo¿na nastêpuj±co:
            <programlisting>
1 2 + 3 +
            </programlisting>
            W ten sposób wykonane zostanie dodanie liczby 1 do liczby 2, ich
            suma zostanie od³o¿ona na szczyt stosu, a nastêpnie do niej
            zostanie dodana liczba 3. Na kolejno¶æ wykonywania operacji
            mo¿na wp³ywaæ zmieniaj±c kolejno¶æ argumentów w formule.
            Powy¿szy przyk³ad mo¿na przepisaæ nastêpuj±co:
            <programlisting>
1 2 3 + +
            </programlisting>
            W tym momencie na stos zostan± w kolejno¶ci od³o¿one liczby 1, 2
            i 3 (na szczycie stosu bêdzie znajdowaæ siê liczba 3), nastêpnie
            zostanie wykonane dodawanie liczb 2 i 3, a do ich sumy zostanie
            dodana liczba 1.
        </para>
        <para>
            W formu³ach typu DRAWDEFINABLE u¿ywaæ mo¿na nie tylko sta³ych
            liczbowych, ale tak¿e warto¶ci parametrów z bazy danych SZARP-a.
            W tym celu nale¿y podaæ nazwê danego parametru w nawiasach
            okr±g³ych. Je¶li która¶ z czê¶ci oddzielonych dwukropkami
            pokrywa siê z nazw± parametru definiowalnego, w którym
            definiujemy dan± formu³ê, mo¿na dla wygody zast±piæ j± znakiem
            *. Na przyk³ad je¿eli definiujemy parametr o nazwie "Kocio³
            1:Sterownik:stosunek energia/masa", mo¿na formu³ê zapisaæ
            nastêpuj±co:
            <programlisting>
(Kocio³ 1:Sterownik:stosunek energia/objêto¶æ) (Kocio³ 1:Sterownik:masa nasypowa wêgla) / 1000 *
            </programlisting>
            Jest to równowa¿ne skróconemu zapisowi nastêpuj±cej postaci:
            <programlisting>
(*:*:stosunek energia/objêto¶æ) (*:*:masa nasypowa wêgla) / 1000 *
            </programlisting>
        </para>
        <para>
            Formu³y DRAWDEFINABLE daj± mo¿liwo¶æ skorzystania z bardzo
            bogatego zestawu operatorów. Oprócz standardowych operatorów
            matematycznych (+, -, *, /) dostêpne s± nastêpuj±ce operatory
            maj±ce specjalne znaczenie:
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>&</emphasis> - zamienia miejscami dwa
                        parametry na szczycie stosu,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>!</emphasis> - powiela parametr ze szczytu
                        stosu,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>$</emphasis> - oznacza wywo³anie funkcji,
                        której numer podany jest na szczycie stosu, liczba
                        argumentów podawana jest jako drugi od góry element
                        stosu, a argumenty s± kolejnymi elementami na
                        stosie, przetwarzanymi w kolejno¶ci od parametru
                        najni¿ej na stosie do parametru najwy¿ej na stosie;
                        dostêpne funkcje to:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>0</emphasis> - przyjmuje trzy
                                    argumenty; zwraca wspó³czynnik Fi,
                                    przez który nale¿y pomno¿yæ aktualn±
                                    moc obliczeniow± obiektu, aby
                                    otrzymaæ moc dla zadanych warunków
                                    atmosferycznych; warunki
                                    atmosferyczne podaje siê w postaci
                                    trzech argumentów: aktualnej
                                    pogody (dozwolone warto¶ci to: 0 -
                                    pochmurno, 1 - zmiennie, 2 -
                                    s³onecznie), prêdko¶ci wiatru (w
                                    m/s) oraz temperatury zewnêtrznej
                                    (czy to aktualnej czy ¶redniej z
                                    jakiego¶ okresu historycznego);
                                    funkcja ta uwzglêdnia jedynie
                                    potrzeby na CO - potrzeby CWU nie s±
                                    uwzglêdnione, gdy¿ s± one bardzo
                                    trudne do przewidzenia; wspó³czynnik
                                    zwracany przez t± funkcjê jest
                                    analogiczny do wspó³czynników, które
                                    umieszczane by³y kiedy¶ w tabelach
                                    okre¶laj±cych sposób prowadzenia
                                    systemu ciep³owniczego w zale¿no¶ci
                                    od warunków atmosferycznych (np.
                                    tabele opracowane przez Ministerstwo
                                    Gospodarki Materia³owej i Paliwowej
                                    w "Zasadach ustalania temperatur wody
                                    sieciowej w ¼ród³ach ciep³a i
                                    sieciach ciep³owniczych" z 1987r.),
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>1</emphasis> - przyjmuje jeden
                                    argument; zwraca temperaturê zasilania
                                    dla podanego wspó³czynnika Fi wg
                                    poni¿szej krzywej:
                                    <mediaobject>
                                            <imageobject> 
                                                    <imagedata
                                                        fileref="pics/Tz.png">
                                            </imageobject>
                                    </mediaobject>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>2</emphasis> - przyjmuje jeden
                                    argument; zwraca temperaturê wody
                                    powrotnej dla podanego wspó³czynnika
                                    Fi wg poni¿szej krzywej:
                                    <mediaobject>
                                            <imageobject> 
                                                    <imagedata
                                                        fileref="pics/Tp.png">
                                            </imageobject>
                                    </mediaobject>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>3</emphasis> - przyjmuje jeden
                                    argument; dla argumentów dodatnich
                                    zwraca warto¶æ argumentu, a dla
                                    ujemnych warto¶æ 0,
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>4</emphasis> - przyjmuje co
                                    najmniej dwa argumenty, przy czym
                                    pierwszy z nich oznacza rzeczywist±
                                    liczbê argumentów po nim wystêpuj±cych;
                                    zwraca sumê tych z podanych parametrów,
                                    które nie maj± warto¶ci NO_DATA,
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>5</emphasis> - przyjmuje co
                                    najmniej dwa argumenty, przy czym
                                    pierwszy z nich oznacza rzeczywist±
                                    liczbê argumentów po nim wystêpuj±cych;
                                    zwraca liczbê parametrów, które nie maj±
                                    warto¶ci NO_DATA,
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>6</emphasis> - przyjmuje jeden
                                    argument; dla procentowo podanego
                                    wype³nienia zbiornika o kszta³cie
                                    walca (taki kszta³t maj± zbiorniki
                                    odgazowywacza, których wype³nienie
                                    mo¿e byæ liczone przy u¿yciu tej
                                    funkcji) funkcja zwraca objêto¶æ
                                    wody w nim siê znajduj±cej wg
                                    poni¿szej zale¿no¶ci:
                                    <mediaobject>
                                            <imageobject> 
                                                    <imagedata
                                                        fileref="pics/HV.png">
                                            </imageobject>
                                    </mediaobject>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>7</emphasis> - przyjmuje dwa
                                    argumenty; z liczby podanej jako
                                    pierwszy argument zwraca bit o numerze
                                    podanym jako drugi argument.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>#</emphasis> - odk³ada na szczyt stosu
                        jednocyfrow± warto¶æ podan± bezpo¶rednio (bez
                        spacji) za operatorem i ignoruje wszystkie znaki a¿
                        do wyst±pienia nastêpnej spacji,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>?f</emphasis> - wyra¿enie warunkowe: je¶li
                        element ze szczytu stosu ma warto¶æ 0, zwracana jest
                        warto¶æ wystêpuj±ca na drugiej pozycji od góry
                        stosu, w przeciwnym wypadku zwracana jest warto¶æ
                        wystêpuj±ca na trzeciej pozycji od góry stosu,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>&gt;</emphasis> - operator porównania
                        wiêkszo¶ciowego: zwraca 1 je¶li druga od góry
                        warto¶æ na stosie jest wiêksza ni¿ warto¶æ na
                        szczycie stosu, a 0 w przeciwnym wypadku,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>&lt;</emphasis> - operator porównania
                        mniejszo¶ciowego: zwraca 1 je¶li druga od góry
                        warto¶æ na stosie jest mniejsza ni¿ warto¶æ na
                        szczycie stosu, a 0 w przeciwnym wypadku,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>~</emphasis> - operator porównania
                        równo¶ciowego: zwraca 1 je¶li warto¶æ ze szczytu
                        stosu jest równa drugiej od góry warto¶ci na
                        stosie, a 0 w przeciwnym wypadku,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>:</emphasis> - sk³ada bitowo dwa górne
                        elementy ze szczytu stosu w jeden o podwójnej
                        d³ugo¶ci: parametr ze szczytu stosu jest
                        traktowany jako mniej znacz±ce s³owo warto¶ci
                        wynikowej, a kolejny parametr jako jej bardziej
                        znacz±ce s³owo,
                    </para>
                    <note>
                        <para>
                            <emphasis>Nie nale¿y</emphasis> u¿ywaæ
                            operatora <emphasis>:</emphasis> w
                            po³±czeniu z innymi operatorami, gdy¿ powoduje
                            to niepoprawne wyliczanie warto¶ci formu³y
                            definiowalnej. Je¿eli zachodzi konieczno¶æ
                            wykonania jakich¶ operacji na warto¶ci
                            powsta³ej przez z³o¿enie bitowe dwóch
                            parametrów, nale¿y to zrobiæ dwuetapowo: po
                            pierwsze zdefiniowaæ parametr, który bêdzie
                            s³u¿y³ tylko do z³o¿enia tych warto¶ci, a
                            nastêpnie dopiero jego warto¶æ wykorzystywaæ
                            w dalszych obliczeniach.
                        </para>
                    </note>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>^</emphasis> - operator potêgowania:
                        podstaw± jest element ze szczytu stosu, a
                        wyk³adnikiem drugi od góry element na stosie;
                        wyk³adnik <emphasis>musi</emphasis> byæ nieujemny,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>N</emphasis> - operator porównania z
                        warto¶ci± NO_DATA: je¶li element na szczycie stosu
                        ma warto¶æ NO_DATA, operator zwraca drug± od góry
                        warto¶æ na stosie, w przeciwnym wypadku zwracany
                        jest element ze szczytu stosu,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>X</emphasis> - zwraca warto¶æ NO_DATA,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>S</emphasis> - operator sezonu: zwraca
                        warto¶æ 1, je¶li aktualnie ciep³ownia pracuje w
                        trybie pracy sezonu letniego, a 0 w przeciwnym
                        wypadku.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section> <!-- define-drawdefinable -->
    <section id="define-rpn">
        <title>Sk³adnia formu³ typu RPN</title>
        <para>
            Sk³adnia formu³ typu RPN jest bardzo podobna do sk³adni formu³
            typu DRAWDEFINABLE (patrz <xref linkend="define-drawdefinable">). 
            Sposób ich obliczania jest identyczny, a jedyne ró¿nice
            wystêpuj± w dostêpnym zestawie funkcji. Ró¿nice te s±
            nastêpuj±ce:
            <itemizedlist>
                <listitem>
                    <para>
                        odpowiednikiem operatora <emphasis>?f</emphasis> z
                        formu³ typu DRAWDEFINABLE jest operator
                        <emphasis>if</emphasis>,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        wystêpuje dodatkowy operator <emphasis>n</emphasis>
                        oznaczaj±cy formu³ê pust± (tzn. bez ¿adnej warto¶ci,
                        nawet NO_DATA); dodatkowo operator ten powoduje
                        pominiêcie nastêpnych trzech znaków (z tego powodu
                        czêsto jest on zapisywany jako
                        <emphasis>null</emphasis>),
                    </para>
                </listitem>
                <listitem>
                    <para>
                        wystêpuje dodatkowy operator <emphasis>=</emphasis>
                        powoduj±cy zapisanie warto¶ci ze szczytu stosu jako
                        próbki do pamiêci wspó³dzielonej programu parcook pod
                        adres podany jako drugi od góry element na stosie; zapis
                        jest dokonywany tylko pod warunkiem, ¿e warto¶æ do
                        zapisu nie by³a warto¶ci± pust±,
                    </para>
                </listitem>
                <listitem>
                    <para>
			wystêpuje dodatkowy operator <emphasis>m</emphasis>, 
			s³u¿±cy do szybkiego odfiltrowania b³êdnych (za ma³ych)
			warto¶ci; je¶li drugi od góry element na stosie jest
			mniejszy ni¿ pierwszy od góry, to na stosie wstawiana jest
			warto¶æ NO_DATA; wpp. zostaje warto¶æ drugiego od góry
			elementu.
		     </para>
		     <para>Przyk³adowo:
			     <programlisting>(Sieæ:Sterownik:temperatura zasilania) 0 m</programlisting>
			     powy¿sza formu³a spowoduje ¿e je¶li warto¶æ parametru bêdzie mniejsza
			     od zera, to nie zostanie uwzglêdniona (pojawi siê warto¶æ brak danych).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        nie s± dostêpne operatory <emphasis>^</emphasis>,
                        <emphasis>X</emphasis>, <emphasis>S</emphasis> oraz
                        <emphasis>:</emphasis>,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        w zwi±zku z brakiem operatora
                        <emphasis>X</emphasis>, warto¶æ NO_DATA wyra¿a siê
                        poprzez podanie sta³ej liczbowej wynosz±cej -32768 -
                        nie jest zatem mo¿liwe u¿ywanie takiej liczby jako
                        s³u¿±cej do obliczeñ.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section> <!-- define-rpn -->
    <section id="define-examples">
        <title>Przyk³ady formu³ definiowalnych DRAWDEFINABLE</title>
        <para>
            Poni¿ej zaprezentowanych zostanie kilka przyk³adów formu³
            definiowalnych wraz z komentarzami. Prezentowana sk³adnia jest
            sk³adni± dla parametrów typu DRAWDEFINABLE, ale sposób
            formu³owania wzorów jest identyczny dla formu³ typu RPN. Dla
            czytelno¶ci formu³y zosta³y podzielone na wiele linii,
            jednak¿e w IPK nale¿y je wpisywaæ w jednej linii.
            <orderedlist>
                <listitem>
                    <para>
                        Sk³adanie dwóch parametrów z bazy SZARP-a w jeden
                        parametr o podwójnej d³ugo¶ci:
                        <programlisting>
(*:*:przep³yw aktualny msw) (*:*:przep³yw aktualny lsw) :
                        </programlisting>
                        Jest to bardzo przydatna mo¿liwo¶æ przy konieczno¶ci
                        przechowywania w bazie warto¶ci d³u¿szych ni¿ 16
                        bitów - dziêki operatorowi <emphasis>:</emphasis>
                        mo¿na na wykresie zaprezentowaæ rzeczywist±,
                        32-bitow± warto¶æ mimo, i¿ w bazie trzymana jest ona
                        jako dwa parametry o mniejszej d³ugo¶ci.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Ustalenie warto¶ci binarnej w zale¿no¶ci od wyniku
                        porównania:
                        <programlisting>
0 1 (Sieæ:Sterownik:moc odp³ywu 1) (*:*:Moc odciêcia TSWL) &lt; ?f
                        </programlisting>
                        Przyk³adowy parametr przyjmuje warto¶æ 0, je¶li dany
                        odp³yw pracuje z moc± mniejsz± od mocy odciêcia,
                        a 1 w przeciwnym wypadku. £atwo zauwa¿yæ, ¿e mo¿liwy
                        jest nastêpuj±cy zapis równowa¿ny:
                        <programlisting>
(Sieæ:Sterownik:moc odp³ywu 1) (*:*:Moc odciêcia TSWL) &gt;
                        </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Parametr przyjmuj±cy ró¿ne warto¶ci w lecie i w
                        zimie:
                        <programlisting>
200 100 S ?f
                        </programlisting>
                        Powy¿szy parametr przyjmie warto¶æ 200 w sezonie
                        zimowym, a warto¶æ 100 w sezonie letnim.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Zastêpowanie warto¶ci NO_DATA warto¶ci± 0:
                        <programlisting>
(*:*:Finansowa strata na Twy TSWL) 0 N 
(*:*:Finansowa strata energii przesy³u TSWL) 0 N +
                        </programlisting>
                        W przedstawionym przyk³adzie sumowane s± dwa
                        parametry, przy czym w przypadku ka¿dego z nich w
                        razie wyst±pienia warto¶ci NO_DATA, zastêpowana jest
                        ona warto¶ci± 0. Je¿eli liczba parametrów branych do
                        sumowania by³aby znacz±co wiêksza, warto by by³o
                        rozwa¿yæ skorzystanie z funkcji
                        <emphasis>4</emphasis> operatora
                        <emphasis>$</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Warunkowe nadawanie parametrowi warto¶ci NO_DATA:
                        <programlisting>
(*:*:Odchy³ka Twy) (*:*:QS_70) * 4 * 100 / X (*:*:Praca ciep³owni) ?f
                        </programlisting>
                        Przyk³adowy parametr przyjmuje rzeczywist± warto¶æ
                        tylko wtedy, gdy parametr "Praca ciep³owni" ma
                        warto¶æ 1, w przeciwnym wypadku przyjmuje warto¶æ
                        NO_DATA, co jest dobrym sposobem zasygnalizowania
                        wyst±pienia przypadku, w którym wyliczenie danego
                        parametru nie mia³oby sensu.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Sprawdzanie czy parametr przyjmuje konkretn±, z góry
                        ustalon± warto¶æ:
                        <programlisting>
(Sieæ:Przep³ywy:praca pompy przewa³owej nr 1) 0 &gt; 
(Sieæ:Przep³ywy:praca pompy przewa³owej nr 2) 0 &gt; 
+ 0 ~
                        </programlisting>
                        Powy¿szy przyk³ad pokazuje sposób na sprawdzenie czy
                        obie pompy jednocze¶nie nie pracuj± (jest to
                        rzeczywisty przyk³ad z konfiguracji jednego z
                        systemów ciep³owniczych i pozwala on na
                        stwierdzenie, czy zawór obej¶cia pomp przewa³owych
                        jest otwarty).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Warto¶æ parametru zale¿na od stanu konkretnego bitu
                        w innym parametrze:
                        <programlisting>
240 150 (*:*:zakodowany stan wej¶æ logicznych) 2 2 7 $ ?f
                        </programlisting>
                        W podanym przyk³adzie wywo³ywana jest funkcja numer
                        <emphasis>7</emphasis> operatora
                        <emphasis>$</emphasis> w celu wydobycia z
                        zakodowanego stanu wej¶æ logicznych stanu drugiego
                        bitu. Je¶li bit ten ma warto¶æ 1, to parametr
                        przyjmuje warto¶æ 240, w przeciwnym wypadku
                        przyjmuje warto¶æ 150. Powy¿szy przyk³ad równie¿
                        jest rzeczywistym przyk³adem zaczerpniêtym z
                        dzia³aj±cej konfiguracji jednego z systemów
                        ciep³owniczych - takie konstrukcje wykorzystywane s±
                        np. w celu interpretacji warto¶ci bêd±cych mapami
                        bitowymi przesy³anych przez regulatory.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Zliczanie parametrów nie maj±cych warto¶ci NO_DATA:
                        <programlisting>
3 (Paca 6:WCW:Przep³yw upustowy na wê¼le Paca 6) 
(WP-6:WCW:Przep³yw upustowy na wê¼le WP-6) (WP-3:WCW:Przep³yw upustowy na wê¼le WP-3) 
4 5 $
                        </programlisting>
                        W podanym przyk³adzie zliczanie odbywa siê na trzech
                        parametrach dla wiêkszej jego czytelno¶ci, jednak w
                        rzeczywistych przypadkach w konfiguracjach zazwyczaj
                        zliczanie przebiega na co najmniej kilkunastu
                        warto¶ciach.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Sumowanie du¿ej ilo¶ci parametrów:
                        <programlisting>
3 (WG-6:WCW:Przep³yw recyrkulacji na wê¼le WG-6) 
(WG-4:WCW:Przep³yw recyrkulacji na wê¼le WG-4) (WG-9:WCW:Przep³yw recyrkulacji na wê¼le WG-9) 
4 4 $
                        </programlisting>
                        W podanym przyk³adzie sumowanie odbywa siê na trzech
                        parametrach dla wiêkszej jego czytelno¶ci, jednak w
                        rzeczywistych przypadkach w konfiguracjach zazwyczaj
                        sumowanie przebiega na co najmniej kilkunastu
                        warto¶ciach.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Ograniczanie warto¶ci parametru tylko do warto¶ci
                        nieujemnych:
                        <programlisting>
(*:*:Przep³yw wody przez wêze³ WG-9) 
(*:WCO:Temp. wody powr. za obej¶ciem WG-9) (*:*:Temp. wody powr. przed obej¶ciem WG-9) - 
(*:*:Temperatura wody z ciep³owni WG-9) (*:WCO:Temp. wody powr. za obej¶ciem WG-9) - 
/ * 1 3 $
                        </programlisting>
                        W powy¿szym przyk³adzie wyliczana jest wydajno¶æ,
                        która z oczywistych wzglêdów nie mo¿e byæ ujemna,
                        wiêc jej warto¶æ zosta³a ograniczona tylko do
                        warto¶ci nieujemnych przy u¿yciu funkcji
                        <emphasis>3</emphasis> operatora
                        <emphasis>$</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Wyznaczanie prognozowanej zmiany temperatury w
                        nadchodz±cym okresie:
                        <programlisting>
(Klawiatura::Pogoda) (Klawiatura::Prêdko¶æ wiatru) 
(Klawiatura::¦rednia temperatura zewnêtrzna przedost doby) 
(Klawiatura::¦rednia temperatura zewnêtrzna ostatniej doby) 
(Klawiatura::¦rednia temperatura zewnêtrzna dla bie¿±cej doby) 
+ + 30 / 
3 0 $ 
1 1 $ 
10 * 
(Klawiatura::Pogoda) (Klawiatura::Prêdko¶æ wiatru) 
(Klawiatura::¦rednia temperatura zewnêtrzna przedost doby) 
(Klawiatura::¦rednia temperatura zewnêtrzna ostatniej doby) 
(Klawiatura::¦rednia temperatura zewnêtrzna dla bie¿±cej doby) 
+ + 30 / 
3 0 $ 
1 2 $ 
10 * - 
(Klawiatura::Przep³yw obliczeniowy) (Klawiatura::Przep³yw rzeczywisty) / 1 - * 2 / 
                        </programlisting>
                        W powy¿szym przyk³adzie prognozowana zmiana
                        temperatury w nadchodz±cym okresie wyliczana jest na
                        podstawie wspó³czynnika Fi (funkcja
                        <emphasis>0</emphasis> operatora
                        <emphasis>$</emphasis>), obliczonej temperatury
                        zasilania (funkcja <emphasis>1</emphasis> operatora
                        <emphasis>$</emphasis>) oraz powrotnej (funkcja
                        <emphasis>2</emphasis> operatora
                        <emphasis>$</emphasis>).
                    </para>
                </listitem>
            </orderedlist>
        </para>
    </section> <!-- define-examples -->

<section id="draw-definable-lua">
<title>Parametry definiowalne LUA</title>

<para>
Parametry definiowalne <ulink url="http://www.lua.org/">LUA</ulink> s±
odpowiednikiem parametrów definiowalnych pozwalaj±cym na zapisanie formu³
parametrów w postaci skryptów jêzyka LUA. Skrypt mo¿e mieæ dowoln± zawarto¶æ, np.
mo¿na u¿ywaæ zmiennych pomocniczych (co nie jest dostêpne w 'zwyk³ych' 
definiowalnych), pêtli, wyra¿eñ warunkowych etc. Celem skryptu jest 
przypisanie warto¶ci zmiennej v, która 
jest interpretowana jako warto¶æ wyliczonego parametru. Dok³adne odbywa siê to poprzez
wywo³anie poni¿szego kodu:
<programlisting>
return function ()                            
       local p = szbase                       
       local PT_MIN10 = ProbeType.PT_MIN10    
       local PT_HOUR = ProbeType.PT_HOUR      
       local PT_HOUR8 = ProbeType.PT_HOUR8    
       local PT_DAY = ProbeType.PT_DAY        
       local PT_WEEK = ProbeType.PT_WEEK      
       local PT_MONTH = ProbeType.PT_MONTH    
       local PT_CUSTOM = ProbeType.PT_CUSTOM  
       local szb_move_time = szb_move_time    
       local state = {}                       
       return function (t,pt)                 
               local v = nil                  
....
skrypt zawieraj±cy formu³ê
....
		return v

		end                            
        end  
</programlisting>

</para>

<para>
Kolejn± cech± parametrów definiowalnych LUA jest to, i¿ zawsze operuj± na
liczbach zmiennoprzecinkowych w podwójnej precyzji, co jest udogodnieniem w
stosunku do 'zwyk³ych' definiowalnych. Cecha ta wystêpuje zarówno na poziomie
parametrów definiowalnych programu przegl±daj±cego, jak i programu parcook.
</para>

<para>
Parametry definiowalne LUA na poziomie programu
przegl±daj±cego pozwalaj± na znacznie wiêksz± swobodê ni¿ 
'zwyk³e' definiowalne. Miêdzy innymi dostêpna jest zmienna z przypisanym
czasem, dla którego wyliczana jest w³a¶nie próbka, co umo¿liwia wykorzystanie
jej do obliczeñ. Dodatkowo dostêpne s± dwa tryby wyliczania warto¶ci próbki.
Próbka mo¿e byæ wyliczona jako ¶rednia z zastosowania formu³y do ka¿dej próbki
oraz jako wynik zastosowania formu³y dla ¶rednich. Przyk³adowo, je¿eli wyliczamy
warto¶æ parametru definiowalnego LUA dla ¶redniej godzinowej, to w pierwszym 
przypadku zostanie wyliczona warto¶æ ka¿dej ¶redniej z dziesiêciu minut i wynik
zostanie u¶redniony, a w drugim bêdzie wyliczona bêdzie tylko warto¶æ dla 
¶redniej godzinowej.
</para>

<para>
Poni¿ej zamieszczona jest przyk³adowa formu³a parametru definiowalnego LUA:
<programlisting>
local tmp = 2
v = p("swid:Sieæ:Sterownik:temperatura z tabeli", t, pt, 0) * tmp
</programlisting>
Formu³a ta przypisuje zmiennej v (czyli warto¶ci zwracanej przez formu³ê) warto¶æ
parametru <emphasis>swid:Sieæ:Sterownik:temperatura z tabeli</emphasis> pomno¿on±
przez 2. Funkcja p s³u¿y do zwrócenia warto¶ci zadanego parametru. Kolejne argumenty
to: nazwa parametru, czas próbki (w tym przypadku równy czasowi próbki wyliczanej
formu³±), typ ¶redniej oraz okres ¶redniej w przypadku ¶redniej typu PT_CUSTOM 
(obecnie nie jest wykorzystywany). Zmienne tymczasowe s± poprzedzone s³owem kluczowym
<emphasis>local</emphasis>. Powoduje to, i¿ s± one zmiennymi lokalnymi dla tej formu³y.
Mo¿na u¿ywaæ zmiennych globalnych, ale jest to niezalecane ze wzglêdów wydajno¶ciowych.
</para>

<section id="draw-definable-lua-vars">
<title>Wykaz predefiniowanych zmiennych</title>
<para>
W skryptach LUA s± dostêpne nastêpuj±ce predefiniowane zmienne:
<itemizedlist>
	<listitem>
		<para>
		<emphasis>v</emphasis> - zmienna, pod któr± ma byæ zapisana wyliczona 
		warto¶æ formu³y.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>t</emphasis> - zmienna przechowuje czas, dla którego jest
		wyliczana warto¶æ formu³y. Niedostêpne na poziomie parcook.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>pt</emphasis> - zmienna przechowuje typ próbki, dla której
		jest wyliczana warto¶æ formu³y. Niedostêpne na poziomie parcook. 
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>state</emphasis> - jest to tablica, która zachowuje zawarto¶æ
		miêdzy kolejnymi wywo³aniami skryptu. Przyk³adowe u¿ycie:
		<programlisting>
if state['prev'] == nil then 
	v = 1
	state['prev'] = 1
elseif state['prev'] == 1 then
	v = 2
	state['prev'] = 2 
else
	v = nan()
	state['prev'] = nil
end
		</programlisting>
		Opis funkcji <emphasis>nan</emphasis> dostêpny jest w 
		<xref linkend="draw-definable-lua-functions">
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_MIN10</emphasis> - sta³a opisuj±ca typ próbki.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_HOUR</emphasis> - jak wy¿ej.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_HOUR8</emphasis> - jak wy¿ej.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_DAY</emphasis> - jak wy¿ej.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_WEEK</emphasis> - jak wy¿ej.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_MONTH</emphasis> - jak wy¿ej.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>PT_CUSTOM</emphasis> - jak wy¿ej.
		</para>
	</listitem>
</itemizedlist>
</para>
</section><!-- id="draw-definable-lua-vars -->
<section id="draw-definable-lua-functions">
<title>Wykaz dostêpnych funkcji</title>
<para>
W skryptach LUA dostêpne s± nastêpuj±ce funkcje:
<itemizedlist>
	<listitem>
		<para>
		<emphasis>p</emphasis> - funkcja zwraca warto¶æ innego parametru z bazy danych. 
		Kolejne parametry:
		<itemizedlist>
			<listitem>
			<para>
				nazwa parametru,
			</para>
			</listitem>
			<listitem>
			<para>
				czas próbki do pobrania,
			</para>
			</listitem>
			<listitem>
			<para>
				typ ¶redniej,
			</para>
			</listitem>
			<listitem>
			<para>
				okres ¶redniej w przypadku ¶redniej typu PT_CUSTOM
				(obecnie nie jest wykorzystywany).
			</para>
			</listitem>
		</itemizedlist>
		Przyk³ad wyliczaj±cy ¶redni± arytmetyczn± z dwóch parametrów: 
		<programlisting>
v = p("swid:Sieæ:Sterownik:temperatura wody powrotnej z sieci c.o.", t, pt, 0) 
v = v + p("swid:Sieæ:Sterownik:temperatura wody wyj¶ciowej do sieci c.o.", t, pt, 0)
v = v / 2
		</programlisting>
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>i</emphasis> - funkcja zwraca warto¶æ danego parametru podanego
		jako argument z pamiêci wspó³dzielonej. Dostêpna tylko w parametrach definiowalnych
		na poziomie programu parcook. Przyk³ad pobieraj±cy warto¶æ parametru z pamiêci 
		wspó³dzielonej:
		<programlisting>
v = i("Sieæ:Sterownik:temperatura wody powrotnej z sieci c.o.")
		</programlisting>
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>szb_move_time</emphasis> funkcja zwraca czas przesuniêty o 
		okre¶lon± liczbê okresów ¶redniej. Kolejne parametry:
		<itemizedlist>
			<listitem>
			<para>
				czas odniesienia,
			</para>
			</listitem>
			<listitem>
			<para>
				liczba okresów, o które nale¿y przesun±æ czas odniesienia 
				(dozwolone s± warto¶ci dodatnie i ujemne),
			</para>
			</listitem>
			<listitem>
			<para>
				typ ¶redniej,
			</para>
			</listitem>
			<listitem>
			<para>
				okres ¶redniej w przypadku ¶redniej typu PT_CUSTOM
				(obecnie nie jest wykorzystywany).
			</para>
			</listitem>
		</itemizedlist>
		Przyk³ad wyliczaj±cy warto¶æ danego parametru jako ¶redni± arytmetyczn±
		z 5 ostatnich warto¶ci:
		<programlisting>
local j = 5
local i = j
local tmptime = t
v = 0
while i > 0 do
    v = v + p("swid:Sieæ:Sterownik:temperatura wody powrotnej z sieci c.o.", tmptime, pt, 0) 
    i = i - 1
    tmptime = szb_move_time(tmptime, -1, pt, 0)
end
v = v / j
		</programlisting>

		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>szb_round_time</emphasis> - funkcja zwraca czas zaokr±glony do 
		odpowiedniego typu ¶redniej.
		Kolejne parametry:
		<itemizedlist>
			<listitem>
			<para>
				czas do zaokr±glenia,
			</para>
			</listitem>
			<listitem>
			<para>
				typ ¶redniej,
			</para>
			</listitem>
			<listitem>
			<para>
				okres ¶redniej w przypadku ¶redniej typu PT_CUSTOM
				(obecnie nie jest wykorzystywany).
			</para>
			</listitem>
		</itemizedlist>
		Przyk³ad wyznaczaj±cy parametr jako warto¶æ z pocz±tku miesi±ca:
		<programlisting>
local tmptime = szb_round_time(t, PT_MONTH, 0)
v = p("swid:Sieæ:Sterownik:temperatura wody powrotnej z sieci c.o.", tmptime, PT_MONTH, 0)
		</programlisting>
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>szb_search_first</emphasis> - funkcja zwraca czas wyst±pienia pierwszej 
		warto¶ci podanego jako argument parametru.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>szb_search_last</emphasis> - funkcja zwraca czas wyst±pienia ostatniej
		warto¶ci podanego jako argument parametru.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>isnan</emphasis> - sprawdza, czy podana jako argument liczba,
		jest prawid³ow± warto¶ci± liczbow±.
		</para>
	</listitem>
	<listitem>
		<para>
		<emphasis>nan</emphasis> - zwraca niepoprawn± warto¶æ liczbow±. 
		Przyk³ad u¿ycia isnan i nan:
		<programlisting>
local pv = i("swid:Sieæ:Sterownik:temperatura wody powrotnej z sieci c.o.")
if isnan(pv) then
	v = 0
elseif pv == 1 then
	v = 1
else
	v = nan()
end
		</programlisting>
		</para>
	</listitem>
</itemizedlist>
</para>
</section><!-- draw-definable-lua-functions -->
<section id="draw-definable-lua-examples">
<title>Przyk³ady wpisów w params.xml</title>
<para>
Poni¿ej zamieszczony jest przyk³ad wpisu w params.xml (sekcja drawdefinable)
definiuj±cy parametr LUA na poziomie programu przegl±daj±cego:

<programlisting>
<![CDATA[
<param name="Lua:param:test" short_name="lt" draw_name="Lua param test" unit="-" prec="0">
	<define type="LUA" lua_formula="av" lua_start_offset="604800" lua_end_offset="604800"
		lua_start_date_time="2004-08-24 15:00">
        	<script>
		<![CDATA[
			v = p("swid:Sieæ:Sterownik:sumaryczna objêto¶æ wêgla do kot³a", szb_move_time(t, -1, pt) , pt)
		]]]]><![CDATA[>
		</script>
	</define>
	<draw title="Lua" color="white" min="0" max="25" order="10"/>
</param>
]]>
</programlisting>
Dozwolonymi warto¶ciami atrybutu <emphasis>lua_formula</emphasis> s±:
<itemizedlist>
	<listitem><para> <emphasis>av</emphasis> - warto¶æ parametru jest wynikiem zastosowania
	formu³y dla ¶rednich. </para></listitem>
	<listitem><para> <emphasis>va</emphasis> - warto¶æ parametru jest liczona jako
	¶rednia z zastosowania formu³y dla ka¿dej próbki. </para></listitem>
</itemizedlist>

Przedzia³ czasowy, dla którego wyliczane s± warto¶ci parametru LUA mo¿na okre¶liæ
przy pomocy poni¿szych parametrów <emphasis>lua_start_offset</emphasis> i <emphasis>lua_end_offset</emphasis>.
Zawieraj± one liczbê sekund przesuniêcia pocz±tku i koñca przedzia³u czasu, dla którego wyliczany 
jest parametr definiowalny LUA. Domy¶lnie pocz±tkiem tego przedzia³u jest czas najstarszej
warto¶ci parametru w bazie, a koñcem czas najm³odszej warto¶ci w bazie. W tym przypadku wykorzystany
jest parametr <emphasis>lua_start_date_time</emphasis>, który zmienia pocz±tek przedzia³u czasowego
na 2004-08-24 15:00. Format daty to YYYY-MM-DD HH-mm i jest on interpretowany jako czas UTC.
</para>

<para>
Natomiast poni¿ej podany jest przyk³ad wpisu w params.xml (sekcja defined) dotycz±cego parametru 
definiowalnego LUA na poziomie programu parcook:
<programlisting>
<![CDATA[
<param name="Lua:Param:flipflop" short_name="FF" draw_name="Flip flop" unit="-" prec="0" base_ind="auto">
	<define type="RPN" formula="null">
		<script>
		<![CDATA[
			local pv = i("Lua:Param:flipflop")
			if isnan(pv) then
				v = 1
			elseif pv == 1 then
				v = 2
			else
				v = nan()
			end
		]]]]><![CDATA[>
		</script>
	</define>
	<draw title="Przyk³ad formu³y LUA w programie parcook" min="0" max="10" order="4"/>
</param>
]]>
</programlisting>
Nale¿y zwróciæ uwagê na to, i¿ atrybut <emphasis>type</emphasis> ma warto¶æ "RPN", a 
<emphasis>formula</emphasis> "null". 
</para>

</section><!-- draw-definable-lua-examples -->
</section><!-- draw-definable-lua -->



</chapter> <!-- define -->

<chapter id="szbase">
<title>Format bazy SzarpBase</title>

<abstract>

<para><emphasis>SzarpBase</emphasis> to nazwa nowego formatu bazy danych
historycznych SZARP. Zastosowano prosty format plikowy, który ma u³atwiæ
operacje na bazie (kopiowanie, modyfikacjê i usuwanie danych), upro¶ciæ
aplikacje korzystaj±ce z bazy a tak¿e uniezale¿niæ system SZARP od ostatniego
komercyjnego elementu, jakim by³a biblioteka CodeBase.
</para>

</abstract>

<section id="szbase-format">
<title>Format plików bazy</title>

<para>
Baza jest trzymana w drzewie katalogów o strukturze
<filename>Grupa/Jednostka/Parametr</filename>, gdzie Grupa, Jednostka i
Parametr to odpowiednie czê¶ci pe³nej nazwy parametru.
Ka¿dy plik zawiera dane o próbkach 10-minutowych jednego parametru z jednego
miesi±ca. Nazwa pliku jest tworzona na podstawie daty (roku i miesi±ca),
którego dotycz± dane.
</para>

<para>
Pe³na ¶cie¿ka do pliku bazy sk³ada siê z:
<orderedlist>
<listitem><para>
<emphasis>Nazwy parametru poddanej konwersji</emphasis> - wszystkie znaki ASCII o kodach
spoza zakresów 48 (0) - 49 (9),  65 (A) - 90 (Z), 97 (a) - 122 (z) (czyli
wszystko poza cyframi i literami alfabetu ³aciñskiego) zamieniane s± na znak o
kodzie 64 (_), poza polskimi literami, które zamieniane s± na odpowiedniki z
alfabetu angielskiego (np. '±' na 'a' itp.) i poza znakiem ':' który
zamieniany jest na '/'.
</para>
</listitem>

<listitem><para>
Znaku <emphasis>/</emphasis>.
</para></listitem>

<listitem><para>
<emphasis>Daty</emphasis> (miesi±ca) w formacie RRRRMM, gdzie RRRR to rok (cztery cyfry), a
MM to miesi±c (dwie cyfry).
</para></listitem>

<listitem><para>
Kropki (<emphasis>.</emphasis>).
</para></listitem>

<listitem><para>
Rozszerzenia <emphasis>szb</emphasis>.
</para></listitem>

</orderedlist>
Przyk³adowo 
informacje o parametrze <emphasis>Kocio³ 1:Sterownik:temperatura
zadana</emphasis> z lutego 2003
roku bêd± trzymane w pliku o ¶cie¿ce dostêpu
<filename>Kociol_1/Sterownik/temperatura_zadana/200302.szb</filename>.
</para>
<para>
<emphasis>UWAGA! Sposób konwersji wymusza ostrzejsze wymagania dotycz±ce nazw parametrów
ni¿ sam format konfiguracji IPK - musz± one byæ ró¿ne tak¿e po
konwersji!</emphasis>
</para>

<para>
Wszystkie daty dotycz±ce bazy odnosz± siê do strefy czasowej Greenwich (UTC).
</para>

<para>
Ka¿dy plik sk³ada siê tablicy liczb typu short int (2 bajty, Little Endian) 
ze znakiem, bêd±cych warto¶ciami próbek parametru. Tablica mo¿e mieæ d³ugo¶æ 
tak±, ile próbek mie¶ci siê w danym miesi±cu, np. dla lutego 2003 (28 dni) i próbek
10-minutowych bêdzie to 6*24*28 = 4032 liczb. Specjalna warto¶æ -32768 oznacza
brak danych. Danych na koñcu pliku mo¿e brakowaæ, 'dziury' w ¶rodku musz± byæ
wype³niane warto¶ci± -32768. Z formatu pliku nie wynika bezpo¶rednio, co ile
zbierane s± próbki. W bazie nie s± zapisywane ¿adnego rodzaju ¶rednie.
</para>

<para>
Standardowo baza w nowym formacie znajduje siê w katalogu
<filename>/opt/szarp/prefix/szbase</filename>.
</para>


</section> <!-- szbase-format -->

<section id="szbase-conv">
<title>Konwersja bazy na nowy format</title>

<para>Konwersja istniej±cej bazy danych na nowy format nie jest trudna.
Czynno¶ci do wykonania na serwerze to po kolei:

<orderedlist>

<listitem><para>
<emphasis>Instalacja najnowszej wersji SZARP</emphasis> - starsze mog± nie
obs³ugiwaæ nowego formatu bazy lub posiadaæ nieusuniête b³êdy. Upgrade SZARP'a
bêdzie te¿ zwykle potrzebny wszêdzie, gdzie baza ma byæ ogl±dana.
</para></listitem>

<listitem><para>
<emphasis>Wy³±czenie parstarta</emphasis> - zalecane, bêdziemy operowaæ na bazie 
i konfiguracji. Ca³a operacja nie powinna trwaæ zbyt d³ugo, wiêc dziura w
bazie raczej nie powinna przekroczyæ 1 lub 2 próbek.
</para></listitem>

<listitem><para>
<emphasis>Konwersja bazy</emphasis> - uruchamiamy program
<application>cb2szb</application>, je¿eli trzeba to z odpowiedni± opcj±
'-Dprefix=nazwa'. Program wypisuje stopieñ zaawansowania konwersji.
Stara baza nie jest kasowana. Konwersjê mo¿na przerwaæ w dowolnej chwili,
program wypisze wtedy tak zwany znacznik czasowy (timestamp), który mo¿na u¿yæ
wraz z opcj± '-t' do kontynuowania konwersji w momencie kiedy zosta³a
przerwana. W przypadku b³êdów w bazie nale¿y uruchomiæ program z prze³±cznikiem
'-m', spowoduje to zast±pienie b³êdnych próbek 10-minutowych 
warto¶ciami ¶rednimi (8-godzinnymi lub - gdyby te tak¿e okaza³y siê b³êdne - dziennymi).

</para>
<para>
Aby unikn±æ konieczno¶ci przesy³ania ca³ej wygenerowanej nowej bazy przez
mechanizm BODAS, mo¿na konwersjê równolegle uruchomiæ na innych komputerach,
gdzie baza ma byæ przegrana, np. na serwerze praterm.com.pl.
</para>
<para>Na uszkodzonej bazie sztu zaobserwowano objaw w postaci utworzenia
plików o dacie z 1969 roku. Pliki te nale¿a³o skasowaæ, aby dzia³a³ program
przegl±daj±cy.
</para></listitem>


<listitem><para>
<emphasis>Zmiana indeksów na "auto".</emphasis> Operacja ta jest opcjonalna,
ale pozbycie siê tradycyjnych indeksów by³o jednym z powodów powstania nowego
formatu bazy, wiêc warto to zrobiæ. Wszystkie warto¶ci atrybutów
<emphasis>base_ind</emphasis> w pliku konfiguracyjnym
<filename>params.xml</filename> nale¿y zamieniæ na
<emphasis>"auto"</emphasis>. Od tego momentu na konfiguracji nie mo¿na ju¿
wywo³ywaæ <application>szarp2ipk</application> - zobacz te¿ 
<xref linkend="konf-ipk">. Nastêpnie mo¿na wygenerowaæ konfiguracjê w formacie
SZARP 2.1 za pomoc± <application>ipk2szarp</application> (bez opcji '-o'!).
</para></listitem>

<listitem><para>
<emphasis>Zmiana konfiguracji parstart.cfg.</emphasis> Plik
<filename>/etc/szarp/parstart.cfg</filename> nale¿y zmodyfikowaæ tak, aby
zamiast programu <application>meaner</application> uruchamiany by³
<application>meaner3</application> - odpowiednie zmienne powinny mieæ warto¶æ:
<programlisting>
MEANER=0
MEANER3=1
</programlisting>
</para></listitem>

<listitem><para>
<emphasis>Kontrola poprawno¶ci szarp.cfg.</emphasis> Plik
<filename>/etc/szarp/szarp.cfg</filename> powinien zawieraæ deklaracje
parametrów wymaganych przez program <application>meaner3</application> oraz
program przegl±daj±cy korzystaj±cy z nowej bazy. Najpro¶ciej osi±gn±æ to przez
upewnienie siê, ¿e na pocz±tku pliku znajduje siê dyrektywa
<emphasis>$include</emphasis> wczytuj±ca najnowsz± wersjê pliku
<filename>szarp_in.cfg</filename>. Warto sprawdziæ tak¿e, czy mechanizm BODAS
przegra katalogi <filename>szbase</filename>.
</para></listitem>

<listitem><para>
<emphasis>Ponowne uruchomienie parstarta.</emphasis> I to powinno byæ
wszystko. W razie czego informacji o przyczynach b³êdów nale¿y szukaæ w
logach. Zobacz te¿ <xref linkend="meaner3">.
</para>
</listitem>

</orderedlist>

</para>

</section> <!-- szbase-conv -->

<section id="szbase-extrszb">
<title>Program <application>extrszb</application></title>

<abstract>
<para>Program <application>extrszb</application> jest tekstowym narzêdziem
s³u¿±cym do odczytywania danych z bazy w formacie SzarpBase i konwersji ich do
postaci, która mo¿e byæ wczytana przez arkusz kalkulacyjny.
</para>
</abstract>

<para>
Program <application>extrszb</application> pozwala na wczytanie danych z bazy
w formacie SzarpBase do arkusza kalkulacyjnego. Jest to narzêdzie uruchamiane
z linii poleceñ. Argumentami programu s± nazwy parametrów, dla których maj±
zostaæ odczytane dane. Program wypisuje wyniki dzia³ania na standardowe
wyj¶cie lub do zadanego pliku. Na wyj¶ciu program produkuje tabelê, której 
kolumny odpowiadaj± parametrom, a w wierszach znajduj± siê kolejne warto¶ci 
próbek parametrów - wiersze s± posortowane po czasie. Odczytywanie
parametrów z bazy mo¿na przerwaæ przez wci¶niêcie <command>Ctrl-C</command>.
Opcje i argumenty mog± byæ podane w dowolnej kolejno¶ci, chyba ¿e co¶ innego
wynika z ich opisów.

Mo¿liwe s± nastêpuj±ce:
<note><para>
Najbardziej aktualny spis mo¿liwych opcji mo¿na uzyskaæ uruchamiaj±c program z opcji± <option>--help</option>.
</para></note>

<itemizedlist>

<listitem><para>
<emphasis role="bold">Wybór parametrów</emphasis>
</para>
<para>
Wyboru parametrów mo¿na dokonaæ na jeden z dwóch sposobów:
<itemizedlist>
<listitem><para>
Podaj±c pe³ne nazwy parametrów jako <emphasis role="bold">argumenty</emphasis> do programu.
Mo¿na podaæ dowoln± liczbê parametrów. Poniewa¿ w wiêkszo¶ci wypadków nazwy
parametrów zawieraj± spacje, trzeba zamkn±æ je w cudzys³owy.
</para></listitem>

<listitem><para>
U¿ywaj±c opcji <command>--file=&lt;NAME&gt;</command> lub <command>-f
&lt;NAME&gt;</command>, której argumentem jest nazwa pliku zawieraj±cego nazwy
parametrów, po jednej nazwie na liniê. Opcjê mo¿na podaæ wiele razy i mo¿na j±
³±czyæ z podawaniem parametrów za pomoc± argumentów programu.
</para></listitem>

</itemizedlist>
Program sprawdza czy parametry o podanych nazwach istniej± w konfiguracji,
je¿eli nie, wypisuje komunikat o nazwie b³êdnego parametru i koñczy dzia³anie
z b³êdem. Konieczne jest podanie przynajmniej jednego parametru, za pomoc±
dowolnego z powy¿szych sposobów. Niepodanie ¿adnego parametru powoduje
zakoñczenie programu z b³êdem.
</para></listitem>

<listitem><para>
<emphasis role="bold">Wybór zakresu czasowego</emphasis>
</para>
<para>Zakres czasu dla jakiego maj± byæ wypisane dane mo¿na okre¶liæ na jeden
z dwóch sposobów - albo podaj±c czas pocz±tkowy i koñcowy, albo okre¶laj±c
miesi±c dla jakiego maj± byæ wypisane dane. Podanie zakresu czasowego na jeden
z tych sposobów jest wymagane.
<itemizedlist>

<listitem><para>
Opcja <command>--date-format=&lt;STRING&gt;</command> lub <command>-D
&lt;STRING&gt;</command> okre¶la format, w jakim ma byæ podana data dla opcji
<command>-s</command> i <command>-e</command>. Format powinien byæ zgodny z
zawartym w opisie funkcji <emphasis>strptime</emphasis> (zobacz <command>man
strptime</command>). Domy¶lnie jest to <quote>%Y-%m-%d %H:%M</quote>,
czyli data podawana jest w postaci np. <quote>2004-03-11 23:50</quote>. Format
dotyczy opcji które wystêpuj± w linii komend za nim, a przed kolejn± zmian±
formatu. W ten sposób mo¿na podaæ ró¿ne formaty dla daty pocz±tkowej i
koñcowej (dwukrotnie u¿ywaj±c opcji <command>-D</command>).
</para></listitem>

<listitem><para>
Opcja <command>--start=&lt;DATE&gt;</command> lub <command>-s
&lt;DATE&gt;</command> okre¶la datê i czas pierwszej próbki, jaka zostanie
odczytana z bazy. Podana data mo¿e ulec zaokr±gleniu zale¿nie od za¿±danego
typu ¶redniej (np. je¿eli chcemy ¶rednie miesiêczne, liczyæ siê bêdzie tylko
podany rok i miesi±c). Je¿eli podamy t± opcjê, wymagana jest tak¿e opcja
<command>-e</command>. Format daty jest okre¶lany przez opcjê
<command>-D</command> lub domy¶lny (zobacz wy¿ej). Podany czas jest
interpretowany zgodnie ze stref± czasow± ustawion± w systemie operacyjnym.
</para></listitem>

<listitem><para>
Opcja <command>--end=&lt;DATE&gt;</command> lub <command>-e &lt;DATE&gt;
</command>okre¶la datê i czas pierwszej próbki, która <emphasis role="bold">nie zostanie
uwzglêdniona</emphasis> przy odczytywaniu danych. W przypadku próbek 10-minutowych 
nale¿y wiêc podaæ czas o 10 minut pó¼niejszy ni¿ ostatnia dana, jak± chcemy
odczytaæ. Podany czas musi byæ pó¼niejszy ni¿ podany czas pierwszej próbki,
tak¿e po zaokr±gleniu wynikaj±cym z typu za¿±danej ¶redniej.
Zobacz te¿ uwagi do poprzedniej opcji.
</para></listitem>

<listitem><para>
Opcja <command>--month=&lt;YYYYMM&gt;</command> lub <command>-m
&lt;YYYYMM&gt;</command> umo¿liwia podanie zakresu dat w alternatywny sposób.
Jej argumentem jest napis sk³adaj±cy siê z sze¶ciu cyfr okre¶laj±cych kolejno
rok a nastêpnie miesi±c, który nas interesuje - np. <quote>200311</quote> 
to listopad 2003 roku. Inaczej ni¿ w przypadku poprzednich opcji, czas nie
jest interpretowany wzglêdem ustawionej strefy czasowej. Wypisywana jest
zawarto¶æ pliku bazy SzarpBase odnosz±ca siê do próbek z podanego
miesi±ca, a wiêc czas odnosi siê do strefy Greenwich. St±d te¿ zale¿nie od
tego czy mamy do czynienia z czasem letnim czy zimowym, na wyj¶ciu mo¿emy
otrzymaæ próbki np. od godziny 1:00 pierwszego dnia miesi±ca, do godziny 0:50
pierwszego dnia nastêpnego miesi±ca (bo daty na wyj¶ciu podane s± w lokalnej
strefie czasowej).
</para></listitem>


</itemizedlist>
</para>

<para>
Opcji <command>-s</command> i <command>-e</command> nie mo¿na ³±czyæ z
<command>-m</command> - nale¿y wybraæ jeden ze sposobów okre¶lania zakresu
czasowego.
</para>
</listitem>

<listitem><para><emphasis role="bold">Typ wypisywanych próbek</emphasis>
</para>
<para>
<itemizedlist>
<listitem><para>
Opcja <command>--probe=&lt;TYPE&gt;</command> lub <command>-p
&lt;TYPE&gt;</command> okre¶la typ próbki (rodzaj ¶redniej), jaka bêdzie
wypisywana. Mo¿liwe s± nastêpuj±ce:
<itemizedlist>
<listitem><para><emphasis>10min </emphasis> - pojedyncza próbka, czyli ¶rednia
z 10 minut, jest to warto¶æ domy¶lna.
</para></listitem>

<listitem><para><emphasis>hour </emphasis>- ¶rednia godzinna.
</para></listitem>

<listitem><para><emphasis>8hour </emphasis>- ¶rednia z 8 godzin.
</para></listitem>

<listitem><para><emphasis>day </emphasis>- ¶rednia z dnia.
</para></listitem>

<listitem><para><emphasis>week </emphasis>- ¶rednia z tygodnia.
</para></listitem>

<listitem><para><emphasis>month</emphasis>- ¶rednia z miesi±ca.
</para></listitem>

<listitem><para>liczba - d³ugo¶æ próbki w sekundach, np. dla liczenia ¶rednich
12 godzinnych powinni¶my podaæ warto¶æ 60 * 60 * 12 czyli
<emphasis>43200</emphasis>.
</para></listitem>

</itemizedlist>

Typ wybranej próbki ma wp³yw zarówno na interpretacjê ustawionej daty koñca i
pocz±tku danych, jak i na postaæ wypisywanej daty.

</para></listitem>

</itemizedlist>
</para></listitem>


<listitem><para>
<emphasis role="bold">Format wyj¶cia</emphasis>
Program umo¿liwia wypisywanie danych w jednym z kilku wybranych formatów.
Domy¶lnie dane wypisywane s± na standardowe wyj¶cie w formacie CSV - pola
tekstowe oddzielone przecinkami. Wiersze zawieraj±ce tylko warto¶ci BRAK
DANYCH nie s± drukowane. Warto¶ci te w pozosta³ych wierszach s± zastêpowane
przez napis <emphasis>NO_DATA</emphasis>. Domy¶lne ustawienia mo¿na zmieniæ
jedn± z nastêpuj±cych opcji:

<itemizedlist>

<listitem><para>
<command>--csv</command> lub <command>-c</command> ustawia format danych
wyj¶ciowych na CSV, jest to ustawienie domy¶lne.
</para></listitem>

<listitem><para>
<command>--xml</command> lub <command>-x</command> ustawia format danych na
XML. Na wyj¶ciu produkowany jest dokument o formacie okre¶lanym przez schemat
RelaxNG z pliku <filename>resources/dtd/szbase-extr.rng</filename>. Format
pliku jest do¶æ prosty, oto przyk³ad:
<programlisting>
<![CDATA[
<?xml version="1.0" encoding="ISO-8859-2"?>
<extracted xmlns="http://www.praterm.com.pl/SZARP/extr" raw="no">
 <header>
  <param>Kocio³ 1:Sterownik:temperatura zadana</param>
  <param>Kocio³ 1:Sterownik:temperatura wody za kot³em</param>
 </header>
 <data>
  <row>
   <time>2003-11-02 10:00</time>
   <value>105.0</value><value>22.7</value>
  </row>
  <row>
   <time>2003-11-02 10:10</time>
   <value>105.0</value><value>22.6</value>
  </row>
  <row>
   <time>2003-11-02 10:20</time>
   <value>105.0</value><value>22.7</value>
  </row>
  <row>
   <time>2003-11-02 10:30</time>
   <value>105.0</value><value>22.7</value>
  </row>
  <row>
   <time>2003-11-02 10:40</time>
   <value>105.0</value><value>22.7</value>
  </row>
  <row>
   <time>2003-11-02 10:50</time>
   <value>105.0</value><value>22.7</value>
  </row>
 </data>
</extracted>
]]>
</programlisting>
</para></listitem>

<listitem><para>
<command>--openoffice</command> lub <command>-O</command> powoduje
wygenerowanie pliku w formacie OpenOffice Calc (arkusza kalkulacyjnego z
pakietu OpenOffice). Wybranie
tego formatu zmusza tak¿e do okre¶lenia pliku wyj¶ciowego (za pomoc± opcji
<command>-o</command>) - nie jest mo¿liwe wypisanie pliku na standardowe
wyj¶cie.
</para></listitem>

<listitem><para>
<command>--output=&lt;FILE&gt;</command> lub <command>-o
&lt;FILE&gt;</command> ustawia plik wyj¶ciowy (zamiast standardowego
wyj¶cia). Opcja ta implikuje <command>-O</command> (format wyj¶ciowy
OpenOffice Calc), chyba ¿e zostanie ustawiony inny format za pomoc± opcji
<command>-c</command> lub <command>-x</command>.
</para></listitem>

<listitem><para>
<command>--no-data=&lt;TEXT&gt;</command> lub <command>-N
&lt;TEXT&gt;</command> ustawia tekst, jaki bêdzie wypisywany zamiast warto¶ci
BRAK DANYCH, domy¶lnie jest to <emphasis>NO_DATA</emphasis>.
</para></listitem>

<listitem><para>
<command>--delimiter=&lt;TEXT&gt;</command> lub <command>-d
&lt;TEXT&gt;</command> ustawia separator dla formatu CSV (domy¶lnie s± to dwa
znaki - przecinek i spacja). U¿ycie opcji implikuje format CSV, nie mo¿na jej
wiêc ³±czyæ z <command>-O</command> lub <command>-x</command>.
</para></listitem>

<listitem><para>
<command>--empty</command> lub <command>-E</command> powoduje, ¿e wypisywane
bêd± tak¿e wiersze zawieraj±ce same warto¶ci BRAK DANYCH - domy¶lnie wiersze
takie s± opuszczane.
</para></listitem>

<listitem><para>
<command>--raw</command> lub <command>-r</command> okre¶la, ¿e warto¶ci
parametrów maj± byæ wypisane bezpo¶rednio w takiej postaci, w jakiej znajduj±
siê w bazie, bez konwersji wynikaj±cej z zadeklarowanej precyzji parametrów.
Domy¶lnie konwersja taka jest wykonywana.
</para></listitem>

</itemizedlist>
</para></listitem>

<listitem><para>
<emphasis role="bold">Wypisywanie postêpu konwersji</emphasis>
</para><para>

<itemizedlist>
<listitem><para>
Opcja <command>--progress</command> lub <command>-P</command> powoduje, ¿e na
<filename>stderr</filename> wypisywane bêd± informacje o postêpach w
konwersji w szczególno¶ci przybli¿one procentowe zaawansowanie konwersji
(okre¶lane na podstawie przedzia³u czasowego jaki pozosta³). Po zakoñczeniu
w³a¶ciwej konwersji program mo¿e wypisaæ informacjê o kompresji pliku
OpenOffice. Program informuje te¿ o zakoñczeniu dzia³ania wypisuj±c komunikat
<emphasis>Completed</emphasis>.
</para></listitem>
</itemizedlist>

</para></listitem>

<listitem><para>
<emphasis role="bold">Ustawianie zmiennych libpar</emphasis>
</para>
<para>
<itemizedlist>
<listitem><para>
Tradycyjnie dla programów SZARP opcja
<command>-D&lt;name&gt;=&lt;value&gt;</command>
pozwala na ustalenie warto¶ci zmiennej biblioteki libpar. Zwykle bêdzie
potrzeba wybrania bazy danych przez u¿ycie opcji typu
<emphasis>-Dprefix=prza</emphasis>.
</para></listitem>
</itemizedlist>
</para></listitem>


<listitem><para><emphasis role="bold">Pozosta³e opcje</emphasis>
</para>
<para>

<itemizedlist>

<listitem><para>
<command>--debug=&lt;LEVEL&gt;</command> - ustala poziom wa¿no¶ci wypisywanych
komunikatów, od 0 (tylko powa¿ne b³êdy) do 10 (wszystko), domy¶lnie jest to 2.
</para></listitem>

<listitem><para>
<command>--help</command> lub <command>-?</command> - wypisuje pomoc dla
programu.
</para></listitem>

<listitem><para>
<command>--usage</command> - wypisuje skrócon± pomoc dla programu - spis
opcji i argumentów.
</para></listitem>

<listitem><para>
<command>--version</command> lub <command>-V</command> - wypisuje informacjê o
wersji programu.
</para></listitem>


</itemizedlist>


</para></listitem>

</itemizedlist>

</para>

<para>
Program korzysta z biblioteki libpar, wczytuje za jej pomoc± nastêpuj±ce
parametry:
<itemizedlist>
<listitem><para>
<emphasis>IPK</emphasis> - ¶cie¿ka do pliku konfiguracyjnego z formacie IPK,
parametr wymagany, czytany z sekcji globalnej.
</para></listitem>

<listitem><para>
<emphasis>datadir</emphasis> - g³ówny katalog z baz± w formacie SzarpBase,
parametr wymagany, czytany z sekcji globalnej.
</para></listitem>

<listitem><para>
<emphasis>oo_script</emphasis> - ¶cie¿ka do skryptu kompresuj±cego podany plik
XML do dokumentu OpenOffice'a. Parametr jest czytany z sekcji
<emphasis>extrszb</emphasis>, nie jest wymagany, ale bez niego nie bêdzie
mo¿na generowaæ dokumentów OpenOffice.
</para></listitem>

</itemizedlist>

</para>


</section> <!-- szbase-extrszb -->

<section id="szbase-szbedit">
<title>Program szbedit</title>

<para>
Program <application>szbedit</application> s³u¿y do edycji plików bazy
SzarpBase - dodawania, usuwania i modyfikowania danych. Przyjmuje jeden
argument - ¶cie¿kê do pliku z danymi. Do otwarcia pliku u¿ytkownik musi mieæ
prawa zapisu do niego.
</para>
<para>
Je¿eli nazwa pliku zawiera rok i miesi±c, program na tej podstawie jest w
stanie wy¶wietlaj±c dane podawaæ czas lokalny. Je¶li nie, to podaje czas w
strefie czasowej UTC.
</para>
<para>
Opis elementów ekranu i sposobu obs³ugi mo¿na uzyskaæ po uruchomieniu programu
i naci¶niêciu klawisza <command>F1</command>.
</para>

</section> <!-- szbase-szbedit -->

<section id="szbase-szbwriter">
<title>Import danych do bazy - program <application>
szbwriter</application></title>

<para>
Program <application>szbwriter</application> jest aplikacj± umo¿liwiaj±c±
wydajne importowanie do bazy w formacie SzarpBase danych z innego ¼ród³a. 
Umo¿liwia:
<itemizedlist>
<listitem><para>
Automatyczne dodawanie do konfiguracji nieistniej±cych w niej parametrów.
</para></listitem>

<listitem><para>
Automatyczne tworzenie nazw wykresów, jednostek, okien wykresów i nazw skróconych.
</para></listitem>

<listitem><para>
Wyliczanie zakresu warto¶ci dla wykresów parametrów.
</para></listitem>

<listitem><para>
Obs³ugê parametrów o warto¶ciach przechowywanych w dwóch s³owach.
</para></listitem>

<listitem><para>
Uzupe³nianie próbek je¿eli warto¶ci zbierane s± rzadziej ni¿ co 10 minut.
</para></listitem>

</itemizedlist>

Program zosta³ wykorzystany do realizacji importu do SZARP'a danych z
regulatorów wêz³ów obs³ugiwanych przez system InTouch lub Mikrob PRO-2000 (zobacz 
<xref linkend="samsony">).
</para>

<section id="szbwriter-config">
<title>Konfiguracja programu</title>

<para>
Program korzysta z biblioteki libpar (<xref linkend="libpar">).
Wymaga czytanych z sekcji <emphasis>meaner3</emphasis> lub globalnej 
parametrów base_format, datadir, IPK i 
czytanych z sekcji <emphasis>szbwriter</emphasis> opcjonalnych log oraz 
log_level. Opis
znaczenia tych parametrów znajduje siê w rozdziale
<xref linkend="meaner3-config">. Mo¿na oczywi¶cie podawaæ tak¿e w linii komend
parametry inicjalizuj±ce zmienne libpar, takie jak -Dprefix=xxx.
</para>
<para>
Program korzysta z opcjonalnego parametru
<emphasis>double_match</emphasis>, czytanego z sekcji
<emphasis>szbwriter</emphasis>. Parametr ten ma postaæ wzorca pow³oki
(shell pattern) opisuj±cego nazwy parametrów, które maj± byæ zapisywane w
dwóch s³owach (4 bajty). Przyk³adowo, dla wêz³ów Samson, parametr bêdzie mia³
zwykle postaæ:
<programlisting>
:szbwriter
double_match=@(*-energia|*-objetosc)
</programlisting>
Wiêcej informacji o wzorcach pow³oki mo¿na uzyskaæ wydaj±c komendê 
<command>info fnmatch</command>.
</para>
<para>
W tej samej sekcji pliku <filename>szarp.cfg</filename> mo¿e siê znajdowaæ
parametr <emphasis>fill_how_many</emphasis>. Jego warto¶ci± jest liczba,
okre¶laj±ca ile ewentualnych pustych próbek nale¿y przy zapisie zast±piæ
aktualnie zapisywan± warto¶ci±. Przydatny jest do likwidowania 'dziur w
wykresach', wystêpuj±cych w sytuacji gdy przerwy miêdzy danymi wej¶ciowymi
wynosz± wiêcej ni¿ 10 minut. Domy¶lna warto¶æ parametru to 0.
</para>

<para>W linii komend mo¿na podaæ jeden, opcjonalny, parametr - nazwê
konfiguracji. Wykorzystywany jest on tylko, je¿eli konfiguracja opisana
parametrem IPK nie istnieje i bêdzie tworzona od nowa.
</para>

</section>

<section id="szbwriter-input">
<title>Dane wej¶ciowe</title>

<para>
Program czyta dane ze standardowego wej¶cia. Spodziewa siê linii nastêpuj±cej
postaci:
<programlisting>
<![CDATA[
<nazwa parametru> <rok> <miesiac> <dzien> <godzina> <minuta> <warto¶æ>
]]>
</programlisting>
Je¿eli które¶ z pól ma zawieraæ spacjê, to powinno byæ wziête w podwójny
cudzys³ów. Znak cudzys³owu mo¿e siê pojawiæ, o ile zostanie poprzedzony
znakiem '\'. Przyk³ad:
<programlisting>
"Bardzo:fajna:nazwa z \"cudzys³owem\"" 2004 10 28 20 19 6.38
</programlisting>
Dodatkowo, je¿eli nazwa parametru koñczy siê wyra¿eniem w nawiasach
kwadratowych, to przyjmuje siê ¿e wyra¿enie w nawiasach jest nazw± jednostki
dla danego parametru. Nazwa jednostki d³u¿sza ni¿ 5 znaków zostanie obciêta do
pierwszych 5 znaków.
</para>

<para>
Program wczytuje kolejne linie z wej¶cia. Je¿eli parametr o podanej nazwie nie
istnieje w konfiguracji, jest do niej dodawany jako parametr definiowalny.
</para>
<para>
Je¿eli nazwa parametru pasuje do wzorca dla parametrów dwus³ownych (patrz
<xref linkend="szbwriter-config">), to precyzja parametru jest ustawiana na 0,
tworzone s± dwa parametry definiowalne o nazwach powsta³ych przez dodanie do
nazwy z wej¶cia napisów 'lsw' i 'msw', a sam parametr jest dodawany jako
parametr definiowalny przegl±daj±cego, z odpowiedni± formu³± sklejaj±c± dwa
parametry definiowalne.
</para>
<para>
Je¿eli parametr nie jest "dwus³owny", to jego precyzja jest ustalana na
podstawie ilo¶ci miejsc po przecinku w polu warto¶ci.
</para>
<para>
Zarówno ustalanie, czy parametr ma byæ zapisywany w dwóch s³owach, jak i
ustalanie precyzji parametru odbywa siê tylko raz - przy pierwszym wyst±pieniu
parametru na wej¶ciu. Nie jest mo¿liwa zmiany tych w³asno¶ci pó¼niej, gdy¿
wymaga³oby to konwersji zapisanych wcze¶niej do bazy danych.
</para>
<para>Podana warto¶æ jest zapisywana do bazy, przy czym je¿eli bezpo¶rednio po
sobie wyst±pi wiêcej warto¶ci, które mieszcz± siê w jednej 10-minutowej próbce
(a wiêc np. warto¶æ z 10:10 i 10:15), to do bazy zostanie zapisana ich
¶rednia.</para>

<para><!--Program nie zapisze danych, je¿eli w pliku szbase zosta³y ju¿ zapisane
pó¼niej jakie¶ dane.--> Puste miejsca zostan± wype³nione warto¶ciami NO_DATA.
</para>
<para>Ze wzglêdu na fakt, ¿e program stara siê jak najd³u¿ej nie zamykaæ
otwartego pliku, najbardziej wydajnie bêdzie pracowa³ je¿eli warto¶ci dla
jednego parametru bêd± wystêpowa³y bezpo¶rednio po sobie.
</para>
<para>Podsumowuj±c powy¿sze - prawid³owe i efektywne dzia³anie programu wymaga
aby linie wej¶ciowe by³y pogrupowane najpierw po nazwie parametru, a nastêpnie
posortowane po dacie i czasie warto¶ci. Najpro¶ciej uzyskaæ to przez
wygenerowanie pliku, w którym warto¶ci daty i czasu bêd± zapisane na sta³ej
ilo¶ci znaków (dope³nione zerami), a nastêpnie posortowanie go programem
<application>sort</application>.
</para>

</section>

</section> <!-- szbase-szbwriter -->


</chapter> <!-- szbase -->

<chapter id="meaner3">
<title>Instrukcja obs³ugi programu <application>meaner3</application></title>

<abstract>
<para>
Program <application>meaner3</application> jest nastêpn± wersj± demona meaner
zapisuj±cego warto¶ci parametrów do bazy. Najwa¿niejsze ró¿nice w nowej wersji
to zmiana formatu bazy danych na <emphasis>SzarpBase</emphasis> 
(<xref linkend="szbase">), udoskonalony mechanizm Bodas o wiêkszych
mo¿liwo¶ciach, a tak¿e wiele innych poprawek, miêdzy innymi lepsze logowanie
informacji o ewentualnie pojawiaj±cych siê b³êdach.
</para>
</abstract>

<section id="meaner3-config">
<title>Konfiguracja programu</title>

<para>
Program korzysta z biblioteki libpar, wczytuje za jej pomoc± nastêpuj±ce
parametry:
<itemizedlist>
<listitem><para>
<emphasis>IPK</emphasis> - ¶cie¿ka do pliku konfiguracyjnego z formacie IPK,
parametr wymagany, czytany z sekcji globalnej.
</para></listitem>

<listitem><para>
<emphasis>datadir</emphasis> - g³ówny katalog z baz± w formacie SzarpBase,
parametr wymagany, czytany z sekcji globalnej.
</para></listitem>

<listitem><para>
<emphasis>base_format</emphasis> - parametr wymagany, czytany z sekcji
g³ównej. Musi mieæ warto¶æ <emphasis>szarpbase</emphasis>, w przeciwnym razie
program odmówi uruchomienia.</para></listitem>

<listitem><para>
<emphasis>parcook_path</emphasis> - ¶cie¿ka do pliku, u¿ywana do tworzenia
identyfikatora dla mechanizmów komunikacji z programem
<application>parcook</application> (IPC). Parametr wymagany, czytany z sekcji
globalnej
</para></listitem>

<listitem><para>
<emphasis>log_level</emphasis> - poziom logowania, parametr opcjonalny czytany
z sekcji <emphasis>meaner3</emphasis> b±d¼ globalnej. Domy¶lna warto¶æ - 2.
</para></listitem>

<listitem><para>
<emphasis>log</emphasis> - plik z logiem programu; parametr opcjonalny czytany
z sekcji <emphasis>meaner3</emphasis> b±d¼ globalnej.
</para></listitem>


</itemizedlist>

</para>



</section>

<section id="meaner3-execute">
<title>Wykonywanie zadañ w programie meaner3</title>

<para>
W systemie konieczne jest okresowe wykonywanie pewnych dzia³añ - np. sychronizacji
danych z innymi komputerami. Mo¿na by do tego wykorzystywaæ standardowe mechanizmy
systemu operacyjnego (cron), ale ze wzglêdu na konieczno¶æ synchronizacji tych dzia³añ
z zapisem do bazy SZARP, utworzono oddzielny mechanizm, realizowany przez proces zapisuj±cy
do bazy - meaner3.
</para>

<para>
Dzia³anie mechanizmu jest nastêpuj±ce:
</para>
<para>
Konfiguracja sk³ada siê z szeregu sekcji, opisuj±cych zadania do wykonania.
Program po zakoñczeniu cyklu zapisu danych do bazy (wykonywane co 10 minut)
rozpoczyna przegl±danie
sekcji w kolejno¶ci ich wyst±pienia w pliku konfiguracyjnym. Je¿eli czas
uruchomienia sekcji zgadza siê z aktualnym czasem, b±d¼ te¿ sekcja by³a w
poprzednim cyklu wykonana z b³êdem i ma byæ powtórzona, wykonywana jest
przypisana do sekcji komenda.
</para>
<para>
Je¿eli wykonywana sekcja jest skonfigurowana do 
<emphasis>wykonywania równoleg³ego</emphasis>,
program przechodzi do przegl±dania nastêpnych sekcji. Je¶li nie, przegl±danie
sekcji jest przerywane do czasu zakoñczenia wykonywania ostatnio przegl±danej sekcji.
</para>
<para>
Wykonywanie sekcji koñczy siê albo z powodu zakoñczenia wykonywania
przypisanej do niej komendy, albo z powodu przekroczenia limitu czasu dla
sekcji. Limit ten jest ustalany dla ka¿dej sekcji osobno, w szczególno¶ci
sekcja mo¿e nie mieæ limitu. Je¿eli sekcja skoñczy siê z b³êdem lub zostanie
przerwana z powodu przekroczenia limitu czasu, to bêdzie powtórzona w
nastêpnych cyklach, o ile zostanie to skonfigurowane.
</para>
<para>
Je¿eli sekcja nie ma limitu czasowego lub jej limit czasowy jest na tyle du¿y,
¿e jest nadal wykonywane w trakcie kolejnego cyklu w którym powinna byæ
uruchomiona, jest ignorowana.
</para>
<para>
Sekcja z du¿ym limitem (lub bez limitu) nie skonfigurowana do wykonywania
równoleg³ego blokuje oczywi¶cie przegl±danie sekcji do czasu jej zakoñczenia.
</para>
<para>W pliku konfiguracyjnym (zwykle
<filename>/etc/szarp/szarp.cfg</filename>) wygl±da to tak, ¿e w sekcji
<emphasis>execute</emphasis> (lub w g³ównej) powinien znajdowaæ siê parametr
<emphasis>execute_sections</emphasis>, zawieraj±ca oddzielone spacjami nazwy
sekcji do wykonania (kolejno¶æ ma znaczenie!). Na przyk³ad:
<programlisting>
:execute
execute_sections=sekcja1 sekcja2 sekcja3
</programlisting>
</para>
<para>Ka¿da z sekcji zawiera nastêpuj±ce parametry:
<itemizedlist>

<listitem><para>
<emphasis>time</emphasis>  (parametr wymagany) - czas uruchomienia sekcji w
formacie <emphasis>&lt;dzieñ tygodnia&gt; &lt;miesi±c&gt; &lt;dzieñ&gt;
&lt;godzina&gt; &lt;minuty&gt;</emphasis>. Dzieñ tygodnia powinien byæ z
zakresu od 1 (poniedzia³ek) do 7 (niedziela), miesi±c - od 1 do 12, dzieñ
miesi±ca - od 1 do 31, godzina od 0 do 23, minuty - od 0 do 59, z tym ¿e
minuty s± rozpoznawane z dok³adno¶ci± do 10 minut, a wiêc nie ma znaczenia,
czy wpiszemy 10, 11 czy 19. Mo¿na podaæ kilka warto¶ci oddzielonych
przecinkami, b±d¼ te¿ zakresów (w formacie &lt;liczba&gt;-&lt;liczba&gt;).
Gwiazdka (*) oznacza ca³o¶æ dostêpnego zakresu. Przyk³ad:
<programlisting>
:sekcja1
time=1-4,6-7 * * 8-15 10, 30, 50
</programlisting>
Powy¿szy zapis oznacza uruchamianie sekcji codziennie oprócz pi±tków, w
godzinach od 8 do 15, w ka¿de nieparzyste 10 minut po okr±g³ej godzinie.
</para></listitem>

<listitem><para>
<emphasis>command_line</emphasis> (parametr wymagany) - komenda do
wykonania, przekazywane do wykonania przez pow³okê - program
<application>sh</application>. Mo¿e wiêc tak¿e zawieraæ instrukcje warunkowe,
pêtle itp.
</para></listitem>

<listitem><para>
<emphasis>retry</emphasis> (parametr opcjonalny) - ilo¶æ kolejnych cykli po
zakoñczeniu komendy z b³êdem, w których bêdzie ponawiana próba jej wykonania.
Domy¶lnie jest to 0 - brak powtórzeñ.
</para></listitem>

<listitem><para>
<emphasis>limit</emphasis> (parametr opcjonalny) - limit czasu (w sekundach)
na wykonanie komendy. Limit ten jest mierzony zawsze od pocz±tku danego cyklu
(a nie od chwili uruchomienia). Liczba ujemna oznacza ilo¶æ sekund przed
koñcem obecnego cyklu. Je¿eli wiêc cykl trwa zwykle 10 minut (600 sekund), to
warto¶æ -1 jest równa warto¶ci 599. Jest to tak¿e warto¶æ domy¶lna. Na sekundê
przed up³ywem limitu program otrzymuje sygna³ SIGTERM, sekundê pó¼niej SIGKILL.
Warto¶æ 0 oznacza brak limitu (komenda bêdzie dzia³aæ do samoistnego
zakoñczenia lub zakoñczenia programu meaner3).
</para></listitem>

<listitem><para>
<emphasis>parallel</emphasis> (parametr opcjonalny) - je¿eli ma warto¶æ
<emphasis>yes</emphasis> sekcja dopuszcza mo¿liwo¶æ wykonywania innych równolegle
z ni±. Ka¿da inna warto¶æ oznacza <emphasis>no</emphasis> (i jest to warto¶æ
domy¶lna). W praktyce, zgodnie z opisanym wy¿ej mechanizmem uruchamiania
sekcji, uruchamiane bêd± kolejno wszystkie sekcje z parametrem parallel
ustawionym na "yes" oraz pierwsza z "no".
</para></listitem>

</itemizedlist>

<!--<para>-->
Poni¿szy przyk³ad pokazuje konfiguracjê podtrzymuj±c± tunel na komputer
praterm.com.pl, z wykonywanym równoleg³e przepisywaniem danych na lokalny
terminal i serwer praterm.com.pl oraz ze ¶ci±ganiem danych z innego komputera
wykonywanym co godzinê, ale po zakoñczeniu przepisywania danych.
<programlisting>
:execute

execute_sections=tunel local_backup praterm_push other_get

:tunel
time=* * * * *
command_line=/opt/szarp/bin/ssh_tunel $prefix$@praterm.com.pl 1234
limit=0
parallel=yes

:local_backup
time=* * * * *
command_line=/usr/bin/rsync $rsync_options$ $szarp_prefix$/$prefix$ \
terminal:
parallel=yes

:praterm_push
time=* * * * *
command_line=/usr/bin/rsync $rsync_options$ $szarp_prefix$/$prefix$ \
$prefix$@praterm.com.pl:/opt/szarp

:other_get
time=* * * * 0
command_line=/usr/bin/rsync $rsync_options$ other:/opt/szarp/dane /opt/szarp


</programlisting>
</para>

</section> <!-- meaner3-execute -->

<section id="meaner3-stat-params">
<title>Parametry informacyjne programu</title>

<para>Program <application>meaner3</application> w trakcie dzia³ania zapisuje zestaw 
kilkunastu parametrów informuj±cych o stanie programu i wykonywanych
zadaniach. Parametry te nazywane s± <emphasis>parametrami
informacyjnymi</emphasis>.
Warto¶ci parametrów odnosz± siê do cyklu rozpoczynaj±cego siê o
czasie zapisu parametru, tzn. np. warto¶ci parametrów z godziny 11:40 odnosz±
siê do cyklu który rozpoczyna siê o 11:40 a koñczy zapisem o 11:50 (przyjmuj±c
d³ugo¶æ cyklu 10 minut). Oznacza to w praktyce, ¿e czê¶æ parametrów
informacyjnych jest zapisywana z dat± wsteczn±, np. informacja o wykonanych
zadaniach odnosz±ca siê do cyklu rozpoczynaj±cego siê o 11:40 jest dostêpna
dopiero o 11:50. W zwi±zku z tym dziury w zapisie czê¶ci parametrów
informacyjnych mog± nie pokrywaæ siê z przerwami w dzia³aniu programu.
</para>
<para>
Zapis parametrów informacyjnych nastêpuje na pocz±tku cyklu, po zapisaniu
w³a¶ciwych parametrów. Parametry te s± zapisywane zawsze, niezale¿nie od tego
czy s± zawarte w konfiguracji (podobne rozwi±zanie powinien te¿ implementowaæ
program przegl±daj±cy). Je¿eli w konfiguracji znajdzie siê parametr o nazwie
identycznej z jakim¶ parametrem informacyjnym, to jego zawarto¶æ zostanie
nadpisana (bo parametry informacyjne s± zapisywane po zwyk³ych).
</para>
<para>
Dostêpne s± nastêpuj±ce parametry:
<itemizedlist>
<listitem><para><emphasis>Status:Meaner3:program uruchomiony</emphasis> -
parametr ma warto¶æ 1 je¶li w danym cyklu program by³ uruchomiony lub BRAK
DANYCH je¿eli nie by³ uruchomiony.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów</emphasis> - ilo¶æ
wszystkich parametrów zawartych w pliku konfiguracyjnym.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów ze
sterowników</emphasis> - ilo¶æ parametrów których warto¶ci odczytywane s± ze
sterowników.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów
definiowanych</emphasis> - ilo¶æ parametrów w sekcji
<emphasis>defined</emphasis> pliku konfiguracyjnego IPK.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów definiowalnych
przegl±daj±cego</emphasis> - ilo¶æ parametrów w sekcji
<emphasis>drawdefinable</emphasis> pliku konfiguracyjnego IPK.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów zapisywanych do bazy</emphasis> -
- ilo¶æ parametrów z atrybutem
<emphasis>base_index</emphasis> (czyli tych dla których funkcja TParam::IsInBase()
zwróci³a 1).</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów zapisywanych
niepustych</emphasis> - ilo¶æ parametrów zapisywanych do bazy które w danym
cyklu mia³y warto¶ci ró¿ne od BRAK DANYCH.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów poprawnie
zapisanych</emphasis> - ilo¶æ parametrów, podczas zapisu których nie zg³oszono
b³êdu, wliczane s± w to tak¿e parametry z warto¶ciami BRAK DANYCH, normalnie
warto¶æ tego parametru powinna byæ taka jak <emphasis>Status:Meaner3:ilo¶æ
parametrów zapisywanych do bazy</emphasis>.
</para></listitem>

<listitem><para><emphasis>Status:Meaner3:ilo¶æ parametrów zapisanych z
b³êdem</emphasis> - ilo¶æ parametrów podczas których zg³oszono b³±d zapisu,
warto¶æ ró¿na od 0 oznacza zwykle problemy (awaria dysku, dysku pe³en, brak
uprawnieñ od zapisu lub tym podobne).
</para></listitem>

<listitem><para><emphasis>Status:Execute:ilo¶æ skonfigurowanych
sekcji</emphasis> - ilo¶æ sekcji <emphasis>execute</emphasis> znalezionych w
pliku konfiguracyjnym SZARP.
</para></listitem>

<listitem><para><emphasis>Status:Execute:ilo¶æ sekcji do uruchomienia w
cyklu</emphasis> - ilo¶æ sekcji, które w danym cyklu powinny zostaæ
uruchomione (w³±czaj±c w to sekcje powtarzane).
</para></listitem>

<listitem><para><emphasis>Status:Execute:ilo¶æ sekcji uruchomionych w
cyklu</emphasis> - ilo¶æ sekcji jakie zosta³y w danym cyklu uruchomione.
</para></listitem>

<listitem><para><emphasis>Status:Execute:ilo¶æ sekcji zakoñczonych z
sukcesem</emphasis> - ilo¶æ sekcji jakie zosta³y w danym cyklu uruchomione i
zakoñczy³y siê samoistnie z sukcesem (kodem powrotu równym 0).
</para></listitem>

<listitem><para><emphasis>Status:Execute:ilo¶æ sekcji zakoñczonych z
b³êdem</emphasis> - ilo¶æ sekcji które zakoñczy³y siê samoistnie z kodem
powrotu ró¿nym od 0.
</para></listitem>

<listitem><para><emphasis>Status:Execute:ilo¶æ sekcji przerwanych</emphasis> -
ilo¶æ sekcji jakie zosta³y przerwane z powodu przekroczenia limitu czasu.
</para></listitem>

</itemizedlist>
</para>
</section>

</chapter> <!-- meaner3 -->


<chapter id="samsony">
<title>Import danych z regulatorów wêz³ów Samson (system InTouch) lub Mikrob
(program PRO-2000)</title>

<para>
W systemie SZARP istnieje mechanizm pozwalaj±cy na automatyczny import danych
w formacie CSV, w szczególno¶ci generowanych przez system InTouch zbieraj±cy
dane z regulatorów wêz³ów Samson lub system PRO-2000 firmy Mikrob.
</para>

<para>
Mechanizm ten uruchamiany jest przez skrypt
<filename>script/samson2/get_sam</filename>. ¦ci±ga on potrzebne pliki z
komputera z InTouch'em, a nastêpnie przepuszcza je przez perlowy skrypt
<filename>script/samson2/get_sam</filename>, który generuje plik wej¶ciowy, po
posortowaniu i odrzuceniu wpisów obecnych przy poprzednim uruchomieniu
podawany do programu <application>szbwriter</application>.
Dodatkowo skrypt <filename>script/samson2/convert_names</filename> jest
u¿ywany do konwersji nazw okien programu przegl±daj±cego.
</para>
<para>
Mechanizm sprawdza dane z dnia obecnego i poprzedniego, mo¿e byæ uruchamiany z
dowoln± czêstotliwo¶ci±, ale nale¿y zwróciæ uwagê, aby nie uruchamiaæ go przed
ukoñczeniem poprzedniego przebiegu.
</para>
<para>
Konfiguracja SZARP'a jest generowana automatycznie na podstawie danych z
wêz³ów. Nie ma sensu jej modyfikacja, gdy¿ mo¿e ona zostaæ automatyczne
zmodyfikowana. W szczególno¶ci tracone s± wszelkie informacje nieobs³ugiwane
przez bibliotekê IPK.
</para>

<para>
Instalacja systemu polega na wykonaniu nastêpuj±cych kroków:
<orderedlist>
<listitem><para>
Upewniamy siê, ¿e na serwerze SZARP mamy zainstalowan± odpowiednio now± wersjê
systemu SZARP.
</para></listitem>

<listitem><para>
Na komputerze z dzia³aj±cym systemem InTouch/PRO-2000 instalujemy pakiet Cygwin wraz z
serwerem ssh i programem rsync (zobacz rozdzia³ 
<ulink url="http://www.szarp.org/szarp/doc/howto/html/cygwin-servers.html">
Uruchamianie serwerów sshd i crond</ulink> 
w opisie Cygwina w SZARP HOWTO.
Alternatywnie dostêp mo¿e byæ zapewniony przez udostêpnienie katalogu przez Sambê.
</para></listitem>

<listitem><para>
InTouch/PRO-2000 musi byæ skonfigurowany w ten sposób, aby raz dziennie zapisywa³ dane
z wêz³ów do plików CSV w jakim¶ katalogu.
</para></listitem>

<listitem><para>
Wymieniamy klucze, tak, aby u¿ytkownik root z serwera SZARP móg³ logowaæ siê
bez has³a na komputer z InTouchem/PRO-2000 i za pomoc± mechanizmu rsync ¶ci±gaæ
wygenerowane pliki CSV.
</para></listitem>

<listitem><para>
Ustalamy prefiks konfiguracji z danymi z wêz³ów i tworzymy odpowiedni katalog
<filename>/opt/szarp/&lt;prefix&gt;/config</filename> i 
<filename>/opt/szarp/&lt;prefix&gt;/szbase</filename>.
</para></listitem>

<listitem><para>
W katalogu <filename>/opt/szarp/&lt;prefix&gt;/config</filename> tworzymy plik
<filename>samsons_LASTDATE</filename> zawieraj±cy datê pierwszych danych,
które chcemy ¶ci±gn±æ, w formacie RRRR-MM-DD, np. 2004-09-01. 
</para></listitem>

<listitem><para>
W pliku <filename>/etc/szarp/szarp.cfg</filename> w sekcji o nazwie
<emphasis>samsony</emphasis> umieszczamy nastêpuj±ce parametry:
<itemizedlist>
<listitem><para><emphasis>config_prefix</emphasis> - prefiks nowo tworzonej
konfiguracji.
</para></listitem>

<listitem><para><emphasis>remote_host</emphasis> - nazwa (lub numer IP)
komputera z systemem InTouch.
</para></listitem>

<listitem><para><emphasis>dynamic_host</emphasis> - "yes" je¿eli komputer z
InTouchem ma dynamiczne IP, które bêdziemy pobieraæ z serwera praterm.com.pl.
Jako identyfikator komputera s³u¿yæ bêdzie warto¶æ parametru remote_host.
</para></listitem>

<listitem><para><emphasis>remote_user</emphasis> - nazwa u¿ytkownika na
komputerze z InTouch, z którego konta bêdziemy ¶ci±gaæ pliki z danymi.
</para></listitem>

<listitem><para><emphasis>remote_path</emphasis> - ¶cie¿ka do katalogu z
plikami CSV (na komputerze Windows).
</para></listitem>

<listitem><para><emphasis>params_group</emphasis> - nazwa grupy parametrów
(parametry bêd± mia³y nazwê postaci Grupa:Nazwa wêz³a:nazwa parametru).
</para></listitem>

<listitem><para><emphasis>date_format</emphasis> - format daty u¿ywany w
nazwach plików na komputerze z InTouchem/PRO-2000, powinien to byæ prawid³owy parametr
'format' dla programu <command>date</command>. Domy¶lna warto¶æ to 
<quote>+%Y-%m-%d</quote>.</para></listitem>

<listitem><para><emphasis>separator</emphasis> - napis (znak) u¿ywany jako
separator pól w pliku CSV, domy¶lnie jest to przecinek, dla systemu
PRO-2000 powinien to byæ tabulator ('\t').</para></listitem>

<listitem><para><emphasis>nodata_str</emphasis> - napis oznaczaj±cy brak
warto¶ci, domy¶lnie przyjmowany jest napis pusty, dla systemu PRO-2000
powinien to byæ napis 'brak'.</para></listitem>

</itemizedlist>
Dodatkowo, w sekcji <emphasis>szbwriter</emphasis> ustawiamy parametr
<emphasis>double_match</emphasis>, zawieraj±cy wzorzec pow³oki, do którego
maj± pasowaæ nazwy parametrów zapisywanych na dwóch s³owach.  Je¿eli dane 
z wêz³ów zbierane s± rzadziej ni¿ co 10 minut, mo¿emy ustawiæ te¿ warto¶æ
parametru <emphasis>fill_how_many</emphasis>. Zobacz te¿ 
<xref linkend="szbwriter-config">.
</para>
<para>
Przyk³adowy fragment pliku <filename>szarp.cfg</filename>:
<programlisting>
:samsony
                                                                                
# prefiks tworzonej konfiguracji
config_prefix=skis
# nazwa zdalnego komputera
remote_host=skis
# czy jest to dynamiczne IP
dynamic_host=yes
# nazwa zdalnego uzytkownika
remote_user=szarp
# sciezka do raportow
remote_path=/cygdrive/d/Raporty/Odczyty
# nazwa grupy z parametrami
params_group=Samsony
                                                                                
:szbwriter
# shell pattern dla parametrow dwuslownych - zobacz 'info fnmatch'
double_match=@(*-energia|*-objetosc)

</programlisting>

</para></listitem>

<listitem><para>
Kopiujemy skrypty get_sam, process_csv i convert_names z podkatalogu
<filename>script/samson2</filename> w ¼ród³ach SZARP'a do katalogu
<filename>/opt/szarp/bin</filename>.
</para></listitem>

<listitem><para>
Ustalamy uruchamianie skryptu <application>get_sam</application> w zadanym
odstêpie czasowym (np. co pó³ godziny) - albo za pomoc± crontaba, albo za pomoc± 
mechanizmu execute
programu meaner3 (zalecane opcje parallel=yes i limit=0 - zobacz
<xref linkend="meaner3-execute">).
</para></listitem>

</orderedlist>
</para>

<para>
Dodatkowo, istnieje mo¿liwo¶æ ustalenia przez u¿ytkowników nazw okien w
programie przegl±daj±cym (domy¶lnie s± to "Samsony:&lt;numer wêz³a&gt;"). 
Odbywa siê to przez umieszczenie na komputerze z Windows w katalogu z plikami
CSV pliku <filename>nazwy.txt</filename>. Powinien on zawieraæ w kolejnych
liniach star± (domy¶ln±) i now± nazwê wêz³a, oddzielone my¶lnikiem, bez
dodatkowych spacji. Przyk³ad:
<programlisting>
W112-Cicha 8
W115-G³o¶na 7
W528-Jana Sobieskiego 34
</programlisting>
Nazwy mog± zawieraæ polskie znaki (w kodowaniu CP-1250!), s± obcinane do 30
znaków, nie mog± zawieraæ znaków cudzys³owu i uko¶nika. Konwersja jest
dokonywana tekstowo na pliku <filename>params.xml</filename> konfiguracji.
Nowe nazwy obowi±zuj± do zmiany, przy czym zaleca siê nieusuwanie starych
wpisów, tylko dodawanie nowych na koñcu. Przyk³adowo, je¿eli wêze³ W112 mia³
siê nazywaæ Cicha 8, a potem zmieniono jego nazwê na Cicha 12, to w pliku
powinny byæ obecne wpisy:
<programlisting>
W112-Cicha 8
Cicha 8-Cicha 12
</programlisting>
Pozwoli to na prawid³ow± konwersjê tak¿e parametrów z wêz³a W112, które
pojawi± siê w konfiguracji w przysz³o¶ci.
</para>

</chapter> <!-- samsony -->

<chapter id="bodas">

<title>BODAS - Baza Ogólnopolska Danych Archiwalnych Systemu SZARP</title>

<section>

<title>Koncepcja systemu</title>
<para>
Celem pierwotnym
by³o stworzenie centrum internetowego, na którym sk³adowane i
regularnie uaktualniane by³yby bazy danych historycznych wszystkich systemów posiadaj±cych
SZARPa. Z czasem okaza³o siê, ¿e nale¿y to uogólniæ na przesy³anie i
uaktualnianie baz miêdzy ró¿nymi komputerami w taki sposób, aby proces
przesy³ania trwa³ jak najkrócej.
</para>
<para>
Struktura systemu w najprostszej postaci zak³ada, ¿e istnieje jeden centralny serwer,
na który zgrywane s± dane z wszystkich obiektów (ciep³owni, wêz³ów). Transmisja inicjowana 
jest z obiektów. Dodatkowo obiekty mog± wysy³aæ swoje dane na lokalne terminale oraz 
ewentualnie bezpo¶rednio na inne obiekty.
</para>
<para>
	U¿ytkownicy indywidualni oraz ewentualnie inne obiekty pobieraj± dane z serwera centralnego -
	tu tak¿e transmisja inicjowana jest z obiektów, serwer centralny zawsze jest stron±
	biern±.
</para>
<para>
	Opisany schemat czasami mo¿e siê komplikowaæ - czyli mog± istnieæ serwery po¶rednicz±ce,
	które dla pewnej grupy obiektów stanowi± "serwer centralny".
</para>

</section>

<section>
<title>Realizacja BODASa</title>
<para>
	U¿ywane s± obecnie 2 implementacje. Pierwsza z nich u¿ywa programu do ró¿nicowego
	przesy³ania danych <command>rsync</command> (z pewnymi opisanymi dalej komplikacjami)
	i wykorzystywana jest do automatycznego przesy³ania danych miêdzy obiektami. Druga 
	wykorzystuje protokó³ oparty na rsyncu, wymiana danych odbywa siê miêdzy SZARP Synchronization
	Server zainstalowanym na serwerze centralnym, a graficznym klientem Szarp Synchronization
	Client zainstalowanym na komputerze u¿ytkownika chc±cego ogl±daæ dane historyczne. Obie
	implementacje w rezultacie powoduj± utworzenie lokalnej kopii wszystkich plików tworz±cych
	bazê SZARP. Oznacza to ¿e mechanizmy te mog± byæ u¿ywane wymiennie, a w razie potrzeby baza
	mo¿e byæ po prostu skopiowana/przeniesiona w dowolny inny sposób.
</para>
<para>
	Rsync u¿ywany jest przez ssh, zwykle z wymian± kluczy miêdzy przesy³aj±cymi dane komputerami
	aby unikn±æ wpisywania has³a. Domy¶lnie przesy³ane s± dane tylko z 2 ostatnich miesiêcy. Je¿eli
	potrzeba zsynchronizowaæ starsze pliki (bo np. rêcznie zmodyfikowano historyczne dane), to
	na obiekcie ¼ród³owym dla danych modyfikowany jest plik 
	<filename>/opt/szarp/&lt;prefix&gt;/szbase_stamp</filename>. W zwi±zku z tym aby sprawdziæ czy 
	trzeba
	przesy³aæ ca³o¶æ czy tylko 2 ostatnie miesi±ce, nale¿y sprawdziæ datê modyfikacji tego
	pliku. Mo¿e byæ to robione przez ssh, ale wymaga to wtedy zestawienia dwóch po³±czeñ - najpierw
	do sprawdzenia daty pliku, pó¼niej do przes³ania danych. Dostêpny jest wiêc mechanizm
	pozwalaj±cy na zmniejszenie obci±¿enia serwera - data modyfikacji pliku mo¿e byæ sprawdzona
	przez protokó³ HTTP, ³±cz±cy siê do serwera <command>stampd</command> dzia³aj±cego na porcie 81.
	Ca³o¶æ odpowiednich operacji wykonuj± skrypty <command>/opt/szarp/bin/szbpush</command>
	i <command>/opt/szarp/bin/szrsync</command> s³u¿±ce odpowiednio do wysy³ania i odbierania
	danych. Szczegó³y ich u¿ycia mo¿na sprawdziæ wywo³uj±c je z opcj± <option>-h</option>.
</para>
<para>
	Wiêcej informacji na temat drugiej impementacji znajduje siê w rozdziale o serwerze synchronizacji
	- <xref linkend="sss"> oraz w dokumentacji programu SSC - <ulink url="http://szarp.org/szarp/doc/ssc/html/ssc.html">http://szarp.org/szarp/doc/ssc/html/ssc.html</ulink>.
</para>
</section>

<section id="bodas-konf">
<title>Konfiguracja BODASa do wysy³ania danych z obiektu</title>
<para>
Nale¿y upewniæ siê, ¿e zarówno na serwerze SZARPa, jak i na komputerze, na
który bêdziemy chcieli wysy³aæ, jest zainstalowany program
<command>rsync</command>,
Poza tym, je¶li bêdziemy siê ³±czyæ przez sieæ, komputery powinny byæ
skonfigurowane do po³±czenia ssh bez konieczno¶ci wpisywania has³a. U¿ytkownikiem
³±cz±cym siê bêdzie tu root, za¶ na zdalnym komputerze najlepiej utworzyæ
specjalnego u¿ytkownika, najlepiej bez has³a, z mo¿liwo¶ci± logowania siê tylko 
za pomoc± wymienionego klucza.
</para>
<para>
System SZARP mo¿e obs³ugiwaæ jednocze¶nie wiele <emphasis>sekcji
push</emphasis>,
które mog± dotyczyæ ró¿nych docelowych lokalizacji kopii bazy. Na przyk³ad
mo¿emy chcieæ mieæ backup lokalny wykonywany co godzinê, kopiê na innym
terminalu w tej samej sieci uaktualnian± co 10 minut oraz ³±czyæ
siê z serwerem internetowym, aby uaktualniæ centralny backup bazy.
</para>
<para>
BODASa konfigurujemy podobnie jak inne rodzaje sekcji
<emphasis>execute</emphasis>
(zobacz <link linkend="meaner3-execute">opis</link>).
W pliku konfiguracyjnym SZARPa (<filename>/etc/szarp/szarp.cfg</filename>) trzeba
zadeklarowaæ ¿±dane sekcje <emphasis>execute</emphasis>. Robimy to przez umieszczenie
w sekcji o nazwie <command>execute</command> parametru
<command>execute_sections</command>. Jego
warto¶ci± powinna byæ lista oddzielonych spacjami sekcji
<emphasis>push</emphasis>:
<programlisting>
:execute
execute_sections=bodas1 bodas2 bodas3 ...
</programlisting>
</para>
<para>
Teraz dla ka¿dej z zadeklarowanych sekcji <emphasis>push</emphasis> nale¿y utworzyæ
oddzieln± sekcjê w pliku konfiguracyjnym, a wiêc:
<programlisting>
:bodas1

...

:bodas2

....

</programlisting>
Kolejno¶æ warto¶ci w parametrze <emphasis>execute_sections</emphasis> wyznacza kolejno¶æ
uruchamiania sekcji przez SZARPa.
</para>
<para>
W ka¿dej z tych sekcji nale¿y umie¶ciæ nastêpuj±ce parametry:
<ItemizedList>
<listitem>
<para>
	<emphasis>command_line</emphasis> - komendê do wykonania, np.
<programlisting>
command_line=/opt/szarp/bin/szbpush -c user@server baza1 baza2
</programlisting>
</para>
<para>
Zwyczajowo nazwa u¿ytkownika <emphasis>user</emphasis> jest identyczna z nazw± komputera
wysy³aj±cego dane. Na komputerze <emphasis>server</emphasis> nale¿y wcze¶niej
utworzyæ u¿ytkownika <emphasis>user</emphasis>:
<programlisting>
adduser user
</programlisting>
oraz katalog <filename>/opt/szarp/user</filename>, z prawami dostêpu ograniczonymi tylko do 
w³a¶ciciela:
<programlisting>
mkdir /opt/szarp/user
chown user.user /opt/szarp/user
</programlisting>
Nale¿y tak¿e skonfigurowaæ po³±czenie ssh miêdzy komputerami tak, aby 
u¿ytkownik <emphasis>root</emphasis> z komputera wysy³aj±cego móg³ siê logowaæ bez podawania
has³a jako <emphasis>user</emphasis> na komputer 
<emphasis>server</emphasis>.
</para>
</listitem>

<listitem>
<para>
<emphasis>retry</emphasis> - specyfikuje ile razy nale¿y powtarzaæ nieudan± próbê
transmisji. Je¿eli parametr ten jest wiêkszy ni¿ 0, to w przypadku niemo¿no¶ci
nawi±zania po³±czenia lub po zg³oszeniu b³êdu przez program
<command>rsync</command>,
po nastêpnym zapisie do bazy (a wiêc 10 minut pó¼niej) próba synchronizacji
zostanie powtórzona. Je¿eli wiêc chcemy, aby po nieudanej transmisji SZARP
jeszcze 3 razy próbowa³ j± powtórzyæ, nale¿y ustawiæ
<programlisting>
retry=3
</programlisting>
</para>
</listitem>

<listitem>
<para>
<emphasis>time</emphasis> - parametr okre¶la, kiedy uruchamiaæ dan± sekcjê. Jego postaæ
to: <emphasis>dzieñ_tygodnia miesi±c dzieñ_miesi±ca godzina minuta</emphasis>.
Dzieñ tygodnia musi byæ liczb± z zakresu 1 (poniedzia³ek) do 7 (niedziela),
miesi±c liczb± 1 - 12, dzieñ miesi±ca 1 - 31, godzina 0 - 23, minuta 0 - 59.
Minuty s± zawsze zaokr±glane do 10 minut w dó³, wiêc zarówno 13 jak i 15 oznacza
tak naprawdê 10. Zamiast liczby mo¿e wyst±piæ <quote>gwiazdka</quote>, oznaczaj±ca
dowoln± warto¶æ. Je¿eli wiêc chcemy aby sekcja wykonywa³a siê co 10 minut,
wpisujemy
<programlisting>
time=* * * * *
</programlisting>
Je¿eli codziennie o pó³nocy, to mo¿emy wpisaæ:
<programlisting>
time=* * * 0 5
</programlisting>
Je¿eli w ka¿d± ¶rodê kwietnia o 13:40, to wpisujemy
<programlisting>
time=3 4 * 13 45
</programlisting>
</para>
</listitem>
</ItemizedList>
Wiêcej informacji mo¿na znale¼æ w rozdziale o mechani¼mie <emphasis>execute</emphasis> - 
<xref linkend="meaner3-execute">.
</para>

<para>
Oto przyk³adowy fragment pliku konfiguracyjnego
<filename>/etc/szarp/szarp.cfg</filename>,
zawieraj±cy konfiguracjê BODASa dla wykonywania co 10 minut lokalnej kopii
i codziennie o pó³nocy synchronizacji z baz± centraln± na serwerze internetowym:
<programlisting>
:execute
execute_sections=local_copy remote_copy

:local_copy
command_line=/opt/szarp/bin/szbpush terminal1 leg1
time=* * * * *

:remote_copy
command_line=/opt/szarp/bin/szbpush -c leg1@szarp.com leg1
time=* * * 0 5
</programlisting>
</para>

</section> <!-- bodas-konf -->

</chapter> <!-- bodas -->

<chapter id="pooler">
<title>Statusy modemów - opis zwracanych warto¶ci.</title>

<section id=opispooler>
<title>Opis warto¶ci</title>

<para>
Do komunikacji miêdzy modemami u¿ywany jest skrypt 
<filename>modem_pooler.sh</filename>. Zwraca on pewne warto¶ci, które nastêpnie
s± widoczne w programie przegl±daj±cym w postaci wykresu "Statystyki modemów".
Brak warto¶ci oznacza, ¿e ci±gu danych 10 minut nie podejmowano próby
komunikacji z modemem.
<itemizedlist>
<listitem><para>
"-9"  - za ma³o czasu na odpytanie danego modemu.
</para>
</listitem>
<listitem><para>
"-5"  - nie mo¿na po³±czyæ siê z modemem na wê¼le (nie mo¿na zestawiæ
po³±czenia ppp). Je¿eli warto¶æ ta wystêpuje dla wszystkich wêz³ów, sugeruje
to problem z modemem po stronie ciep³owni. Je¿eli dla pojedynczego wêz³a, mo¿e
to oznaczaæ ¿e modem jest od³±czony, uszkodzony  lub ¿e modem (lub ca³y komputer) 
na wê¼le jest wy³±czony,
</para>
</listitem>
<listitem><para>
"0"  - po³±czono z wêz³em i ¶ci±gniêto dane. Je¿eli mimo warto¶ci 0 na
wykresach parametrów z wêz³a brak jest warto¶ci, oznacza to ¿e komputer na
wê¼le nie zbiera danych.
</para>
</listitem>
<listitem><para>
"30"  - przekroczono czas oczekiwania na odpowied¼ - prawdopodobna przyczyna
to zak³ócenia na linii.
</para>
</listitem>
<listitem><para>
Pozosta³e warto¶ci dodatnie s± to b³êdy zwracane przez program rsync, je¿eli
wystêpuj± przez d³u¿szy czas, mog± oznaczaæ b³±d w konfiguracji komunikacji z
wêz³ami.
</para>
</listitem>
</itemizedlist>

</section>
</chapter>

<chapter id="isl">
<title>ISL</title>

<abstract>
<para>
Rozdzia³ opisuje elementy systemu ISL, udostêpniaj±cego dane z systemu SZARP
za pomoc± protoko³u HTTP.
</para>
</abstract>

<section id="isl-server">
<title>Biblioteka serwera HTTP</title>
<para>
	Program <application>paramd</application> oparty jest na prostej 
bibliotece realizuj±cej funkcjonalno¶æ serwera HTTP.
Biblioteka implementuje niewielki, ale funkcjonalny podzbiór protoko³ów HTTP w
wersji 1.0 i 1.1, ale bez po³±czeñ sta³ych (nag³ówek "Connection:
Keep-Alive"), gdy¿ implementowany serwer jest jednow±tkowy i obs³uguje tylko
1 po³±czenie na raz.
Biblioteka odpowiada wersj± protoko³u tak± sam±, w jakiej przysz³o zg³oszenie
klienta. Obs³ugiwane s± metody HTTP GET oraz POST. W przypadku b³êdów,
biblioteka odsy³a informacjê z kodem b³êdu HTTP, zgodnie z RFC 2616. 
Jedynym dostêpnym
kodowaniem wyj¶ciowym jest UTF-8 (Unicode). Obs³ugiwana jest opcjonalna
autoryzacja <emphasis>Basic</emphasis>, opcjonalnie po³±czenia HTTP mo¿na
tunelowaæ przez protokó³ SSL. Wykorzystywana jest biblioteka OpenSSL,
zapewniaj±ca obs³ugê protoko³u SSL w wersji 2 i 3 oraz TSL.</para>
<para>
Mo¿liwe jest uruchomienie w ramach jednej aplikacji wielu serwerów, z ró¿nymi
opcjami, na ró¿nych portach. Ka¿dy serwer dzia³a w ramach oddzielnego procesu.
</para>
<para>
Serwer testowany by³ z wiêkszo¶ci± popularnych przegl±darek. 
</para>
</section> <!-- isl-server -->

<section id="isl-server-config">
<title>Konfiguracja serwera HTTP</title>

<para>
Serwer wykorzystuje bibliotekê <emphasis>libpar</emphasis>, g³ówna
konfiguracja jest wiêc zapisana w pliku
<filename>/etc/szarp/szarp.cfg</filename>, którego format opisany jest w
rozdziale <xref linkend="libpar-format">. 
</para>
<para>
W sekcji o nazwie odpowiadaj±cej
nazwie konkretnego programu (a wiêc np. <emphasis>paramd</emphasis>)
umieszczony jest parametr <emphasis>servers</emphasis>. Zawiera on listê
oddzielonych spacjami sekcji, z których ka¿da opisuje jeden proces - server.
</para>
<para>
Ka¿da z takich sekcji zawiera nastêpuj±ce parametry:
<itemizedlist>
<listitem><para>
<emphasis>port</emphasis> - port TCP/IP, na którym serwer bêdzie przyjmowaæ po³±czenia,
domy¶lnie przydzielane s± porty o numerach od 8081. Oczywi¶cie nie zadzia³a to
je¿eli w systemie bêdzie uruchamianych kilka aplikacji korzystaj±cych z
biblioteki serwera, gdy¿ obie bêd± chcia³y przydzielaæ sobie porty poczynaj±c
od 8081.
</para></listitem>
<listitem><para>
<emphasis>timeout</emphasis> - czas w sekundach, po jakim w razie braku reakcji klienta
po³±czenie TCP/IP bêdzie zamkniête. Dotyczy to zarówno sytuacji, gdy klient nie
zd±¿y³ przes³aæ ca³ego ¿±dania HTTP. Domy¶lna warto¶æ to 30.
</para></listitem>
<listitem><para>
<emphasis>allowed_ip</emphasis> - lista adresów IP, z których dozwolone jest
³±czenie siê z serwerem, w formacie
zgodnym z funkcj± <function>fnmatch</function>. Domy¶lnie jest to
<emphasis>*</emphasis> (dozwolone s± po³±czenia z dowolnego adresu). W przypadku tego
parametru zapis listy wzorców (zgodny z funkcj± <function>fnmatch</function>) 
znajduje siê poni¿ej (<emphasis>lista-wzorców</emphasis>
oznacza kolejne wzorce oddzielone znakiem '|').
</para>
<itemizedlist>
<listitem><para><emphasis>?(lista-wzorców)</emphasis> -
    Wyra¿enie jest prawdziwe, gdy ¿aden lub jeden wzorzec z listy wzorców zosta³ dopasowany.
    </para></listitem>
<listitem><para><emphasis>*(lista-wzorców)</emphasis> -
    Wyra¿enie jest prawdziwe, gdy ¿aden lub dowolna liczba wzorców z listy wzorców zosta³a dopasowana.
    </para></listitem>
<listitem><para><emphasis>+(lista-wzorców)</emphasis> -
    Wyra¿enie jest prawdziwe, gdy co najmniej jeden wzorzec z listy wzorców zosta³ dopasowany.
    </para></listitem>
<listitem><para><emphasis>@(lista-wzorców)</emphasis> -
    Wyra¿enie jest prawdziwe, gdy dok³adnie jeden wzorzec z listy wzorców zosta³ dopasowany.
    </para></listitem>
<listitem><para><emphasis>!(lista-wzorców)</emphasis> -
    Wyra¿enie jest prawdziwe, gdy ¿aden wzorzec z listy wzorców nie zosta³ dopasowany.
    </para></listitem>
</itemizedlist>
</listitem>
<listitem><para>
<emphasis>auth</emphasis> - czy serwer ma ¿±daæ autoryzacji (typu HTTP Basic).
Autoryzacja bêdzie w³±czona je¿eli parametr ma warto¶æ
<emphasis>yes</emphasis>, domy¶lna warto¶æ to <emphasis>no</emphasis>.
</para></listitem>
<listitem><para>
<emphasis>access</emphasis> - ¶cie¿ka do pliku definiuj±cego prawa dostêpu
do zasobów serwera, ma znaczenie tylko je¿eli w³±czona jest autoryzacja.
Domy¶lnie jest to plik <filename>access.conf</filename> w katalogu g³ównym. 
Plik ten zawiera linie o nastêpuj±cej postaci:
<programlisting>
[¶cie¿ka do wêz³a]:[nazwa u¿ytkownika]
</programlisting>
Linie o innej postaci s± ignorowane.
¦cie¿ka opisuje parametr lub wêze³ w drzewie parametrów, a nazwa u¿ytkownika
oznacza u¿ytkownika, który ma prawo do ustawiania danego parametru lub grupy
parametrów zawartej w podanym wê¼le. 
¦cie¿ki do wêz³ów i parametrów powinny byæ podane w kodowaniu UTF-8.
Przyk³adowy plik mo¿e wygl±daæ tak:
<programlisting>
/:root
/Kocio³ 1:palacz1
/Kocio³ 2/Sterownik/temperatura zadana:palacz2
</programlisting>
Do ustawienia parametru potrzebne jest tak¿e podanie has³a. Serwer sprawdza,
czy u¿ytkownik o podanej nazwie ma prawo do dostêpu do danej ¶cie¿ki, a
tak¿e czy istnieje taki u¿ytkownik na serwerze i czy podane has³o jest
prawid³owe. Korzystanie z hase³ systemowych wymaga obecno¶ci w katalogu
<filename>/etc/pam.d</filename> pliku <filename>paramd</filename> o
nastêpuj±cej zawarto¶ci:
<programlisting>
#%PAM-1.0
auth       required     /lib/security/pam_stack.so service=system-auth
</programlisting>
Plik ten jest automatycznie tworzony tak¿e po wydaniu komendy <command>make
ssl</command> w katalogu ze ¼ród³ami programu.
</para></listitem>
<listitem><para>
<emphasis>ssl</emphasis> - <emphasis>yes</emphasis> je¿eli serwer ma korzystaæ
z protoko³u HTTPS (HTTP tunelowany przez SSL), domy¶lnie jest to
<emphasis>no</emphasis>.
</para></listitem>
<listitem><para>
<emphasis>keypass</emphasis> - has³o u¿yte do zakodowania prywatnego klucza RSA
serwera, domy¶lnie "paramd". Zobacz te¿ opis opcji <emphasis>key</emphasis>.
</para></listitem>

<listitem><para>
<emphasis>key</emphasis> - ¶cie¿ka do pliku zawieraj±cego prywatny klucz RSA
serwera. Klucz ten mo¿e byæ wygenerowany na przyk³ad przez wydanie komendy
<command>make ssl</command> w katalogu ze ¼ród³ami programu. Tworzony jest plik 
<filename>server.pem</filename>,
kopiowany tak¿e do katalogu <filename>/opt/szarp/resources</filename>. Has³o
u¿ywane do zakodowania klucza jest zapisane w pliku
<filename>config.ssl</filename> (parametr <emphasis>output_password</emphasis>).
Aby serwer dzia³a³, to samo has³o musi byæ podane jako warto¶æ parametru
<emphasis>keypass</emphasis> w konfiguracji programu. 
Domy¶lnie klucz jest
czytany z pliku <filename>server.pem</filename> w katalogu g³ównym.
</para></listitem>

<listitem><para>
<emphasis>cert</emphasis> - ¶cie¿ka do pliku zawieraj±cego certyfikat serwera.
Jest on generowany razem z kluczem (patrz opis poprzedniej opcji) i zapisywany
w tym samym pliku - choæ u¿ytkownik mo¿e te¿ podaæ inny plik z prawid³owym
certyfikatem x509. Wygenerowany certyfikat ma nastêpuj±ce parametry:
<programlisting>
<![CDATA[
E  = pawel@praterm.com.pl
CN = [nazwa komputera]
OU = ISL
O  = PRATERM SA
L  = Warsaw
ST = Poland
C  = PL
]]>
</programlisting>
Wa¿no¶æ wygenerowanego certyfikatu wynosi 1 rok.
Domy¶lnie certyfikat jest
czytany z pliku <filename>server.pem</filename> w katalogu g³ównym.
</para></listitem>
</itemizedlist>

<para>
Przyk³adowy plik konfiguracyjny mo¿e wygl±daæ na przyk³ad tak:
<programlisting>
<![CDATA[
:paramd

servers=local remote

:local
port=8081
allowed_ip=127.0.0.1

:remote
port=8082
auth=yes
ssl=yes
keypass=paramd
access=/opt/szarp/resources/paramd_access.conf
key=/opt/szarp/resources/server.pem
cert=/opt/szarp/resources/server.pem
]]>
</programlisting>
</para>
</section>


<section id="isl-paramd">
<title>Program paramd</title>

<para>
Program <filename>paramd</filename> jest serwerem HTTP, który udostêpnia informacje
o warto¶ciach parametrów zbieranych przez system SZARP w postaci dokumentów
XML lub HTML. Dodatkowo udostêpnia on równie¿ informacje o raportach zdefiniowanych w IPK, a tak¿e
pozwala na definiowanie w³asnych raportów. 
</para>

<section id="isl-paramd-konfiguracja">
<title>Konfiguracja programu</title>

<para>
Konfiguracja programu jest trzymana w pliku
<filename>/etc/szarp/szarp.cfg</filename>.
Parametry s± standardowo czytane z sekcji o nazwie <emphasis>paramd</emphasis>. Je¶li
nie zostan± znalezione w tej sekcji, to bêd± szukane w sekcji g³ównej.
Specyficzne dla programu s± nastêpuj±ce parametry:
</para>
<itemizedlist>
<listitem><para>
<emphasis>PTT</emphasis> - ¶cie¿ka do pliku PTT.act, zawieraj±cego opis dostêpnych
w systemie parametrów. Parametr jest wymagany.
</para></listitem>
<listitem><para>
<emphasis>log</emphasis> - plik z logiem programu, do którego bêd± wypisywane
komunikaty informacyjne i o b³êdach. Plik ten musi byæ dostêpny do zapisu dla
u¿ytkownika uruchamiaj±cego program. Domy¶lnie jest to plik <filename>
paramd.log</filename> w aktualnym katalogu.
</para></listitem>
<listitem><para>
<emphasis>log_level</emphasis> - poziom logowania, od 0 (tylko b³êdy), do 10. Domy¶lnie
jest to poziom 2. Dok³adniej, poziomy maj± nastêpuj±ce znaczenie:
</para>
<itemizedlist>
<listitem><para>
<emphasis>0</emphasis> istotne b³êdy, powoduj±ce przerwanie wykonywania programu lub jego istotnej czê¶ci (np. brak pamiêci), mog±ce te¿ ¶wiadczyæ o b³êdach w 
programie.
</para></listitem>
<listitem><para>
<emphasis>1</emphasis> ostrze¿enia o niemo¿no¶ci wykonania istotnego fragmentu
programu, ¶wiadcz±ce zazwyczaj o b³êdach w konfiguracji.
</para></listitem>
<listitem><para>
<emphasis>2</emphasis> podstawowe informacje o wykonanych dzia³aniach, mog±ce
s³u¿yæ do oceny rodzaju i czêsto¶ci wykonywania zadañ (np. podstawowa
informacja o zapytaniach obs³u¿onych przez serwer HTTP).
</para></listitem>
<listitem><para>
<emphasis>3</emphasis> dodatkowe informacje statystyczne i wydajno¶ciowe.
</para></listitem>
<listitem><para>
<emphasis>4</emphasis> komunikaty o b³êdach o charakterze tymczasowym (np.
niemo¿no¶æ po³±czenia siê z serwerem).
</para></listitem>
<listitem><para>
<emphasis>5</emphasis> komunikaty przydatne przy testowaniu nowej konfiguracji.
</para></listitem>
<listitem><para>
<emphasis>10</emphasis> komunikaty pomocne przy szukaniu przyczyn b³êdów w
dzia³aniu programu (debugging).
</para></listitem>
</itemizedlist>
</listitem>
<listitem><para>
<emphasis>update_freq</emphasis> - czêstotliwo¶æ w sekundach od¶wie¿ania informacji o
warto¶ciach parametrów. Warto¶ci parametrów s± odczytywane tylko na ¿±dania
klientów, ale nie czê¶ciej ni¿ co podan± ilo¶æ sekund. Domy¶ln± warto¶ci± jest
10, co odpowiada czêstotliwo¶ci od¶wie¿ania warto¶ci próbek w systemie SZARP.
</para></listitem>
<listitem><para>
<emphasis>parcook_path</emphasis> - ¶cie¿ka do pliku, który pos³u¿y jako klucz do
generowania identyfikatora pamiêci dzielonej parametrów. Zwykle jest to ¶cie¿ka
do programu parcook lub netpar systemu SZARP. Programy te korzystaj± do
tworzenia segmentów pamiêci dzielonej z parametru o takiej samej nazwie z pliku
<filename>/etc/szarp/szarp.cfg</>, ale czytanego zawsze z sekcji g³ównej.
Parametr jest wymagany.
</para></listitem>
<listitem><para>
<emphasis>html_header</emphasis> - napis, który bêdzie wypisywany na pocz±tku ka¿dego
dokumentu HTML generowanego przez program. Powinien w szczególno¶ci zawieraæ
poprawny nag³ówek HTML, a wiêc tagi otwieraj±ce &lt;html&gt; i &lt;body&gt;.
Domy¶lny nag³ówek ma postaæ:
<programlisting>
<![CDATA[
<html>
	<head>
		<title>
		Paramd output
		</title>
	</head>
	<body>
]]>
</programlisting>
Prostym sposobem na automatyczne od¶wie¿anie wysy³anych przez program stron
HTML jest wstawienie do nag³ówka html nastêpuj±cego tekstu:
<programlisting>
&lt;meta http-equiv="Refresh" content="10; http://hostname:8081"&gt;
</programlisting>
Poniewa¿ serwer u¿ywa kodowania Unicode (UTF-8), wiêc tekst wstawiony jako
zawarto¶æ tego parametru tak¿e musi byæ zakodowany w UTF-8.
</para></listitem>
<listitem><para>
<emphasis>html_footer</emphasis> - tekst od³±czany na koniec ka¿dego dokumentu HTML
generowanego przez program. Domy¶lnie zawiera tylko odpowiednie tagi
zamykaj±ce:
<programlisting>
	&lt;/body&gt;
&lt;/html&gt;
</programlisting>
Podobnie jak w przypadku poprzedniego parametru, tekst powinien byæ zakodowany
w UTF-8.
</para></listitem>
</itemizedlist>
<para>
Poza tym w pliku powinna znale¼æ siê konfiguracja jednego lub wiêcej serwerów
HTTP, zgodnie z opisem w rozdziale <xref linkend="isl-server-config">.
</para>

</section> <!-- isl-paramd-konfiguracja -->

<section id="isl-paramd-get">
<title>Dostêp do zasobów serwera paramd</title>
<para>
<filename>Paramd</filename> udostêpnia informacje o parametrach pogrupowanych wed³ug ich hierarchicznej nazwy
lub raportów, w których s± umieszczone. Jak uzyskaæ informacje o parametrach opisuje rozdzia³ <xref
linkend="isl-paramd-get-params">. Natomiast funkcje zwi±zane z raportami (wykorzystywane g³ównie przez program <filename>raporter3</filename>) opisane s± w
<xref linkend="isl-paramd-get-reports">.
</para>

<section id="isl-paramd-get-params">
<title>Dostêp do informacji o parametrach</title>

<para>
Przechowywana przez program informacja o parametrach ma postaæ drzewa. Dostêp
do niego uzyskuje siê przez specyfikowanie ¶cie¿ki dostêpu podobnie jak do
zasobów WWW. Dok³adne informacje o postaci ¶cie¿ki (lokatora - URI) znajduj±
siê ni¿ej. Lokator musi byæ zakodowany w UTF-8, przy czym
obs³ugiwane jest kodowanie za pomoc± sekwencji <emphasis>%kod</emphasis>. S± one
obowi±zkowe np. dla spacji. Alternatywnie, w lokatorze mo¿na u¿ywaæ zamiast
polskich liter ich angielskich odpowiedników, a zamiast spacji i uko¶nika
wystêpuj±cego w nazwie parametru znaku podkre¶lenia (szczegó³y w nastêpnym
rozdziale). Dokumenty serwowane s± z nag³ówkiem
"Expires:" zgodnym z czêstotliwo¶ci± od¶wie¿ania warto¶ci parametrów.

</para>
<para>
Dostêp do informacji udostêpnianych przez serwer wymaga podania, np. w oknie
przegl±darki internetowej, odpowiedniego adresu zasobu. Adres ten ma postaæ:
</para>
<para>
<emphasis>protokó³</emphasis>://<emphasis>adres_serwera</emphasis>:<emphasis>port</emphasis>/<emphasis>¶cie¿ka</emphasis>?<emphasis>opcje</emphasis>
</para>
<para>
Protokó³ mo¿e przyjmowaæ warto¶æ <emphasis>http</emphasis> dla po³±czeñ
zwyk³ych, lub <emphasis>https</emphasis> dla szyfrowanych (o ile ich obs³uga
zosta³a w³±czona w konfiguracji serwera).
</para>
<para>Adres serwera specyfikuje adres internetowy komputera, na którym dzia³a
program.
</para>
<para>
Port (po dwukropku) jest numerem portu, podanym w pliku konfiguracyjnym 
programu. 
</para>
<para>
¦cie¿ka jest to ¶cie¿ka dostêpu do ¿±danego zasobu. Mo¿e byæ pusta, co oznacza
dostêp do korzenia drzewa parametrów. Je¶li jest niepusta, to zawiera listê
kolejnych wêz³ów drzewa, pocz±wszy od korzenia, oddzielonych uko¶nikami.
Przyk³ad:
</para>
<para>
http://localhost:8081/Kocio³ 1/Sterownik/temperatura zadana
</para>
<para>
¦cie¿ka w tej postaci zostanie poprawnie zinterpretowana tylko je¶li
przegl±darka potrafi odpowiednio zakodowaæ wystêpuj±ce w niej polskie litery i
spacje. To tak¿e jednak nie wystarczy, je¿eli w nazwie wêz³a znajdzie siê np.
uko¶nik. W zwi±zku z tym polskie litery mo¿na zast±piæ ich angielskimi
odpowiednikami (zamiast "±" - a, "¡" - "A", "ñ" - "n", "¿" i "¼" - "z" itp.).
Zamiast spacji i uko¶nika w nazwie parametru mo¿na stosowaæ znak podkre¶lenia.
Tak wiêc ca³a ¶cie¿ka zapisana w ten sposób mo¿e wygl±daæ tak
</para>
<para>
http://localhost:8081/Kociol_1/Sterownik/temperatura_zadana
</para>
<para>
Wêz³y takie jak np. "Kocio³ 1" s± rodzajem katalogów, zawieraj± tylko inne
wêz³y. Natomiast wêze³ "temperatura zadana" odpowiada parametrowi. Ka¿dy
parametr posiada atrybuty, dostêp do nich jest mo¿liwy przez dodanie na koñcu
¶cie¿ki znaku "@" i nazwy atrybutu. Na przyk³ad:
</para>
<para>
http://localhost:8081/Kociol_1/Sterownik/temperatura_zadana@value
</para>
<para>
Dostêpne s± nastêpuj±ce atrybuty:
<itemizedlist>
<listitem><para>
<emphasis>name</emphasis> - nazwa parametru.
</para></listitem>
<listitem><para>
<emphasis>full_name</emphasis> - pe³na nazwa parametru , w postaci nazw wêz³ów 
oddzielonych dwukropkami (notacja u¿ywana w systemie SZARP).
</para></listitem>
<listitem><para>
<emphasis>short_name</emphasis> - skrócona nazwa parametru.
</para></listitem>
<listitem><para>
<emphasis>unit</emphasis> - nazwa jednostki parametru.
</para></listitem>
<listitem><para>
<emphasis>ipc_ind</emphasis> - indeks parametru w pamiêci dzielonej.
</para></listitem>
<listitem><para>
<emphasis>prec</emphasis> - precyzja parametru - liczby do 5 w³±cznie oznaczaj± ilo¶æ
cyfr po przecinku, powy¿ej s± to warto¶ci specjalne. Atrybut ten jest u¿ywany
wewnêtrznie przez serwer do interpretowania warto¶ci parametru odczytanej z
pamiêci dzielonej.
</para></listitem>
<listitem><para>
<emphasis>value</emphasis> - warto¶æ parametru. Napis "unknown" oznacza brak
dostêpno¶ci tej informacji (np. niedzia³aj±cy serwer SZARP, brak komunikacji ze
sterownikami itp.).
</para></listitem>
<listitem><para>
<emphasis>v_u</emphasis> - warto¶æ parametru wraz z jednostk±.
</para></listitem>
</itemizedlist>
</para>

<para>
Po znaku zapytania mo¿na podaæ opcje do zapytania. Opcje maj± postaæ
"nazwa=warto¶æ" i s± oddzielane od siebie znakiem "&". Na przyk³ad:
</para>
<para>
http://localhost:8081/Kociol_1/Sterownik?_opcja1=wart1&_opcja2=wart2
</para>
<para>
Obecnie dostêpna jest jedna opcja o nazwie "output". Okre¶la ona, co ma pojawiæ
siê na wyj¶ciu serwera (zostaæ wys³ane do przegl±darki). Mo¿e ona przyjmowaæ
nastêpuj±ce warto¶ci:
<itemizedlist>
<listitem><para>
<emphasis>html</emphasis> - warto¶æ domy¶lna, okre¶la ¿e wygenerowana ma zostaæ strona
HTML. Dla parametrów strona zawiera informacje o warto¶ciach atrybutów oraz
link do wêz³a nadrzêdnego. Dla pozosta³ych wêz³ów zawiera listê wêz³ów
potomnych (je¶li s± to parametry, to tak¿e ich warto¶ci i nazwê skrócon±), oraz
link do wêz³a nadrzêdnego. Elementy listy s± tak¿e linkami, po ich klikniêciu
nastêpuje przej¶cie do odpowiedniego wêz³a.
</para></listitem>
<listitem><para>
<emphasis>xml</emphasis> - serwer wysy³a zawarto¶æ danego wêz³a wraz z wêz³ami
potomnymi w postaci XML. Zawsze serwowany jest kompletny dokument XML. Dokument
ten ma ustawion± domy¶ln± przestrzeñ nazw XML (XML namespace) na identyfikator
<emphasis>http://www.praterm.com.pl/ISL/params</emphasis>.
</para></listitem>
<listitem><para>
<emphasis>text</emphasis> - warto¶æ przyjmowana tak¿e dla innych, nieznanych warto¶ci
opcji. Produkuje wyj¶cie takie jak opcja "xml", ale generowany jest inny
nag³ówek HTTP, z typem zawarto¶ci "text/plain". Pozwala to na wy¶wietlenie
dokumentu XML w postaci czystego tekstu tak¿e w przegl±darkach nie
obs³uguj±cych XML.
</para></listitem>
</itemizedlist>
Je¿eli podana ¶cie¿ka zawiera nazwê atrybutu, to warto¶æ opcji "output" nie mo¿e
byæ równa "html" - je¶li jest ró¿na od "xml", to traktowana jest jak "text".
Wysy³any jest dokument XML zawieraj±cy wêze³ z warto¶ci± atrybutu
parametru w kodowaniu UTF-8.
</para>
<para>
Wszystkie generowane dokumenty XML zgodne s± z DTD, które mo¿na znale¼æ w
pliku <filename>params.dtd</filename>.
</para>
</section> <!-- isl-paramd-get-params -->

<section id="isl-paramd-get-reports">
<title>Dostêp do informacji o raportach</title>
<para>
<filename>Paramd</filename> udostêpnia informacje o parametrach umieszczonych w raportach w sposób analogiczny do opisanego w rozdziale <xref linkend="isl-paramd-get-params">. Dodatkowe funkcjonalno¶ci s± realizowane za
po¶rednictwem odpowiednio przygotowanej ¶cie¿ki dostêpu do zasobu zasobu (URI). <filename>Paramd</filename>
obs³uguje nastêpuj±ce ¶cie¿ki:

<itemizedlist>
<listitem><para>
<emphasis>protokó³</emphasis>://<emphasis>adres_serwera</emphasis>:<emphasis>port</emphasis>/xreports - udostêpnia w postaci dokumentu XML listê raportów zdefiniowanych w IPK.
</para></listitem>
<listitem><para>
<emphasis>protokó³</emphasis>://<emphasis>adres_serwera</emphasis>:<emphasis>port</emphasis>/xreports?title=<emphasis>nazwa
raportu</emphasis> - udostêpnia w postaci dokumentu XML listê parametrów raportu wraz z warto¶ciami.
</para></listitem>
<listitem><para>
<emphasis>protokó³</emphasis>://<emphasis>adres_serwera</emphasis>:<emphasis>port</emphasis>/custom?title=<emphasis>klucz identyfikacyjny</emphasis> - udostêpnia w postaci dokumentu XML listê parametrów raportu definiowalnego wraz z warto¶ciami (tworzenie parametrów definiowalnych w <filename>paramd</filename> w rozdziale <xref linkend="isl-paramd-post">).
</para></listitem>
</itemizedlist>
</para>
</section> <!-- isl-paramd-get-reports -->

</section> <!-- isl-paramd-get -->
<section id="isl-paramd-put">
<title>Ustawianie warto¶ci parametrów</title>
<para>
Ustawianie warto¶ci parametrów jest bardzo proste - polega na dodaniu do
¶cie¿ki wpisywanej w przegl±darce opcji <emphasis>put</emphasis>, z warto¶ci±
bêd±c± ¿±dan± warto¶ci± parametru. Ustawianie parametrów mo¿liwe jest tylko
przy wykorzystaniu po³±czenia szyfrowanego. Ca³a ¶cie¿ka mo¿e wiêc mieæ postaæ:
</para>
<para>
https://localhost:8082/Kociol_1/Sterownik/temperatura_zadana?put=92.3
</para>
<para>
Nale¿y zwróciæ uwagê, ¿e dla ró¿nych typów parametrów dopuszczalne s± tylko
pewne warto¶ci. Dla wiêkszo¶ci bêd± to warto¶ci liczbowe. Inne mo¿liwe zestawy
warto¶ci to:
</para>
<itemizedlist>
<listitem><para>
<emphasis>Tak, Nie</emphasis>
</para></listitem>
<listitem><para>
<emphasis>Pochmurno, Zmiennie, Slonecznie</emphasis>
</para></listitem>
<listitem><para>
<emphasis>Plus, Minus</emphasis>
</para></listitem>
</itemizedlist>
<para>
Przy próbie ustawienia warto¶ci parametru przegl±darka poprosi o nazwê
u¿ytkownika i has³o. Podany u¿ytkownik musi istnieæ na komputerze, na którym
dzia³a serwer <application>paramd</application> z podanym has³em, a poza tym
u¿ytkownik musi mieæ zapisany w konfiguracji serwera dostêp do podanego
parametru (zobacz <xref linkend="isl-paramd-konfiguracja">). Przy kolejnym ustawieniu warto¶ci
parametru podawanie has³a nie bêdzie ju¿ konieczne, chyba ¿e od ostatniego
dostêpu do parametru up³ynê³o wiêcej ni¿ 5 minut. Ma to zabezpieczyæ przed
sytuacj±, gdy kto¶ z uprawnieniami ustawi warto¶æ parametru, po czym zostawi
komputer z w³±czon± przegl±dark±. 
</para>
</section> <!-- isl-paramd-put -->

<section id="isl-paramd-post">
<title>Definiowanie w³asnych raportów</title>
<para>
Funkcjonalno¶æ ta jest wykorzystywana przez program <filename>raporter3</filename>. Raporty definiowalne mo¿na dodaæ do <filename>paramd</filename> przesy³aj±c odpowiednio przygotowany XML metod± POST HTTP na adres:
<para>
<emphasis>protokó³</emphasis>://<emphasis>adres_serwera</emphasis>:<emphasis>port</emphasis>/custom/add
</para>
<para>
Przesy³any XML powinien byæ zgodny ze schematem RelaxNG
umieszczonym w pliku <filename>resources/dtd/params-list.rng</filename>
(lokalizacja pliku wzglêdem g³ównego katalogu SZARP), u¿ywaj±cym przestrzeni
nazw o identyfikatorze
<emphasis>http://www.praterm.com.pl/SZARP/list</emphasis>.
W odpowiedzi otrzymuje siê klucz identyfikacyjny, a zdefiniowany raport bêdzie dostêpny pod adresem: 
</para>
<para>
<emphasis>protokó³</emphasis>://<emphasis>adres_serwera</emphasis>:<emphasis>port</emphasis>/custom/<emphasis>klucz identyfikacyjny</emphasis>
</para>
<para>
Zdefiniowany raport bêdzie dostêpny w <filename>paramd</filename> dopóki bêd± do niego odwo³ania (tzn. je¿eli przez okre¶lony okres czasu nikt siê nie odwo³a do powy¿szego adresu, raport ten bêdzie usuniêty).
</para>
</section> <!-- isl-paramd-post -->

</section> <!-- isl-paramd -->

<section id="isl-howto">
<title>Wizualizacja z wykorzystaniem ISL - HOWTO</title>

<para>
Rozdzia³ ten opisuje pokrótce za³o¿enia dzia³ania, sposób instalacji
i konfiguracji oraz tworzenie schematów wizualizacji z wykorzystaniem
technologii ISL.
</para>

<section>
<title>Opis dzia³ania</title>

<para>
Sposób dzia³ania ISL jest do¶æ prosty, wykorzystuje istniej±ce darmowe 
narzêdzia 
i otwarte technologie. Aby lepiej zrozumieæ co i jak chcemy osi±gn±æ, 
prze¶ledzimy drogê jak± przebywaj± dane technologiczne, aby pojawiæ siê na 
ekranie u¿ytkownika. Wygodniej bêdzie zacz±æ od koñca, czyli w³a¶nie od
ekranu u¿ytkownika.
</para>
<para>
Jako program kliencki wykorzystywana jest przegl±darka Firefox w wersji
1.5 lub pó¼niejszej - te wersje obs³uguj± jêzyk SVG. SVG jest zaprojektowanym
specjalnie dla Internetu jêzykiem opisu grafiki wektorowej opartym na XML,
stworzonym przez organizacjê World Wide Web Consortium, autora miêdzy innymi
standardów HTML czy XML. 
</para>
<para>
Wy¶wietlany przez przegl±darkê obraz jest dokumentem SVG, czyli plikiem XML
z opisem prezentowanego obrazu. Jednym z elementów dokumentu jest skrypt
w interpretowanym przez przegl±darkê jêzyku JavaScript (wa¿ne - kod JavaScript
jest wykonywany po stronie przegl±darki, a nie serwera). Zadaniem skryptu
jest od¶wie¿anie elementów obrazu zale¿nych od warto¶ci prezentowanych 
parametrów. Mog± to byæ zarówno wypisywane liczby, jak i inne atrybuty
obrazu.
</para>
<para>
Przegl±darka Firefox pobiera dokument SVG z serwera ISL. Jest nim specjalnie
przygotowana konfiguracja serwera Apache, czyli darmowego, najpopularniejszego
na ¶wiecie serwera WWW. Serwer ISL ma 2 zadania - przygotowanie wy¶wietlanego
przez przegl±darkê dokumentu SVG, a tak¿e odpowiadanie na zadawane przez
kod JavaScript pytania o aktualne warto¶ci parametrów.
</para>
<para>
Zarówno dokument SVG jak i dane o warto¶ciach parametrów powstaj± na podstawie
informacji zawartych w przygotowanym przez osobê konfiguruj±c± system
schemacie ISL. Schemat ISL jest statycznym (a wiêc nie zawieraj±cym
JavaScript) dokumentem SVG, zawieraj±cym dodatkowo informacje na temat
elementów rysunku zale¿nych od parametrów z systemu SZARP. Mo¿liwo¶æ 
mieszania danych
ró¿nego typu (grafika wektorowa i dane o parametrach) jest jedn± z
istotniejszych cech standardu XML, z którego korzysta SVG. Schemat ISL
przygotowuje siê w programie graficznym - dalsze rozdzia³y zawieraj±
dok³adniejsze informacje na ten temat.
</para>
<para>
Serwer ISL, po otrzymaniu od przegl±darki u¿ytkownika ¿±dania pobrania
schematu wizualizacji, wczytuje schemat ISL i zastêpuje wystêpuj±ce w nim
odniesienia do parametrów przez ich warto¶ci. Podobnie odbywa siê aktualizacja
wy¶wietlanych warto¶ci przez kod JavaScript. Wykorzystany jest tu mechanizm
o nazwie AJAX. JavaScript wysy³a co zadany czas (np. 10 sekund) do serwera 
¿±danie pobrania dokumentu XML
zawieraj±cego aktualne warto¶ci parametrów. Serwer, na podstawie schematu ISL,
ustala jakie parametry w nim wystêpuj±, a nastêpnie przesy³a ich listê z
aktualnymi warto¶ciami do przegl±darki. Kod JavaScript wczytuje t± listê i
podmienia wy¶wietlane elementy, tak aby pokazaæ ¶wie¿o pobrane, byæ mo¿e
zmienione warto¶ci parametrów. W ten sposób nie trzeba pobieraæ ca³ego
dokumentu, tak¿e modyfikacja elementów w przegl±darce jest szybsza ni¿ 
rysowanie ca³ego obrazu od nowa.
</para>
<para>
Przetwarzanie schematów ISL na wy¶wietlane dokumenty SVG oraz na listê
aktualnych warto¶ci parametrów wykonywane jest za pomoc± uruchamianego przez
serwer Apache fragmentu kodu w jêzyku Python, który to z kolei u¿ywa
szablonów XSLT. XSLT to kolejny oparty na XML jêzyk, s³u¿±cy do opisu 
przekszta³ceñ (transformacji) dokumentów XML. W trakcie przekszta³ceñ,
poza dodawaniem elementów (takich jak np. kod w JavaScript) czy usuwaniem
zbêdnych (lista aktualnych warto¶ci parametrów jest tak naprawdê nadal
schematem ISL, ale z usuniêtymi wszystkimi elementami poza informacjami
o parametrach), konieczne jest pobieranie warto¶ci parametrów z systemu SZARP.
</para>
<para>
Szablony XSLT wyposa¿one s± w mechanizm pozwalaj±cy na pobieranie fragmentów
innych dokumentów XML. Warto¶ci parametrów s± wiêc udostêpnianie serwerowi
ISL w postaci dokumentów XML przez serwer parametrów systemu SZARP, program
paramd (zobacz <xref linkend="isl-paramd">).
</para>
<para>
<mediaobject>
	<imageobject><imagedata scale="60"
			fileref="pics/isl.png">
	</imageobject>
</mediaobject>

</para>

</section>

<section>
<title>Instalacja i konfiguracja serwera ISL</title>

<para>
W przypadku instalacji korzystaj±cych ze wsparcia firmy Praterm serwer
ISL zwykle bêdzie zainstalowany i skonfigurowany. Zrobienie tego we
w³asnym zakresie jest tak¿e do¶æ proste.
</para>

<para>
Serwer ISL instalujemy na maszynie, na której zainstalowany i uruchomiony
jest system SZARP - zak³adam, ¿e jest to komputer z Debianem. Instalacja 
sprowadza siê do zainstalowania za pomoc± komendy np.
<command>apt-get</command> pakietu <emphasis>szarp-xsltd</emphasis> (wymagane
s± uprawnienia administratora):
<programlisting>
# apt-get install szarp-xsltd
</programlisting>
</para>

<para>
Jako zale¿no¶ci zainstalowany zostanie pakiet
<emphasis>szarp-paramd</emphasis> oraz serwer Apache wraz z modu³em
mod-python. Do konfiguracji serwera Apache zostanie dodany
<emphasis>site</emphasis> (czyli logiczny serwer) obs³uguj±cy ISL, na porcie
8083. Plik konfiguracyjny serwera Apache to
<command>/etc/apache2/sites-available/szarp</command>, bêd±cy linkiem na plik
<command> /opt/szarp/resources/xsltd/apache2-szarp</command>.
</para>

<para>
Nastêpnie musimy upewniæ siê, ¿e w konfiguracji systemu SZARP w³±czone
jest uruchamianie programów paramd i tworzenie linku do konfiguracji dla
serwera ISL. W pliku <command>/etc/szarp/parstart.cfg</command> sprawdzamy,
czy w pierwszej sekcji (przeznaczonej dla serwera) zmienne
<emphasis>PARAMD</emphasis> i <emphasis>XSLTD</emphasis> ustawione s± na
<emphasis>1</emphasis>. Je¶li nie, zmieniamy ich warto¶æ a nastêpnie
restartujemy oprogramowanie SZARP za pomoc± komendy (wymagane s± uprawnienia
administratora):
<programlisting>
# /etc/init.d/parstart restart
</programlisting>
Je¶li serwer Apache by³ wcze¶niej zainstalowany, tak¿e mo¿e byæ koniecznie
jego prze³adowanie:
<programlisting>
# /etc/init.d/apache2 reload
</programlisting>
</para>

<para>
Po restarcie SZARP'a katalog <command>/etc/szarp/default</command> powinien
byæ linkiem na katalog z konfiguracj± SZARP'a, czyli
<command>/opt/szarp/</command><emphasis>prefix</emphasis>, gdzie
<emphasis>prefix</emphasis> oznacza unikalny identyfikator konfiguracji,
podany przy konfiguracji pakietu szarp-server
(w przypadku "ciep³owniczych" instalacji SZARP jest to zwykle czteroliterowy 
skrót nazwy miasta, np. <emphasis>prza</emphasis> dla Przasnysza).
W tym katalogu, w podkatalogu <command>config/isl</command> bêdziemy 
umieszczaæ schematy ISL.
</para>

<para>
Dodatkowo wszystkie pliki w katalogu 
<command>/opt/szarp/</command><emphasis>prefix</emphasis><command>/config</command> 
o nazwie odpowiadaj±cej wzorcowi <emphasis>*.apache</emphasis> zostan± wczytane do pliku
konfiguracyjnego serwera Apache. Pozwala to na ustawienie dodatkowych opcji. Przyk³adowy plik 
<command>index.apache</command> ustala przekierowania domy¶lnie ³adowanej strony - domy¶lnie 
³adowany bêdzie plik <command>schemat.isl</command>:
<programlisting>
<![CDATA[
RewriteRule ^/isl/$ /isl/schemat.isl [R,L]
RewriteRule ^/isl$ /isl/schemat.isl [R,L]
RewriteRule ^/$ /isl/schemat.isl [R,L]
RewriteRule ^/isl/index.html$ /isl/schemat.isl [R,L]
]]>
</programlisting>
Po zmianach w pliku nale¿y prze³adowaæ serwer Apache komend±:
<programlisting>
# /etc/init.d/apache2 reload
</programlisting>
</para>

<para>
Innym istotnym plikiem, którego lokalizacjê warto zapamiêtaæ, jest plik 
<command>/opt/szarp/</command><emphasis>prefix</emphasis><command>/config/params.xml</command>,
zawieraj±cy konfiguracjê serwera SZARP dla danego serwera.
</para>

</section>

<section>
<title>Uruchomienie przyk³adowego schematu</title>
<para>
Rozpoczniemy od uruchomienia przyk³adowego schematu. Znajduje
siê on w pliku <command>termometr.isl</command>, który
mo¿emy znale¼æ albo w ¼ród³ach SZARP, albo w zainstalowanym
pakiecie, w podkatalogu
<command>isl/examples/isl/new</command>.
</para>
<para>
Plik kopiujemy do katalogu
<command>/opt/szarp/</command><emphasis>prefix</emphasis><command>/config/isl</command>. 
Upewniamy siê, ¿e w pliku jest umieszczone odpowiednie odniesienie do
parametru SZARP. W tym celu otwieramy plik w dowolnym edytorze tekstowym
(najlepiej wyposa¿onym w pod¶wietlanie sk³adni) i szukamy ci±gu znaków
<emphasis>isl:href</emphasis> (o jego dok³adnym znaczeniu dowiemy siê
pó¼niej). Ca³a znaleziona linia powinna mieæ postaæ:
<programlisting>
isl:uri="http://localhost:8081/Siec/Sterownik/temperatura_zewnetrzna@value"
</programlisting>
Mo¿emy zaznaczyæ ten link (to co jest w ¶rodku cudzys³owu) i skopiowaæ go do 
paska adresu przegl±darki WWW.
<warning>
	<para>
Je¶li przegl±darkê uruchamiamy na innym komputerze ni¿ serwer SZARP, to musimy
zamiast localhost podaæ adres serwera i upewniæ siê, ¿e program paramd bêdzie
przyjmowa³ po³±czenia z naszego komputera.
</para></warning>

Przegl±darka powinna wy¶wietliæ warto¶æ parametru, np. w postaci:
<programlisting>
<![CDATA[
<?xml version="1.0"?>                                                           
<params xmlns="http://www.praterm.com.pl/ISL/params">
	<attribute name="value">16.9</attribute>
</params>
]]>
</programlisting>
Je¶li otrzymamy komunikat, ¿e nie mo¿na po³±czyæ siê z serwerem, nale¿y
sprawdziæ czy program paramd jest odpowiednio skonfigurowany, dzia³a i
przyjmuje po³±czenia z naszego adresu. 
</para>
<para>
Je¶li za¶ otrzymamy informacjê, ¿e nie znaleziono strony ("Wêze³
nieznaleziony"), oznacza to ¿e
konfiguracji naszego serwera SZARP nie ma parametru o nazwie odpowiadaj±cej
¶cie¿ce podanej w pliku termometr.isl. Musimy podaæ jaki¶ inny parametr,
znalezienie go zaczynamy od wpisania w pasek adresu przegl±darki pierwszej
czê¶ci poprzednio podanego adresu, czyli np.
<emphasis>http://localhost:8081/</emphasis>. Powinni¶my zobaczyæ stronê
zawieraj±c± specjalny link <emphasis>Reports</emphasis> oraz nazwy grup
parametrów dostêpnych na serwerze.
<note>
<para>
Nazwy parametrów SZARP sk³adaj± siê z trzech czê¶ci oddzielonych dwukropkiem,
z których pierwsz± nazywamy zwykle grup±, a drug± jednostk±. Np. w przypadku
parametru <emphasis>Sieæ:Sterownik:temperatura zewnêtrzna</emphasis> mamy do
czynienia z grup± <emphasis>Sieæ</emphasis>, jednostk±
<emphasis>Sterownik</emphasis> i parametrem <emphasis>temperatura
zewnêtrzna</emphasis>. Przy podawaniu adresów dla programu paramd dwukropki
zastêpujemy uko¶nikami.
</para>
</note>
Wybieramy grupê, jednostkê i parametr (patrz informacja wy¿ej), 
przy czym najlepiej
aby parametr ten mia³ warto¶ci mieszcz±ce siê w zakresie podobnym jak
temperatura zewnêtrzna (czyli -40 do +50), w przeciwnym razie nasz termometr
bêdzie mia³ problem z wy¶wietleniem warto¶ci parametru. Podmieniamy odno¶nik
w pliku termometr.isl na adres uzyskany w przegl±darce, nie zapominaj±c dodaæ
czê¶ci po znaku <emphasis>@</emphasis>. W pliku znajduje siê drugi odno¶nik do
tego samego parametru - powtarzamy szukanie <emphasis>isl:href</emphasis> i
podmieniamy drugi wpis (zachowuj±c czê¶æ po znaku <emphasis>@</emphasis>).
Zapisujemy zmodyfikowany plik.
</para>
<para>
Nastêpnie uruchamiamy przegl±darkê Firefox i wpisujemy adres
<emphasis>http://localhost:8083/isl/termometr.isl</emphasis>. Je¶li wszystko
zrobili¶my poprawnie, to powinni¶my zobaczyæ termometr pokazuj±cy warto¶æ
wpisanego do pliku parametru.
</para>
<para>
Po modyfikacji pliku (albo dodaniu nowego) nie jest konieczne restartowanie
¿adnej us³ugi - jedynie u¿ycie przycisku "Od¶wie¿" w przegl±darce.
</para>
</section>

<section>
<title>Co mo¿na umie¶ciæ w schemacie</title>
<para>
Poni¿szy rozdzia³ opisuje budowê plików ISL. Je¶li zamierzasz jedynie wklejaæ
warto¶ci tekstowe parametrów do schematów, mo¿esz go na razie opu¶ciæ i
przej¶æ do kolejnego rozdzia³u opisuj±cego edycjê schematów za pomoc± programu
Inkscape.
</para>
<para>
Jak ju¿ pisali¶my dokumenty ISL s± plikami graficznymi w formacie SVG, z
zwartymi dodatkowymi informacjami dotycz±cymi pobierania warto¶ci parametrów z
systemu SZARP. Sam format SVG oparty jest na standardzie XML. Wiêcej o
standardzie XML mo¿na znale¼æ np. w 
<ulink url="http://pl.wikipedia.org/wiki/XML">Wikipedii</ulink>, dla nas
bardzo istotne jest, ¿e dokumenty XML s± plikami tekstowymi, które mo¿na
ogl±daæ i edytowaæ w zwyk³ym edytorze tekstowym.
<note>
	<para>
		Je¶li u¿ywasz Windows,
		nie próbuj otwieraæ dokumentów XML w Notatniku -
		prawdopodobnie otrzymasz jedn± d³ug±, nieczyteln± liniê -
		Notatnik nie obs³uguje koñców linii typu uniksowego. Je¶li nie
		masz ¿adnego lepszego edytora, mo¿esz u¿yæ Wordpada.
	</para>
</note>
Rysunki SVG s± zwykle na tyle skomplikowanym dokumentem, ¿e jego edycja
rêczna (w edytorze tekstowym) nie jest mo¿liwa. Ale elementów zwi±zanych z ISL
jest niedu¿o i mo¿na je ³atwo wyszukaæ w dokumencie.
</para>
<para>
Wszystkie istotne elementy wystêpuj± w przyk³adowym dokumencie termometr.isl,
który zainstalowali¶my w poprzednim rozdziale. Otwieramy ten dokument w edytorze
tekstowym i szukamy ci±gów znaków <emphasis>isl</emphasis>. Po
kolei w dokumencie napotkamy:
</para>

<itemizedlist>
<listitem><para>
<programlisting>
<![CDATA[
<svg xmlns:isl="http://www.praterm.com.pl/ISL/params" ... />
]]>
</programlisting>
Jest to deklaracja przestrzeni nazw ISL, która mówi ¿e elementy i atrybuty
o nazwach zaczynaj±cych siê od <emphasis>isl:</emphasis> nale¿± do przestrzeni
nazw ISL. S³owo wyja¶nienia:
dokument XML sk³ada siê z elementów, które mogê zawieraæ
atrybuty opisuj±ce te elementy, a tak¿e zawarto¶æ tekstow±.
Atrybuty posiadaj± nazwê i warto¶æ. Elementy mog± byæ dowolnie 
zagnie¿d¿ane. Pocz±tek i koniec elementu oznaczamy nazw±
elementu ujêt± w nawiasy ostre (przy czym oznaczenie koñca ma
dodatkowo jeszcze uko¶nik), warto¶ci atrybutów zapisujemy w
cudzys³owie. Przyk³adów reprezentacja struktury ksi±¿ki w XML:
<programlisting>
<![CDATA[
<ksi±¿ka>
	<rozdzia³ numer="1" tytu³="Wstêp">
		To jest tre¶æ rozdzia³u 1.
	</rozdzia³>
	<rozdzia³ numer="2" tytu³="Wielki wybuch">
		To jest tre¶æ rozdzia³u 2.
	</rozdzia³>
	<rozdzia³ numer="3" tytu³="Epilog">
		To jest tre¶æ rozdzia³u 3.
	</rozdzia³>
</ksi±¿ka>
]]>
</programlisting>
</para>
<para>
Mechanizm przestrzeni nazw pozwala na mieszanie w jednym dokumencie XML
elementów i atrybutów ró¿nych typów - przez przedrostek
<emphasis>isl:</emphasis> oznaczamy elementy i atrybuty, które nie maj± byæ
traktowane jako obiekty graficzne SVG, ale jako dodatkowe informacja zwi±zane
z ISL. Tak wiêc powy¿sza deklaracja przestrzeni nazw jest pierwszym i
niezbêdnym elementem do dzia³ania ca³ego systemu.
</para>
</listitem>

<listitem><para>
<programlisting>
<![CDATA[
<rect style="..." ...
	height="305.396825"
	isl:uri="http://localhost:8081/Siec/Sterownik/temperatura_zewnetrzna@value"
	isl:target="height"
	isl:shift="145" 
	isl:scale="2.8"
	... />
]]>
</programlisting>
Tu mamy do czynienia z do¶æ skomplikowanym przyk³adem. Element
<emphasis>rect</emphasis> opisuje prostok±t, atrybut
<emphasis>height</emphasis> odpowiada jego aktualnej wysoko¶ci.
Na rysunku prostok±t ten reprezentuje s³upek rtêci termometru. Chcemy, aby
s³upek ten zwiêksza³ siê wraz ze wzrostem temperatury. Atrybut
<emphasis>isl:uri</emphasis> zawiera link do parametru, którego warto¶æ chcemy
reprezentowaæ. Koñcówka <emphasis>@value</emphasis> oznacza, ¿e interesuje nas
warto¶æ liczbowa parametru (parametr ma te¿ inne w³a¶ciwo¶ci, takie jak np.
jednostka czy nazwa). Atrybut <emphasis>isl:target</emphasis> informuje nas,
¿e warto¶æ parametru bêdzie wp³ywa³a na atrybut <emphasis>height</emphasis>
elementu <emphasis>rect</emphasis>, czyli na wysoko¶æ prostok±ta. W ten sposób
uzale¿niamy wysoko¶æ prostok±ta (s³upka rtêci) od warto¶ci parametru.
</para>
<para>
Nie jest to jednak wystarczaj±ce - wysoko¶æ prostok±ta powinna przyjmowaæ
wymiary wynikaj±ce z jego po³o¿enia na rysunku, które raczej nie bêd±
bezpo¶rednio odpowiadaæ mierzonej temperaturze - np. dla temperatury 0 stopni
s³upek powinien mieæ oko³o po³owy swojej maksymalnej wielko¶ci. Do
przeskalowania temperatury na odpowiedni± wysoko¶æ s³u¿± atrybuty liczbowe
<emphasis>isl:scale</emphasis> i <emphasis>isl:shift</emphasis>. Warto¶æ
atrybutu <emphasis>height</emphasis> wyliczana jest ostatecznie wed³ug wzoru:
<programlisting>
	height = [warto¶æ parametru] * isl:scale + isl:shift
</programlisting>
Wspó³czynniki skalowania i przesuniêcia dobraæ mo¿na eksperymentalnie - po 
narysowaniu s³upka rtêci w programie graficznym w pozycji 0 nale¿y sprawdziæ 
aktualn± wysoko¶æ s³upka i przyj±æ j± jako <emphasis>isl:shift</emphasis>,
nastêpnie narysowaæ s³upek w pozycji +50 stopni i zobaczyæ o ile zwiêkszy³a
siê wysoko¶æ prostok±ta - warto¶æ ta podzielona przez 50 da prawid³ow± warto¶æ
<emphasis>isl:scale</emphasis>.
</para>
<para>
Podobnej transformacji mog± podlegaæ inne atrybuty. Dostêpne atrybuty i ich
znaczenie opisane s± w specyfikacji SVG, dostêpnej na stronach 
<ulink url="http://www.w3.org/Graphics/SVG/">World Wide Web Consortium</ulink>
</para></listitem>

<listitem><para>
<programlisting>
<![CDATA[
<tspan ...
	isl:uri="http://localhost:8081/Siec/Sterownik/temperatura_zewnetrzna@v_u"
>?</tspan>
]]>
</programlisting>
Ten przyk³ad jest du¿o prostszy - mamy do czynienia z elementem <emphasis>tspan</emphasis>,
reprezentuj±cym fragment tekstu. Zawarto¶æ tego fragmentu ma byæ zast±piona warto¶ci±
parametru podanego w atrybucie <emphasis>isl:uri</emphasis>. Zwróæmy uwagê, ¿e u¿ywamy tu
atrybutu parametru o nazwie <emphasis>v_u</emphasis> - jest to skrót od 
<emphasis>value</emphasis> i <emphasis>unit</emphasis> - czyli otrzymujemy warto¶æ parametru
wraz z towarzysz±c± mu nazw± jednostki. Jest to najprostsza konstrukcja, pozwalaj±ca
na wklejenie do schematu napisu z aktualn± warto¶ci± parametru.
</para></listitem>
</itemizedlist>
</section>

<section id="isledit">
<title>Edycja schematów w programie Inkscape</title>
<para>
Mo¿liwa jest rêczna edycja plików SVG zgodnie z zasadami opisanymi w rozdziale powy¿ej, 
nie jest to jednak zbyt wygodne. Prostszym sposobem edycji ca³o¶ci schematu,
zarówno jego postaci graficznej, jak i informacji zwi±zanych z parametrami,
jest wykorzystanie programu Inkscape wraz z odpowiedni± wtyczk±.
</para>
<para>
Inkscape jest darmowym programem do edycji grafiki wektorowej, ze strony
<ulink url="http://www.inkscape.org">www.inkscape.org</ulink> mo¿na ¶ci±gn±æ
wersjê dla Windows, pakiety dla wiêkszo¶ci dystrybucji powinny byæ dostêpne
bezpo¶rednio w ramach dystrybucji. Dla Debiana instalacja sprowadza siê do
wydania komendy <command>apt-get install inkscape</command>.
</para>

<section>
<title>Instalacja wtyczki do edycji schematów ISL</title>
<para>
Do edycji schematów ISL potrzebna jest wtyczka, któr± mo¿na bezp³atnie pobraæ
ze stron SZARP'a.
<itemizedlist>
<listitem><para>
Je¶li korzystamy z Debiana, wtyczkê mo¿emy zainstalowaæ komend±:
<programlisting>
# apt-get install szarp-isledit
</programlisting>
</para></listitem>

<listitem><para>
Dla innych dystrybucji Linuksa musimy ¶ci±gn±æ/skompilowaæ program 
<application>isledit</application>, umie¶ciæ go katalogu
<command>/opt/szarp/bin</command>, ew. pliki t³umaczenia umie¶ciæ w katalogu
<command>opt/szarp/resources/locales/pl_PL/LC_MESSAGES/</command>. Nastêpnie
plik <emphasis>isledit.inx</emphasis> ze ¼róde³ SZARP'a kopiujemy do katalogu ze wtyczkami
Inkscape, np. <command>/usr/share/inkscape/extensions</command>.
</para></listitem>

<listitem><para>
Je¶li korzystamy z Windows, musimy ¶ci±gn±æ i zainstalowaæ wersjê SZARP dla
Windows. Nastêpnie plik <emphasis>isledit.inx</emphasis> znajduj±cy siê przy
domy¶lnej instalacji w katalogu <command>C:\Program Files\Szarp\resources</command> 
kopiujemy do katalogu ze wtyczkami Inkscape - domy¶lnie jest to 
<command>C:\Program Files\Inkscape\share\extensions</command>. Je¶li
instalowali¶my SZARP'a w innym miejscu ni¿ domy¶lne, musimy za pomoc± edytora
tekstowego poprawiæ ¶cie¿ki
wpisane w pliku <emphasis>isledit.inx</emphasis> (ten plik te¿ jest w formacie
XML).
</para></listitem>
</itemizedlist>
Je¶li wtyczka zosta³a poprawnie zainstalowana, po uruchomieniu programu
Inkscape w menu <emphasis>Efekty</emphasis> powinni¶my mieæ dostêpn± pozycjê
<emphasis>ISL Editor</emphasis>.
</para>
</section>

<section>
<title>Konfiguracja wtyczki - wybór konfiguracji</title>
<para>
Po wybraniu z menu <emphasis>Efekty</emphasis> opcji
<emphasis>ISL Editor</emphasis> poka¿e siê okienko, w którym musimy podaæ
¶cie¿kê do pliku <emphasis>params.xml</emphasis> z konfiguracj± SZARP, 
z której bêdziemy chcieli pobieraæ parametry. Mo¿na wykorzystaæ plik z
konfiguracji obecnej na komputerze na którym pracujemy, mo¿emy te¿ po prostu 
skopiowaæ odpowiedni plik <emphasis>params.xml</emphasis>.
</para>
</section>

<section>
<title>Tworzenie elementów tekstowych</title>
<para>
Na pocz±tek spróbujemy utworzyæ schemat wy¶wietlaj±cy w postaci tekstowej
warto¶æ parametru. W tym celu wybieramy z paska narzêdzi programu narzêdzie
tworzenie obiektów tekstowych (klawisz skrótu <guibutton>F8</guibutton>) i
dodajemy do rysunku dowolny tekst - niech bêdzie to np.
<emphasis>?</emphasis>. Nastêpnie wybieramy narzêdzie zaznaczania
(<guibutton>F1</guibutton>), mo¿emy trochê zwiêkszyæ rozmiar wprowadzonej
litery rozci±gaj±c j±. Maj±c zaznaczony nasz nowy obiekt wybieramy z menu
<emphasis>Efekty</emphasis> opcjê <emphasis>ISL Editor</emphasis>. W okienku
podajemy ¶cie¿kê do konfiguracji SZARP (pliku <emphasis>params.xml</emphasis>)
- program zapamiêta wprowadzon± warto¶æ, wiêc za kolejnym razem mo¿emy po
prostu klikn±æ <guibutton>Ok</guibutton>.
</para>
<para>
W okienku uruchomionej wtyczki na górze znajduje siê pole ze ¶cie¿k± do
wybranego parametru (je¶li tworzymy element, to bêdzie ono pocz±tkowo puste).
Za pomoc± przycisku <guibutton>Wybierz parametr</guibutton> otwieramy okienko
z drzewkiem parametrów do wyboru - wybieramy jaki¶ parametr i klikamy
<guibutton>Ok</guibutton>. Domy¶lnie wstawiana jest tylko warto¶æ parametru
(¶cie¿ka koñczy siê na <emphasis>@value</emphasis>), je¶li chcemy aby
pokazywana by³a tak¿e jednostka, zaznaczamy pole <guibutton>Poka¿ nazwê
jednostki</guibutton> - koñcówka ¶cie¿ki przyjmie warto¶æ
<emphasis>@v_u</emphasis>.
</para>
<para>
To wszystko - po zamkniêciu okienka i zapisaniu pliku mo¿emy go skopiowaæ na
serwer SZARP do katalogu ze schematami i uruchomiæ przegl±darkê ¿eby obejrzeæ
stworzony schemat.
</para>

</section>

<section>
<title>Modyfikacja atrybutów elementów</title>
<para>
Uzyskanie np. efektu s³upka rtêci którego wysoko¶æ zale¿y od temperatury
wymaga uzale¿nienia wysoko¶ci prostok±ta reprezentuj±cego s³upek termometru
od warto¶ci parametru. W tym celu, podobnie jak opisano wy¿ej, zaczynamy od
utworzenia obiektu na którym bêdzie operowaæ - tworzymy prostok±t (skrót
<guibutton>F4</guibutton>), nastêpnie maj±c go zaznaczonego uruchamiamy z menu
wtyczkê. Wybieramy parametr i klikamy na opcjê "Zast±p warto¶æ atrybutu". Z
rozwijanej listy wybieramy atrybut zaznaczonego obiektu, który chcemy uzale¿niæ
od warto¶ci parametru.
</para>
</section>

</section>

</section> <!-- isl-howto -->
</chapter> <!-- isl -->

<chapter id="sss">
<title>Aplikacja SSS.</title>
<section id="sss-info">
<title>Krótki opis.</title>
<para>
SSS(Szarp Sync Server) to serwer synchronizacji plików. Uruchomiony na serwerze,
pozwala u¿ytkownikom na pobieranie danych historycznych za pomoc± aplikacji SSC. 
Poza serwerem g³ównym mog± istnieæ mirrory, które udostêpniaj± wszystkie lub tylko
czê¶æ baz dostêpnych na serwerze g³ównym. Konfiguracja u¿ytkowników jest trzymana na serwerze
g³ównym i synchronizowana na mirrory. U¿ytkownicy z regu³y zawsze ³±cz± siê na serwer
g³ówny, który ew. odsy³a klientowi informacjê o przekierowaniu na mirror.
</para>
</section> <!-- sss-info -->

<section id="sss-config">
<title>Konfiguracja programu.</title>
<para>
Program czyta konfiguracjê z sekcji sss pliku <filename>szarp.cfg</filename>.
Obs³ugiwane opcje:
<itemizedlist>
<listitem><para>
<emphasis>key_file</emphasis> - ¶cie¿ka do pliku zawieraj±cego klucz prywatny wykorzystywany
do szyfrowania przesy³anych danych
</para></listitem>
<listitem><para>
<emphasis>ca_file</emphasis> - ¶cie¿ka do pliku zawieraj±cego klucz publiczny centrum autoryzacji,
przez które zosta³ podpisany klucz prywatny
</para></listitem>
<listitem><para>
<emphasis>passphrase</emphasis> - has³o do u¿ywanego klucza prywatnego
</para></listitem>
<listitem><para>
<emphasis>user</emphasis> - identyfikator u¿ytkownika, z którego uprawnieniami ma chodziæ proces
obs³uguj±cy po³±czenia z klientem
</para></listitem>
<listitem><para>
<emphasis>userdbfile</emphasis> - ¶cie¿ka do pliku zawieraj±cego listê u¿ytkowników
</para></listitem>
</itemizedlist>
Wszystkie w/w opcjê s± obowi±zkowe.
</para>
<para>
Na serwerze (mirrorze) instalujemy równie¿ paczkê szarp-sss. Zainstaluje ona dwa skrypty. update_ssuserdb.sh i sss_bases.pl. Pierwszy jest odpalany z crona co 15 min i aktualizuje bazê u¿ytkowników, wiec wszystkie wprowadzone zmiany przez interfejs www, bêd± zaktualizowane na wszystkich mirrorach za 15 minut. Drugi skrypt tworzy listê baz dostêpnych na danym mirrorze raz na dobê (co¶ oko³o pó³nocy). 
</para>
<para>
Na pocz±tku mo¿emy odpaliæ skrypty rêcznie, poniewa¿ interfejs www wymaga obecno¶ci pliku sss_bases w /opt/szarp/PREFIX/. Inaczej po dodaniu serwera nie zobaczymy go na li¶cie serwerów na g³ównej stronie. 
</para>
</section> <!-- sss-config -->

<section id="sss-usersdatabase">
<title>Baza u¿ytkowników.</title>
<para>
Baza u¿ytkowników ma postaæ pliku XML'owego. ¦cie¿ka do tego pliku powinna zostaæ 
podana w sekcji <emphasis>sss</emphasis> pliku <filename>szarp.cfg</filename>.
Przyk³adowa zawarto¶æ pliku:
<programlisting>
<![CDATA[
<?xml version="1.0" encoding="ISO-8859-2"?>
<users xmlns="http://www.praterm.com.pl/SZARP/sync-users">
  <user name="user" password="098f6bcd4621d373cade4e832627b4f6" basedir="/opt/szarp" sync="btw[1-2]" hwkey="" expired="-1" server="prat"/>
  <user name="user2" password="ad0234829205b9033196ba818f7a872b" basedir="/opt/szarp" sync="szw1" hwkey="ef393056f5" expired="20060811" server="kato"/>
  <server name="prat" ip="62.233.142.85"/>
  <server name="kato" ip="222.222.222.1"/>
</users>
]]>
</programlisting>
Pojedynczego u¿ytkownika opisuje element <emphasis>user</emphasis>. Wszystkie pokazane na przyk³adzie
atrybuty tego elementu s± obowi±zkowe, a ich znaczenie nastêpuj±ce:
<itemizedlist>
<listitem><para>
<emphasis>name</emphasis> - nazwa u¿ytkownika
</para></listitem>
<listitem><para>
<emphasis>password</emphasis> - skrót MD5 has³a u¿ytkownika. Mo¿na go wygenerowaæ np. komend± 
<command>echo -n "haslo" | md5sum</command>
</para></listitem>
<listitem><para>
<emphasis>basedir</emphasis> - katalog bazowy, tj. katalog którego podkatalogi s± wybierane 
do synchronizacji
</para></listitem>
<listitem><para>
<emphasis>sync</emphasis> - wyra¿enie regularne opisuj±ce podkatalogi katalogu bazowego, które
zostaj± u¿ytkownikowi udostêpnione
</para></listitem>
<listitem><para>
<emphasis>hwkey</emphasis> - klucz sprzêtowy danego komputera. Pozostawienie pustego pola oznacz
klucz wy³±czony, czyli akceptowany bêdzie ka¿dy klucz przys³any przez klienta. Klucz o warto¶ci 
<emphasis>0</emphasis> oznacza wy³±czenie mo¿liwo¶ci logowania siê przez u¿ytkownika. Klucz
o warto¶ci <emphasis>-1</emphasis>spowoduje,  ¿e przy pierwszym po³±czeniu klucz zostanie 
zarejestrowany, czyli pole uzupe³nione.
</para></listitem>
<listitem><para>
<emphasis>expired</emphasis> - data wa¿no¶ci konta w formacie YYYYMMDD, gdzie "-1" oznacza ze konto nigdy nie straci wa¿no¶ci.
</para></listitem>
<listitem><para>
<emphasis>server</emphasis> - nazwa konfiguracji z szarp.cfg serwera do którego jest przypisany u¿ytkownik np. dla rambo jest to prat
</para></listitem>

<listitem><para>
<emphasis>comment</emphasis> - komentarz na temat u¿ytkownika, widoczny tylko przez administratora.
</para></listitem>

</itemizedlist>

Pojedynczy server opisuje element <emphasis>server</emphasis>. Wszystkie pokazane na przyk³adzie
atrybuty tego elementu s± obowi±zkowe, a ich znaczenie nastêpuj±ce:
<itemizedlist>
<listitem><para>
<emphasis>name</emphasis> - nazwa konfiguracji z szarp.cfg server sss
</para></listitem>
<listitem><para>
<emphasis>ip</emphasis> - adres ip serwera sss
</para></listitem>
</itemizedlist>


Po zmianie zawarto¶ci bazy u¿ytkowników nale¿y wys³aæ do programu SSS sygna³ <emphasis>HUP</emphasis>,
co spowoduje wczytanie zaktualizowanej wersji bazy.
</para>
</section> <!-- sss-usersdatabase -->
<section id="sss-protocol">
<title>Protokó³ SSS/SSC </title>
<para>
Jest to opis wersji 2 protoko³u sss/ssc.
Po zainicjalizowaniu po³±czenia przez klienta protokó³ komunikacji wygl±da nastêpuj±co:
<itemizedlist>
<listitem><para>
<emphasis>klient</emphasis> - wysy³a liczbê 2 bajtow± oznaczaj±c± numer protoko³u z jakiego korzysta. Dziêki temu mo¿liwa jest obs³uga starych klientów. Server jest odpowiedzialny za poprawna obs³ugê protoko³ów.
</para></listitem>
<listitem><para>
<emphasis>klient</emphasis> - wysy³a trzy stringi, nazwê u¿ytkownika, has³o, i wygenerowany klucz sprzêtowy, koñczy wiadomo¶æ.
</para></listitem>
<listitem><para>
<emphasis>server</emphasis> - sprawdza poprawno¶æ has³a i klucza sprzêtowego, oraz czy u¿ytkownik jest przypisany do tego serwera sss. W odpowiedzi wysy³a liczbê 2 bajtow± zawieraj±c± wiadomo¶æ zdefiniowan± w strukturze Message, czyli AUTH_OK lub AUTH_FAILURE lub AUTH_REDIRECT.
</para></listitem>
<listitem><para>
<emphasis>server</emphasis> - je¶li autoryzacja przebieg³a pomy¶lnie (AUTH_OK) serwer przysy³a liczbê 2 bajtow± oznaczaj±c± komunikat (np zbli¿aj±ca siê utrata wa¿no¶ci konta, stara wersja protoko³u itp). je¶li autoryzacja nie uda³a siê, server przysy³a wiadomo¶æ w postaci liczby 2 bajtowej z komunikatem dlaczego np(konto niewa¿ne), je¶li autoryzacja jest przekierowana na inny serwer, to wysy³any jest string zawieraj±cy adres ip poprawnego serwera.
</para></listitem>
<listitem><para>
<emphasis>server</emphasis> - wysy³a liczbê baz do pobrania, "0" oznacza b³±d, dalej synchronizacja tak jak by³o... todo
</para></listitem>
</itemizedlist>

</para>
</section> <!-- sss-protocol -->

<section id="sss-web">
<title>Interfejs WWW do administracji u¿ytkownikami</title>
<para>
Dla u³atwienia ¿ycia administratora i u¿ytkowników, oraz aby daæ programistom
SZARP mo¿liwo¶æ pobawienia siê fajnym pythonowym frameworkiem, powsta³ interfejs
WWW do administracji u¿ytkownikami SSS. Interfejs ten pozwala na tworzenie, edycjê 
i usuwanie kont u¿ytkowników przez administratora, u¿ytkownikom daje mo¿liwo¶æ
podgl±du ich ustawieñ oraz zmiany/przypomnienia has³a.
</para>
<para>
Interfejs sk³ada siê z 3 niezale¿nych elementów, z których ka¿dy mo¿e znajdowaæ 
siê fizycznie na innej maszynie.
<itemizedlist>
	<listitem><para>
	Skrypt /opt/szarp/bin/ssconf.py odpowiada za bezpo¶rednie modyfikacje pliku
	XML z konfiguracj± u¿ytkowników, musi byæ wiêc zainstalowany bezpo¶rednio na
	maszynie na której dzia³a serwer SSS. Korzysta z konfiguracji w pliku szarp.cfg
	(¶cie¿ka do bazy itp.) oraz z dodatkowego pliku <filename>/etc/szarp/ssconf.cfg</filename>.
	Zawiera on login i has³o administratora (dlatego te¿ powinien byæ czytany tylko przez root'a),
	nazwê g³ównego serwera oraz adres TCP/IP na którym skrypt ma s³uchaæ - skrypt jest
	serwerem XML-RPC s³uchaj±cym na podanym adresie. Dostêp do serwera wymaga autoryzacji
	- albo has³em administratora, albo konkretnego u¿ytkownika - wtedy dostêpne s±
	tylko operacje dla konkretnego u¿ytkownika. Uruchamianie skryptu sterowane jest
	przez zmienn± <emphasis>SSCONF</emphasis> w pliku konfiguracyjnym 
	<filename>/etc/szarp/parstart.cfg</filename>, a sam skrypt wchodzi w sk³ad paczki szarp-daemons.
	</para>
	<para>
	Program ssconf.py ma te¿ drugi tryb dzia³ania, pozwalaj±cy na rejestracjê z linii poleceñ
	nowego klucza u¿ytkownika je¶li klucz dotychczas by³ w stanie 'Waiting' (-1). W tym celu ³±czy
	siê do swojej kopii dzia³aj±cej jako serwer - pozwala to unikn±æ problemów z synchronizacj±.
	Program w tym trybie jest wywo³ywany przez serwer SSS po tym jak u¿ytkownik pod³±czy siê
	do SSS w celu rejestracji nowego klucza.
	</para>
	</listitem>

	<listitem><para>
	Aplikacja WWW wykorzystuj±ca framework Pylons - konfigurowana przez plik 
	<filename>/etc/szarp/ssweb.ini</filename>. Aplikacja serwuje strony WWW,
	do pobierania i modyfikacji danych ³±czy siê przez protokó³ XML-RPC
	ze skryptem ssconf.py. Aplikacja powinna mieæ dostêp do dzia³aj±cego 
	serwera SMTP - jest to niezbêdne do wysy³ania u¿ytkownikom informacji o nowym
	czy zresetowanym ha¶le. W domy¶lnej konfiguracji administrator dostaje te¿
	powiadomienia mailem o b³êdach w dzia³aniu aplikacji.
	</para><para>
	Aplikacja wchodzi w sk³ad oddzielnej paczki szarp-sssweb
	(nie wymagaj±cej innych elementów SZARP'a).
	Mo¿e byæ uruchomiona jako samodzielny serwer (przydatne do testowania i debuggingu),
	albo jako skrypt FastCGI (dok³adniej tzw. External Fast CGI Server) do którego
	³±czy siê trzeci element - serwer WWW.
	</para></listitem>

	<listitem><para>
	Trzeci element to serwer WWW obs³uguj±cy FastCGI, a dok³adniej konfiguracjê
	typu External Server. W pliku README.Debian paczki szarp-sssweb znajduje siê
	przyk³ad konfiguracji wykorzystuj±cej serwer Apache2 i modu³ mod_fastcgi.
	</para></listitem>
</itemizedlist>
</para>
</section> <!-- sss-web -->

</chapter> <!-- sss -->

<chapter id="mobile">
<title>Komputery przeno¶ne.</title>

<section id="mobile-toc">
<title>Spis tre¶ci</title>
<para></para>
</section> <!-- mobile-toc -->

<section id="mobile-info">
<title>Krótki opis i wymagane biblioteki.</title>
<para>
Najczê¶ciej komputery przeno¶ne korzystaj± z modemów Sony Ericsson GCxx oraz po³±czeñ
EDGE-GPRS (ISP z regu³y ERA/IDEA). Dok³adny opis instalacji modemów z rodziny SE GCxx 
znajdziemy w HOWTO. Do obs³ugi/konfiguracji komputerów przeno¶nych wymagane s± dwa skrypty: ipk2mobile.pl i switch_controller.pl.
</para>

<para>
Wymagane biblioteki:
<itemizedlist>
<listitem><para>
libxml-parser-perl
</para></listitem>

<listitem><para>
xdialog
</para></listitem>

<listitem><para>
edge-gprs
</para></listitem>

</itemizedlist>
</para>


</section> <!-- mobile-info -->

<section id="mobile-conf">
<title>Konfiguracja.</title>
<para>
Oba skrypty (ipk2mobile.pl, switch_controller.pl) znajduj±ce siê z regu³y w /usr/work/szarp/script/mobile musimy przegraæ
do /opt/szarp/bin. 
</para>
<para>
Params.xml:
<itemizedlist>
<listitem><para>
Element "params" - musimy dopisaæ  np. xmlns:switch="http://www.praterm.com.pl/SZARP/ipk-extra".
"switch" mo¿emy zast±piæ czymkolwiek innym. Ponadto musimy dopisaæ u¿ytkownika, który bêdzie prze³±cza³
typy regulatorów (najczê¶ciej palacz), czyli dopisujemy:	switch:user="palacz". Przyk³adowy element params:
<programlisting>
params xmlns="http://www.praterm.com.pl/SZARP/ipk" xmlns:exec="http://www.praterm.com.pl/SZARP/ipk-extra" 
xmlns:switch="http://www.praterm.com.pl/SZARP/ipk-extra" version="1.0" read_freq="10" send_freq="10" title="Wêze³ przeno¶ny Sztum" switch:user="palacz"
</programlisting>
</para></listitem>
<listitem><para>
Element "device" - jako ¶cie¿kê podajemy zmy¶lon± sobie nazwê regulatora np. np1036, i umieszczamy prawdziw± ¶cie¿kê w atrybucie 
switch:real_path="...". Musimy jeszcze umie¶ciæ atrybut switch:name="...", który odpowiada za nazwê
typu regulatora widoczn± w scc.
</para></listitem>
<listitem><para>
Ostatnim elementem bêdzie daemon testdmn odpowiedzialny za rejestrowanie numeru pod³±czonego wêz³a.
¦cie¿kê musimy podaæ nastêpuj±c±:"/opt/szarp/$prefix/regulator_name", gdzie oczywi¶cie $prefix zamieniamy na 
odpowiedni prefix bazy. Przyk³adowa konfiguracja:
<programlisting>
device daemon="/opt/szarp/bin/testdmn" path="/opt/szarp/szw5/regulator_name" exec:frequency="60"
 unit id="1" type="1" subtype="1" bufsize="1"
   param name="Wêze³ przeno¶ny Sztum:Status:monitorowany wêze³" prec="0" base_ind="auto" unit="-" short_name="nmon" draw_name="Numer monitorowanego wêz³a"
   define type="RPN" formula="NULL"/
   raport title="Status monitoringu"/
     draw title="Status monitoringu" min="0" max="100"/
   /param
 /unit
/device 
</programlisting>
</para></listitem>

</itemizedlist>
</para>
<para>
Ostatnim etapem jest uruchomienie ipk2mobile, z odpowiednim prefiksem,np.
<programlisting>/opt/szarp/bin/ipk2mobile.pl -p szw5</programlisting>
lub 
<programlisting>/opt/szarp/bin/ipk2mobile.pl --prefix=szw5</programlisting>
Zostan± wygenerowane dwa pliki: /opt/szarp/$prefix/sudoers i /opt/szarp/$prefix/switch_menu.in.
Ten pierwszy jest automatycznie przegrywany do /etc a ten drugi zawiera zmienna $scc_switch_menu$.
Edytujemy wiêc szarp.cfg i includujemy drugi plik. Nastêpnie dopisujemy w sekcji scc do zmiennej 
menu $scc_switch_menu$.np 
<programlisting>
:scc

menu = $scc_switch_menu$, \
...
</programlisting>
Tak skonfigurowany komputer jest ju¿ gotowy.
</para>

</section> <!-- mobile-conf -->

<section id="mobile-use">
<title>Podstawy korzystania.</title>
<para>
Aby zmieniæ typ regulatora musimy otworzyæ scc menu i wybraæ podmenu Zmieñ typ i wybraæ szukany przez nas rodzaj regulatora.
Nastêpnie musimy z menu wybraæ pole "Zmieñ nazwê" i w ukazanym okienku wybraæ wêze³ na którym znajduje siê
komputer przeno¶ny, w przeciwnym wypadku wybraæ pole "Dodaj now± nazwê". W przysz³o¶ci przewidziane jest
¿e na wykresie Status Monitoringu zamiast liczb bêd± pojawiaæ siê nazwy wêz³ów.
</para>
</section>
</chapter> <!-- mobile -->


<chapter id="mbusdmn">
    <title>Uniwersalny daemon do komunikacji z urz±dzeniami w protokole M-Bus</title>
    <section id="mbusdmn-config">
        <title>Konfiguracja</title>
        <para>
            Demona s³u¿±cego do komunikacji z urz±dzeniami w protokole
            M-Bus konfigurujemy, podobnie jak ka¿dego innego daemon
            wchodz±cego w sk³ad systemu SZARP, poprzez plik params.xml.
            W tym celu tworzymy now± sekcjê <emphasis>device</emphasis>
            podaj±c w niej odpowiedni± ¶cie¿kê do Damona oraz, jako
            ¶cie¿kê do urz±dzenia, ¶cie¿kê do konwertera M-Bus &lt;-&gt; RS232,
            na przyk³ad:
            <programlisting>
<![CDATA[
<device daemon="/opt/szarp/bin/mbusdmn" path="/dev/ttyS0">
]]>
            </programlisting>
            Polecane jest równie¿ skonfigurowanie odpowiedniej prêdko¶ci
            transmisji poprzez podanie atrybutu
            <emphasis>speed</emphasis>, np.:
            <programlisting>
<![CDATA[
<device ... speed="300" ... >
]]>
            </programlisting>
            Prêdko¶æ 300 bodów obs³ugiwana powinna byæ przez wszystkie
            urz±dzenia w protokole M-Bus, wy¿sze prêdko¶ci nale¿y
            wykorzystywaæ tylko wtedy, kiedy mamy pewno¶æ, ¿e wszystkie
            urz±dzenia pod³±czone do naszej szyny potrafi± j± obs³u¿yæ.
            Mo¿na równie¿ ustaliæ odstêp miêdzy kolejnymi odczytami
            danych z urz±dzenia - nale¿y go podaæ w sekundach jako
            warto¶æ parametru <emphasis>askdelay</emphasis>.
        </para>
        <para>
            Wszystkie pozosta³e atrybuty konfiguracyjne dotycz±ce tego 
            demona powinny byæ umieszczone w przestrzeni nazw
            <emphasis>http://www.praterm.com.pl/SZARP/ipk-extra</emphasis>,
            wiêc warto zadbaæ o nazwanie jej w params.xml, np.:
            <programlisting>
<![CDATA[
<device ... xmlns:mbus="http://www.praterm.com.pl/SZARP/ipk-extra" ... >
]]>
            </programlisting>
            Oczywi¶cie nazwa "mbus" jest tylko nazw± przyk³adow±,
            jednak¿e polecan± ze wzglêdu na czytelno¶æ i ³atwo¶æ
            zrozumienia. Oczywi¶cie nazwanie przestrzeni nazw nie musi
            wystêpowaæ w elemencie <emphasis>device</emphasis> - mo¿e
            znajdowaæ siê równie¿ w dowolnym elemencie nadrzêdnym.
        </para>
        <para>
            Do najwa¿niejszych parametrów, które mo¿na skonfigurowaæ w
            elemencie <emphasis>device</emphasis> nale¿±:
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>byte_interval</emphasis> - czas
                        oczekiwania miêdzy odczytaniem kolejnych bajtów;
                        warto¶æ ta jest zazwyczaj dobierana
                        eksperymentalnie, indywidualnie dla ka¿dego
                        urz±dzenia; domy¶lna warto¶æ to 10 000
                        mikrosekund
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>databits</emphasis> - ilo¶æ bitów
                        danych w ramce RS232; domy¶lna warto¶æ to 8
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>stopbits</emphasis> - ilo¶æ bitów
                        stopu w ramce RS232; domy¶lna warto¶æ to 1
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>parity</emphasis> - typ parzysto¶ci
                        wykorzystywany w ramce RS232; dozwolone
                        warto¶ci to: "even" (parzysto¶æ parzysta), "odd"
                        (parzysto¶æ nieparzysta), "none" (brak bitu
                        parzysto¶ci), domy¶lna warto¶æ to "none"
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>precision</emphasis> - ilo¶æ miejsc po
                        przecinku, które maj± byæ brane pod uwagê przy
                        konwersji liczby zmiennoprzecinkowej (je¶li taka
                        zostanie odebrana od urz±dzenia) na liczbê
                        sta³oprzecinkow±; domy¶lna warto¶æ to 4
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Poza tymi atrybutami wystêpuj± tak¿e istotne atrybuty
            konfiguracyjne w elemencie <emphasis>unit</emphasis>, które
            pozwalaj± skonfigurowaæ parametry komunikacji dla
            poszczególnych urz±dzeñ (w przeciwieñstwie do parametrów z
            elementu <emphasis>device</emphasis>, które kontroluj±
            globalnie transmisjê w ca³ej szynie M-Bus). Oto one:
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>address</emphasis> - adres na szynie
                        M-Bus urz±dzenia, z którym chcemy nawi±zywaæ
                        komunikacjê; domy¶lny adres to 254, czyli 
                        specjalna warto¶æ oznaczaj±ca wys³anie
                        zapytania do wszystkich urz±dzeñ znajduj±cych
                        siê na szynie - powinna ona byæ u¿ywana tylko w
                        trakcie rozpoznawania konfiguracji
                        nowo pod³±czonego urz±dzenia, pó¼niej nale¿y j±
                        zamieniæ na adres, z którym zg³asza siê
                        urz±dzenie
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>reset</emphasis> - umo¿liwia wys³anie
                        do urz±dzenia po nawi±zaniu po³±czenia ¿±dania
                        wykonania resetu (pomocne przy urz±dzeniach,
                        których konfiguracja zosta³a zmieniona w
                        nieznany sposób); mo¿liwe warto¶ci tego
                        parametru to:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>no</emphasis> - warto¶æ
                                    domy¶lna, równoznaczna z
                                    nieumieszczeniem tego atrybutu w
                                    konfiguracji; oznacza brak
                                    jakiegokolwiek resetu
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>full</emphasis> - wykonuje
                                    pe³ny reset aplikacji w urz±dzeniu,
                                    tzn. zeruje wszystkie ustawienia,
                                    liczniki, daty itp.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>setup</emphasis> -
                                    wykonuje reset ustawieñ w
                                    urz±dzeniu, tzn. resetuje ustawienia
                                    transmisji, adres na szynie M-Bus
                                    oraz ustawione daty
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>select_data</emphasis> - dokonuje
                        wyboru danych do odczytu z urz±dzenia; w
                        protokole M-Bus mo¿liwy jest do¶æ rozbudowany
                        wybór danych do odczytu, jednak daemon obs³uguje
                        jedynie nastêpuj±ce warto¶ci parametru:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>no</emphasis> - warto¶æ
                                    domy¶lna, równoznaczna z
                                    nieumieszczeniem tego atrybutu w
                                    konfiguracji; oznacza brak wyboru
                                    danych do odczytu, a wiêc odczyt
                                    danych domy¶lnie przesy³anych przez
                                    urz±dzenie
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>all</emphasis> - wybiera
                                    do odczytu wszystkie dane
                                    zgromadzone w urz±dzeniu
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>change_address</emphasis> - adres
                        urz±dzenia w protokole M-Bus, który ma ono
                        przyj±æ po zmianie adresu; domy¶lna warto¶æ to 0
                        oznaczaj±ca niewykonywanie procedury zmiany
                        adresu
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>reinitialize_on_error</emphasis> -
                        opcja ta wymusza wykonanie ponownej
                        inicjalizacji z urz±dzeniem w razie stwierdzenia
                        b³êdów w transmisji, co jest przydatne w
                        przypadku urz±dzeñ, z którymi komunikacja
                        okresowo ulega zawieszeniu; dozwolone warto¶ci
                        to "yes" oraz "no"
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Oprócz tego w ka¿dym elemencie <emphasis>param</emphasis>
            mo¿na skonfigurowaæ specjalne operacje (transformacje), które 
            maj± byæ wykonywane na poszczególnych warto¶ciach przesy³anych 
            do systemu SZARP. Mo¿liwe atrybuty to:
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>multiplier</emphasis> - liczba przez
                        któr± nale¿y pomno¿yæ otrzyman± warto¶æ
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>divisor</emphasis> - liczba przez
                        któr± nale¿y podzieliæ otrzyman± warto¶æ
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>modulo</emphasis> - liczba modulo
                        któr± nale¿y wzi±æ dan± warto¶æ
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>transform</emphasis> - bardziej
                        skomplikowana operacja, któr± nale¿y wykonaæ na
                        parametrze; dostêpne operacje to:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>lw</emphasis> - pobranie
                                    z parametru 15 najmniej znacz±cych
                                    bitów
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>mw</emphasis> - pobranie
                                    z parametru bitów 16-30
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>hw</emphasis> - pobranie
                                    z parametru bitów 31-32.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>special</emphasis> - oznacza specjaln±
                        operacjê, któr± nale¿y wykonaæ, aby uzyskaæ
                        warto¶æ danego parametru; dostêpne operacje to:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>prev</emphasis> - warto¶æ
                                    tego parametru zostanie wziêta jako
                                    warto¶æ poprzedniego parametru
                                    odczytanego od urz±dzenia
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Przyk³adowa konfiguracja w params.xml dla ciep³omierza Landis&amp;Gyr
            WSD-6 z modu³em komunikacyjnym WZD-MB:
            <programlisting>
<![CDATA[
    <device xmlns:mbus="http://www.praterm.com.pl/SZARP/ipk-extra" daemon="/opt/szarp/bin/mbusdmn" 
        path="/dev/ttyS2" speed="300" mbus:byte_interval="50000" mbus:databits="8" mbus:stopbits="0" 
        mbus:parity="even" options="--askdelay 30240">
      <unit id="1" type="1" subtype="1" bufsize="1" mbus:address="0">
        <param name="Landis Gyr:Wêze³:czas pracy LSW" short_name="OnL" draw_name="-" unit="-" prec="0" 
            mbus:transform="lw">
                <raport title="Landis Gyr" order="25"/>
        </param>
        <param name="Landis Gyr:Wêze³:czas pracy MSW" short_name="OnM" draw_name="-" unit="-" prec="0" 
            mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="26"/>
        </param>
        <param name="Landis Gyr:Wêze³:aktualny przep³yw z licznika 1 LSW" short_name="Gwy1L" 
            draw_name="-" unit="-" prec="4" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="1"/>
        </param>
        <param name="Landis Gyr:Wêze³:aktualny przep³yw z licznika 1 MSW" short_name="Gwy1M" 
            draw_name="-" unit="-" prec="4" base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="2"/>
        </param>
        <param name="Landis Gyr:Wêze³:temperatura powrotna" short_name="Tpow" draw_name="Temp. powrotu" 
            unit="°C" prec="0" base_ind="auto">
            <raport title="Landis Gyr" order="8"/>
            <draw title="Landis Gyr" order="2" min="0" max="150" />
        </param>
        <param name="Landis Gyr:Wêze³:time point 1" short_name="-" draw_name="-" unit="-" prec="0"/>
        <param name="Landis Gyr:Wêze³:objêto¶æ LSW" short_name="VL" draw_name="-" unit="m3" prec="0" 
            base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="15"/>
        </param>
        <param name="Landis Gyr:Wêze³:objêto¶æ MSW" short_name="VM" draw_name="-" unit="m3" prec="0" 
            base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="16"/>
        </param>
        <param name="Landis Gyr:Wêze³:numer fabryczny LSW" short_name="NoL" draw_name="-" unit="-" 
            prec="0" mbus:transform="lw">
                <raport title="Landis Gyr" order="29"/>
        </param>
        <param name="Landis Gyr:Wêze³:numer fabryczny MSW" short_name="NoM" draw_name="-" unit="-" 
            prec="0" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="30"/>
        </param>
        <param name="Landis Gyr:Wêze³:temperatura wyj¶ciowa" short_name="Twy" 
            draw_name="Temp. wyj¶ciowa" unit="°C" prec="0" base_ind="auto">
            <raport title="Landis Gyr" order="7"/>
            <draw title="Landis Gyr" prior="11" order="1" min="0" max="150"/>
        </param>
        <param name="Landis Gyr:Wêze³:moc wyj¶ciowa z licznika 2" short_name="Qwy2" 
            draw_name="Moc z licz. 2" unit="kW" prec="0" base_ind="auto">
            <raport title="Landis Gyr" order="11"/>
            <draw title="Landis Gyr" order="8" min="0" max="2000" />
        </param>
        <param name="Landis Gyr:Wêze³:czas pracy b³êdnej LSW" short_name="ErL" draw_name="-" unit="h" 
            prec="0" mbus:transform="lw">
                <raport title="Landis Gyr" order="27"/>
        </param>
        <param name="Landis Gyr:Wêze³:czas pracy b³êdnej MSW" short_name="ErM" draw_name="-" unit="h" 
            prec="0" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="28"/>
        </param>
        <param name="Landis Gyr:Wêze³:moc wyj¶ciowa z licznika 1 LSW" short_name="Q1L" draw_name="-" 
            unit="kW" prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="9"/>
        </param>
        <param name="Landis Gyr:Wêze³:moc wyj¶ciowa z licznika 1 MSW" short_name="Q1M" draw_name="-" 
            unit="kW" prec="0" base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="10"/>
        </param>
        <param name="Landis Gyr:Wêze³:aktualny przep³yw z licznika 2" short_name="Gwy2" draw_name="-" 
            unit="m3/h" prec="1" base_ind="auto">
            <raport title="Landis Gyr" order="3"/>
        </param>
        <param name="Landis Gyr:Wêze³:maksymalna moc wyj¶ciowa" short_name="Qmax" 
            draw_name="Moc maksymalna" unit="kW" prec="0" base_ind="auto">
            <raport title="Landis Gyr" order="12"/>
        </param>
        <param name="Landis Gyr:Wêze³:data maksimum mocy wyj¶ciowej LSW" short_name="QmxDL" 
            draw_name="-" unit="-" prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="13"/>
        </param>
        <param name="Landis Gyr:Wêze³:data maksimum mocy wyj¶ciowej MSW" short_name="QmxDM" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="14"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia z licznika 2 LSW" short_name="E2L" draw_name="-" unit="-" 
            prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="23"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia z licznika 2 MSW" short_name="E2M" draw_name="-" unit="-" 
            prec="0" base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="24"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia sumaryczna z licznika 1 LSW" short_name="Ec1L" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="21"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia sumaryczna z licznika 1 MSW" short_name="Ec1M" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="22"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia z licznika 1 w taryfie 1 LSW" short_name="E1t1L" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="17"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia z licznika 1 w taryfie 1 MSW" short_name="E1t1M" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="lw" mbus:special="prev">
                <raport title="Landis Gyr" order="18"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia z licznika 1 w taryfie 2 LSW" short_name="E1t2L" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="19"/>
        </param>
        <param name="Landis Gyr:Wêze³:energia z licznika 1 w taryfie 2 MSW" short_name="E1t2M" draw_name="-" 
            unit="-" prec="0" base_ind="auto" mbus:transform="lw" mbus:special="prev">
                <raport title="Landis Gyr" order="20"/>
        </param>
        <param name="Landis Gyr:Wêze³:data maksimum przep³ywu LSW" short_name="GmxDL" draw_name="-" unit="-" 
            prec="0" base_ind="auto" mbus:transform="lw">
                <raport title="Landis Gyr" order="5"/>
        </param>
        <param name="Landis Gyr:Wêze³:data maksimum przep³ywu MSW" short_name="GmxDM" draw_name="-" unit="-" 
            prec="0" base_ind="auto" mbus:transform="mw" mbus:special="prev">
                <raport title="Landis Gyr" order="6"/>
        </param>
        <param name="Landis Gyr:Wêze³:maksymalny przep³yw" short_name="Gmax" draw_name="Przep³yw maks." 
            unit="m3/h" prec="1" base_ind="auto">
            <raport title="Landis Gyr" order="4"/>
        </param>
    </unit>
  </device>
]]>
            </programlisting>
            Jak widaæ, ciep³omierz ten wiêkszo¶æ parametrów dostarcza
            jako d³ugie (tzn. d³u¿sze ni¿ 16 bitów) liczby, wiêc przy
            przesy³aniu do SZARP-a konieczne jest ich dzielenie na mniej
            i bardziej znacz±ce s³owo. Aby nastêpnie w wygodny sposób
            prezentowaæ na wykresach tak zebrane dane, mo¿na u¿yæ
            parametrów definiowalnych typu
            <emphasis>DRAWDEFINABLE</emphasis> (dok³adny opis: <xref
            linkend="form-el-define">). Na przyk³ad dane z powy¿szego
            ciep³omierza prezentowane s± w sposób nastêpuj±cy sposób:
            <programlisting>
<![CDATA[
<drawdefinable>
...
    <param name="Landis Gyr:Wêze³:czas pracy" short_name="OnTime" draw_name="-" unit="-" prec="0">
        <define type="DRAWDEFINABLE" formula="(*:*:czas pracy MSW) (*:*:czas pracy LSW) :"/>
    </param>
    <param name="Landis Gyr:Wêze³:aktualny przep³yw z licznika 1" short_name="Gwy1" draw_name="Przep³yw" 
        unit="m3/h" prec="3" base_ind="auto">
        <define type="DRAWDEFINABLE" 
            formula="(*:*:aktualny przep³yw z licznika 1 MSW) (*:*:aktualny przep³yw z licznika 1 LSW) :"/>
        <draw title="Landis Gyr" order="9" min="0" max="100" />
    </param>
    <param name="Landis Gyr:Wêze³:objêto¶æ" short_name="V" draw_name="Objêto¶æ" unit="m3" prec="2" 
        base_ind="auto">
        <define type="DRAWDEFINABLE" formula="(*:*:objêto¶æ MSW) (*:*:objêto¶æ LSW) :"/>
        <draw title="Landis Gyr" order="10" min="0" max="100000" />
    </param>
    <param name="Landis Gyr:Wêze³:numer fabryczny" short_name="No" draw_name="-" unit="-" prec="0">
        <define type="DRAWDEFINABLE" formula="(*:*:numer fabryczny MSW) (*:*:numer fabryczny LSW) :"/>
    </param>
    <param name="Landis Gyr:Wêze³:czas pracy b³êdnej" short_name="ErTime" draw_name="-" unit="h" prec="0">
        <define type="DRAWDEFINABLE" formula="(*:*:czas pracy b³êdnej MSW) (*:*:czas pracy b³êdnej LSW) :"/>
    </param>
    <param name="Landis Gyr:Wêze³:moc wyj¶ciowa z licznika 1" short_name="Qwy1" draw_name="Moc z licz. 1" 
        unit="kW" prec="2" base_ind="auto">
        <define type="DRAWDEFINABLE" 
            formula="(*:*:moc wyj¶ciowa z licznika 1 MSW) (*:*:moc wyj¶ciowa z licznika 1 LSW) :"/>
        <draw title="Landis Gyr" order="7" min="0" max="2000"/>
    </param>
    <param name="Landis Gyr:Wêze³:data maksimum mocy wyj¶ciowej" short_name="QmaxD" draw_name="-" unit="-" 
        prec="0" base_ind="auto">
        <define type="DRAWDEFINABLE" 
            formula="(*:*:data maksimum mocy wyj¶ciowej MSW) (*:*:data maksimum mocy wyj¶ciowej LSW) :"/>
    </param>
    <param name="Landis Gyr:Wêze³:energia z licznika 2" short_name="E2" draw_name="En. z licz. 2" unit="kWh" 
        prec="0" base_ind="auto">
        <define type="DRAWDEFINABLE" formula="(*:*:energia z licznika 2 MSW) (*:*:energia z licznika 2 LSW) :"/>
        <draw title="Landis Gyr" order="6" max="10000000" min="0"/>
    </param>
    <param name="Landis Gyr:Wêze³:energia sumaryczna z licznika 1" short_name="Ec1" draw_name="En. c. z licz. 1" 
        unit="kWh" prec="0" base_ind="auto">
        <define type="DRAWDEFINABLE" 
            formula="(*:*:energia sumaryczna z licznika 1 MSW) (*:*:energia sumaryczna z licznika 1 LSW) :"/>
        <draw title="Landis Gyr" order="5" min="0" max="10000000"/>
    </param>
    <param name="Landis Gyr:Wêze³:energia z licznika 1 w taryfie 1" short_name="E1t1" draw_name="En. z licz. 1 w t. 1" 
        unit="kWh" prec="0" base_ind="auto">
        <define type="DRAWDEFINABLE" 
            formula="(*:*:energia z licznika 1 w taryfie 1 MSW) (*:*:energia z licznika 1 w taryfie 1 LSW) :"/>
            <draw title="Landis Gyr" order="3" min="0" max="10000000"/>
    </param>
    <param name="Landis Gyr:Wêze³:energia z licznika 1 w taryfie 2" short_name="E1t2" draw_name="En z licz. 1 w t. 2" 
        unit="kWh" prec="0" base_ind="auto">
        <define type="DRAWDEFINABLE" 
            formula="(*:*:energia z licznika 1 w taryfie 2 MSW) (*:*:energia z licznika 1 w taryfie 2 LSW) :"/>
        <draw title="Landis Gyr" order="4" min="0" max="10000000"/>
    </param>
    <param name="Landis Gyr:Wêze³:data maksimum przep³ywu" short_name="GmaxD" draw_name="-" unit="-" prec="0" 
        base_ind="auto">
        <define type="DRAWDEFINABLE" formula="(*:*:data maksimum przep³ywu MSW) (*:*:data maksimum przep³ywu LSW) :"/>
    </param>
...
</drawdefinable>
]]>
            </programlisting>
        </para>
    </section>
    <section id="mbusdmn-discovery">
        <title>Badanie konfiguracji nowo pod³±czanego urz±dzenia</title>
        <para>
            Jednym z g³ównych powodów stworzenia uniwersalnego demona
            do komunikacji w protokole M-Bus by³o u³atwienie
            konfiguracji i pod³±czenia do systemu SZARP nowego
            urz±dzenia wykorzystuj±cego ten protokó³. W zwi±zku z
            powy¿szym, demona mo¿na wykorzystywaæ jako narzêdzie
            s³u¿±ce do badania konfiguracji nowo pod³±czonego urz±dzenia.
            W tym celu nale¿y zastosowaæ nastêpuj±c± procedurê:
            <orderedlist>
                <listitem>
                    <para>
                        Nale¿y uruchomiæ demona w trybie pracy s³u¿±cym
                        do testowania komunikacji z urz±dzeniami M-Bus
                        komend±:
                        <programlisting>
<![CDATA[
/opt/szarp/bin/mbusdmn --test --device <adres_urz±dzenia> [pozosta³e parametry]
]]>
                        </programlisting>
                        Parametry linii komend, które przyjmuje
                        <emphasis>mbusdmn</emphasis> w trybie testowym
                        maj± na celu odwzorowanie mo¿liwo¶ci
                        konfiguracyjne, które daj± atrybuty elementu
                        <emphasis>device</emphasis> z IPK. Dostêpne s±
                        nastêpuj±ce parametry:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>device</emphasis> -
                                    parametr obowi±zkowy oznaczaj±cy
                                    nazwê urz±dzenia, do którego
                                    pod³±czony jest konwerter M-Bus
                                    &lt;-&gt; RS232
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>speed</emphasis> -
                                    prêdko¶æ transmisji; warto¶æ
                                    domy¶lna: 300 bodów
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>address</emphasis> - adres
                                    protoko³u M-Bus urz±dzenia, które
                                    nale¿y odpytaæ; warto¶æ domy¶lna:
                                    254, co oznacza odpytanie wszystkich
                                    urz±dzeñ, które s³uchaj± na szynie
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>byte_interval</emphasis> - czas
                                    oczekiwania miêdzy odczytaniem kolejnych bajtów;
                                    warto¶æ ta jest zazwyczaj dobierana
                                    eksperymentalnie, indywidualnie dla ka¿dego
                                    urz±dzenia; domy¶lna warto¶æ to 10 000
                                    mikrosekund
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>data_bits</emphasis> - ilo¶æ bitów
                                    danych w ramce RS232; domy¶lna warto¶æ to 8
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>stop_bits</emphasis> - ilo¶æ bitów
                                    stopu w ramce RS232; domy¶lna warto¶æ to 1
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>parity</emphasis> - typ parzysto¶ci
                                    wykorzystywany w ramce RS232; dozwolone
                                    warto¶ci to: "even" (parzysto¶æ parzysta), "odd"
                                    (parzysto¶æ nieparzysta), "none" (brak bitu
                                    parzysto¶ci), domy¶lna warto¶æ to "none"
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        W tym trybie pracy daemon powinien wypisaæ na ekran
                        wiele informacji, które pomog± stworzyæ plik
                        konfiguracyjny dla danego urz±dzenia.
                        Przyk³adowo fragment z danych wypisanych przez
                        <emphasis>mbusdmn</emphasis> w trybie testowania
                        po³±czenia dla ciep³omierza Pollustat E
                        (pokazano tu jedynie fragment, który dotyczy
                        ramki danych w formacie M-Bus przysy³anej przez
                        ciep³omierz, pominiêto fragmenty dotycz±ce samej
                        komunikacji w protokole M-Bus):
                        <programlisting>
<![CDATA[
        Address: 0

        Frame contains data with LSB first
        RSP_UD frame parsed as a variable data structure frame
        Serial number: 61560223
        Manufacturer ID: SPX
        Version number: 96
        Medium: Heat (at return temperature)
        Access number: 10
        Decoding status bits:
                Application status bits: 0
                Manufacturer status bits: 0
        Signature: 0

        Data:
                Function: instantaneous value
                Data type: 8 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Energy [J], * 1 000 000
        Value: 870592

        Data:
                Function: instantaneous value
                Data type: 8 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Volume [m3], * 0.001
        Value: 5802265

        Data:
                Function: instantaneous value
                Data type: 8 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Volume Flow [m3/h], * 0.001
        Value: 181

        Data:
                Function: instantaneous value
                Data type: 8 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Power [W], * 1
        Value: 1114

        Data:
                Function: instantaneous value
                Data type: 4 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Flow Temperature [°C], * 0.1
        Value: 580

        Data:
                Function: instantaneous value
                Data type: 4 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Return Temperature [°C], * 0.1
        Value: 526

        Data:
                Function: instantaneous value
                Data type: 6 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Temperature Difference [K], * 0.001
        Value: 5360

        Data:
                Function: instantaneous value
                Data type: 8 digit BCD
                Storage number: 0
                Value and unit information:
                Value information: Fabrication Number
        Value: 61560223

        Data:
                Function: instantaneous value
                Data type: 8 digit BCD
                Storage number: 0
                Value and unit information:
                Information from the extended VIF table:
                Customer location
        Value: 61560223

        Data:
                Function: maximum value
                Data type: special: manufacturer specific data follows, more records in next telegram
                Manufacturer specific data:
]]>
                        </programlisting>
                        Jak widaæ na powy¿szym przyk³adzie, mo¿na w ten
                        sposób uzyskaæ wiele interesuj±cych informacji o
                        danych przesy³anych przez urz±dzenie. Pierwsz±
                        wa¿n± informacj± jest adres urz±dzenia - nale¿y
                        go wykorzystaæ jako warto¶æ atrybutu
                        <emphasis>address</emphasis> w elemencie
                        <emphasis>unit</emphasis> konfiguracji.
                        Nastêpnie dowiadujemy siê ró¿nych informacji
                        ogólnych o danym urz±dzeniu - kod producenta,
                        numer seryjny, numer wersji, medium mierzone
                        przez dane urz±dzenie itp. Nastêpnie podane s±
                        informacje o ka¿dej z przesy³anych warto¶ci: typ
                        warto¶ci (chwilowa, maksymalna, minimalna,
                        b³êdna), sposób jej zakodowania w danych
                        przesy³anych w protokole M-Bus (z tej informacji
                        mo¿na prosto wywnioskowaæ zakres warto¶ci, a
                        tak¿e transformacje, które nale¿y na niej
                        zastosowaæ, aby by³a ona jak najbardziej
                        u¿yteczna w systemie SZARP), kolejny numer
                        warto¶ci danego parametru w pamiêci urz±dzenia
                        (im mniejszy numer, tym nowsza warto¶æ),
                        znaczenie danej warto¶ci (tj. nazwa wielko¶ci,
                        któr± ona wyra¿a) jednostka, w jakiej jest
                        ona wyra¿ona itp. Czasem mog± równie¿ wystêpowaæ
                        informacje dodatkowe, np. o taryfie, w której
                        dana wielko¶æ by³a mierzona. Na koñcu widaæ, ¿e
                        dane specyficzne dla producenta danego
                        urz±dzenia nie s± przetwarzane (mog± jedynie
                        zostaæ wypisane w postaci ci±gu liczb
                        szesnastkowych odpowiadaj±cych warto¶ciom
                        kolejnych bajtów odebranych od urz±dzenia).
                    </para>
                    <para>
                        Je¶li jednak po uruchomieniu demona w trybie
                        testowym nie uzyskamy informacji na temat warto¶ci
                        przesy³anych przez urz±dzenie (pojawi± siê
                        informacje o b³êdach transmisji lub innego
                        rodzaju komunikaty o b³êdzie), nale¿y próbowaæ
                        eksperymentalnie dobraæ warto¶ci jego parametrów
                        tak, aby uda³o siê nawi±zaæ po³±czenie z urz±dzeniem.
                        Poleca siê w pierwszej kolejno¶ci modyfikowaæ
                        prêdko¶æ transmisji oraz odstêp miêdzy kolejnymi
                        bajtami, nastêpnie ilo¶æ bitów danych, ilo¶æ
                        bitów stopu, typ parzysto¶ci itp.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Na podstawie tak uzyskanych informacji nale¿y
                        stworzyæ w pliku params.xml odpowiedni element 
                        <emphasis>device</emphasis>, przypisaæ dobrane
                        podczas testowania warto¶ci jego atrybutom,
                        stworzyæ element <emphasis>unit</emphasis> z
                        ¿±danymi atrybutami oraz utworzyæ odpowiednie
                        elementy <emphasis>param</emphasis> dla ka¿dej z
                        warto¶ci przesy³anych przez urz±dzenie.
                        Przyk³adowy plik konfiguracyjny dla ciep³omierza
                        Pollustat E obs³uguj±cy warto¶ci podane powy¿ej
                        wygl±da nastêpuj±co:
                        <programlisting>
<![CDATA[
  <device daemon="/opt/szarp/bin/mbusdmn" speed="2400" path="/dev/ttyA22" 
      xmlns:mbus="http://www.praterm.com.pl/SZARP/ipk-extra" mbus:bittime="5000" mbus:databist="8" 
      mbus:stopbits="2" mbus:parity="even">
    <unit id="1" type="1" subtype="1" bufsize="1" mbus:address="0">
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Energia LSW" short_name="Elsw" draw_name="Energia lsw" 
            unit="-" prec="3" mbus:transform="lsw" base_ind="auto">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="1"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Energia MSW" short_name="Emsw" draw_name="Energia msw" 
          unit="-" prec="3" mbus:transform="msw" base_ind="auto" mbus:special="prev">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="2"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Objêto¶æ LSW" short_name="Vlsw" draw_name="-" unit="-" 
          prec="3" mbus:transform="lsw">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="3"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Objêto¶æ MSW" short_name="Vmsw" draw_name="-" unit="-" 
          prec="3" mbus:transform="msw" mbus:special="prev">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="4"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Przep³yw" short_name="Pp" draw_name="Przep³yw" unit="m3/h" 
          prec="3" base_ind="auto">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="5"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Moc" short_name="PQ" draw_name="Moc" unit="kW" prec="2" 
          base_ind="auto" mbus:divisor="10">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="9"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Temperatura wej¶ciowa" short_name="Ptz" 
          draw_name="Temp. zasilania" unit="°C" prec="1" base_ind="auto">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="6"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Temperatura wyj¶ciowa" short_name="Ptp" 
          draw_name="Temp. powrotu" unit="°C" prec="1" base_ind="auto">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="7"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Ró¿nica temperatur" short_name="PdT" 
          draw_name="Ró¿n. temperatur" unit="°C" prec="2" base_ind="auto" mbus:divisor="10">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="8"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Numer fabryczny LSW" short_name="Nlsw" draw_name="-" unit="-" 
          prec="3" mbus:transform="lsw">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="10"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:Numer fabryczny MSW" short_name="Nmsw" draw_name="-" unit="-" 
          prec="3" mbus:transform="msw" mbus:special="prev">
        <raport title="Pollustat Obiegi wewnêtrzne M-Bus" filename="pollustat-mbus.rap" order="11"/>
      </param>
      <param name="Pollustat M-Bus:Obiegi wewnêtrzne:dummy" short_name="-" draw_name="-" unit="-" prec="0" />
    </unit>
  </device>
]]>
                        </programlisting>
                    </para>
                </listitem>
            </orderedlist>
            Po wykonaniu powy¿szych kroków daemon powinien byæ gotowy do
            wspó³pracy z nowo pod³±czonym urz±dzeniem oraz z systemem
            SZARP.
        </para>
    </section>
</chapter>
<chapter id="wlkdmn">
    <title>Daemon do odczytu danych ze stacji meteorologicznej Davis
        Vantage Pro</title>
    <para>
        Daemon odczytuj±cy dane ze stacji meteorologicznej Davis Vantage
        Pro (<emphasis>wlkdmn</emphasis>) zosta³ zaimplementowany nie jako
        narzêdzie do komunikacji ze stacj± bezpo¶rednio poprzez port
        szeregowy/USB, a jako parser plików w formacie WLK, które udostêpnia
        stacja. W zwi±zku z tym wymagane jest zewnêtrzne oprogramowanie,
        które odpowiedzialne bêdzie za komunikacjê ze stacj± oraz pobieranie
        z niej plików WLK. Dostêpne jest oprogramowanie na licencji typu
        open source, które bardzo dobrze realizuje to zadanie: <ulink
        url="http://www.wviewweather.com/">wview</ulink>.
    </para>
    <section id="wlkdmn-config">
        <title>Konfiguracja wlkdmn</title>
        <para>
            Przed przyst±pieniem do konfiguracji demona
            <emphasis>wlkdmn</emphasis> nale¿y na danym komputerze
            poprawnie skonfigurowaæ i uruchomiæ system
            <emphasis>wview</emphasis> w sposób opisany w jego
            instrukcji. Dopiero po upewnieniu siê, ¿e system
            <emphasis>wview</emphasis> pracuje poprawnie oraz komunikuje
            siê poprawnie ze stacj± mo¿na przyst±piæ do konfiguracji
            demona <emphasis>wlkdmn</emphasis>.
        </para>
        <para>
            Oto przyk³adowa konfiguracja dla
            <emphasis>wlkdmn</emphasis>:
            <programlisting>
<![CDATA[
  <device daemon="/opt/szarp/bin/wlkdmn" path="/var/wview/archive">
    <unit id="1" type="1" subtype="1" bufsize="1">
      <param name="WView:Simulator:maksymalna dobowa temperatura zewnêtrzna" short_name="Tzmx" draw_name="Temp. zewn. max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" prior="1" order="1"/>
        <raport title="WView - simulator" order="1"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa temperatura zewnêtrzna" short_name="Tzmn" draw_name="Temp. zewn. min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="3"/>
        <raport title="WView - simulator" order="2"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa temperatura wewnêtrzna" short_name="Twmx" draw_name="Temp. wewn. max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="4"/>
        <raport title="WView - simulator" order="3"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa temperatura wewnêtrzna" short_name="Twmn" draw_name="Temp. wewn. min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="6"/>
        <raport title="WView - simulator" order="4"/>
      </param>
      <param name="WView:Simulator:¶rednia dobowa temperatura zewnêtrzna" short_name="Tzsr" draw_name="Temp. zewn. ¶r." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="2"/>
        <raport title="WView - simulator" order="5"/>
      </param>
      <param name="WView:Simulator:¶rednia dobowa temperatura wewnêtrzna" short_name="Twsr" draw_name="Temp. wewn. ¶r." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="5"/>
        <raport title="WView - simulator" order="6"/>
      </param>
      <param name="WView:Simulator:maksymalne dobowe och³odzenie spowodowane wiatrem" short_name="Tzwmx" draw_name="Och³. sp. w. max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" prior="2" order="1"/>
        <raport title="WView - simulator" order="7"/>
      </param>
      <param name="WView:Simulator:minimalne dobowe och³odzenie spowodowane wiatrem" short_name="Tzwmn" draw_name="Och³. sp. w. min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="3"/>
        <raport title="WView - simulator" order="8"/>
      </param>
      <param name="WView:Simulator:maksymalny dobowy punkt rosy" short_name="Trmx" draw_name="Punkt rosy max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - punkt rosy" min="0" max="50" prior="3" order="1"/>
        <raport title="WView - simulator" order="9"/>
      </param>
      <param name="WView:Simulator:minimalny dobowy punkt rosy" short_name="Trmn" draw_name="Punkt rosy min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - punkt rosy" min="0" max="50" order="3"/>
        <raport title="WView - simulator" order="10"/>
      </param>
      <param name="WView:Simulator:¶rednie dobowe och³odzenie spowodowane wiatrem" short_name="Tzwsr" draw_name="Och³. sp. w. ¶r." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="2"/>
        <raport title="WView - simulator" order="11"/>
      </param>
      <param name="WView:Simulator:¶redni dobowy punkt rosy" short_name="Trsr" draw_name="Punkt rosy ¶r." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - punkt rosy" min="0" max="50" order="2"/>
        <raport title="WView - simulator" order="12"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa zewnêtrzna wilgotno¶æ" short_name="fzmx" draw_name="Zewn. wilg. max" unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" prior="4" order="1"/>
        <raport title="WView - simulator" order="13"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa zewnêtrzna wilgotno¶æ" short_name="fzmn" draw_name="Zewn. wilg. min" unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" order="3"/>
        <raport title="WView - simulator" order="14"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa wewnêtrzna wilgotno¶æ" short_name="fwmx" draw_name="Wewn. wilg. max" unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" order="4"/>
        <raport title="WView - simulator" order="15"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa wewnêtrzna wilgotno¶æ" short_name="fwmn" draw_name="Wewn. wilg. min" unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" order="5"/>
        <raport title="WView - simulator" order="16"/>
      </param>
      <param name="WView:Simulator:¶rednia dobowa zewnêtrzna wilgotno¶æ" short_name="fzsr" draw_name="Zewn. wilg. ¶r." unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" order="2"/>
        <raport title="WView - simulator" order="17"/>
      </param>
      <param name="WView:Simulator:maksymalne dobowe ci¶nienie atmosferyczne" short_name="Pamx" draw_name="Ci¶n. atm. max" unit="mmHg" prec="1" base_ind="auto">
        <draw title="WView - ci¶nienie atmosferyczne" min="700" max="800" prior="5" order="1"/>
        <raport title="WView - simulator" order="18"/>
      </param>
      <param name="WView:Simulator:minimalne dobowe ci¶nienie atmosferyczne" short_name="Pamn" draw_name="Ci¶n. atm. min" unit="mmHg" prec="1" base_ind="auto">
        <draw title="WView - ci¶nienie atmosferyczne" order="3" min="700" max="800"/>
        <raport title="WView - simulator" order="19"/>
      </param>
      <param name="WView:Simulator:¶rednie dobowe ci¶nienie atmosferyczne" short_name="Pasr" draw_name="Ci¶n. atm. ¶r." unit="mmHg" prec="1" base_ind="auto">
        <draw title="WView - ci¶nienie atmosferyczne" min="700" max="800" order="2"/>
        <raport title="WView - simulator" order="20"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa prêdko¶æ wiatru" short_name="vwmx" draw_name="Prêd. w. max" unit="km/h" prec="1" base_ind="auto">
        <draw title="WView - wiatr" min="0" max="200" prior="6" order="1"/>
        <raport title="WView - simulator" order="21"/>
      </param>
      <param name="WView:Simulator:¶rednia dobowa prêdko¶æ wiatru" short_name="vwsr" draw_name="Prêd. w. ¶r." unit="km/h" prec="1" base_ind="auto">
        <draw title="WView - wiatr" order="2" min="0" max="200"/>
        <raport title="WView - simulator" order="22"/>
      </param>
      <param name="WView:Simulator:ca³kowita dobowa odlego¶æ przebyta przez wiatr" short_name="sw" draw_name="Odl. przeb. w." unit="km" prec="1" base_ind="auto">
        <draw title="WView - wiatr" min="0" max="4000" order="3"/>
        <raport title="WView - simulator" order="23"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa prêdko¶æ 10-minutowa wiatru" short_name="vw10s" draw_name="Prêd. w. 10m max" unit="km/h" prec="1" base_ind="auto">
        <draw title="WView - wiatr" min="0" max="200" order="4"/>
        <raport title="WView - simulator" order="24"/>
      </param>
      <param name="WView:Simulator:kierunek wiatru o maksymalnej dobowej prêdko¶ci" short_name="Dmxv" draw_name="Max prêd. w. kier." unit="-" base_ind="auto">
        <value int="0" name="N"/>
        <value int="1" name="NNE"/>
        <value int="2" name="NE"/>
        <value int="3" name="ENE"/>
        <value int="4" name="E"/>
        <value int="5" name="ESE"/>
        <value int="6" name="SE"/>
        <value int="7" name="SSE"/>
        <value int="8" name="S"/>
        <value int="9" name="SSW"/>
        <value int="10" name="SW"/>
        <value int="11" name="WSW"/>
        <value int="12" name="W"/>
        <value int="13" name="WNW"/>
        <value int="14" name="NW"/>
        <value int="15" name="NNW"/>
        <raport title="WView - simulator" order="25"/>
      </param>
      <param name="WView:Simulator:kierunek wiatru o maksymalnej dobowej prêd. 10min" short_name="Dmxv10" draw_name="Max p. 10m w. kier." unit="-" base_ind="auto">
        <value int="0" name="N"/>
        <value int="1" name="NNE"/>
        <value int="2" name="NE"/>
        <value int="3" name="ENE"/>
        <value int="4" name="E"/>
        <value int="5" name="ESE"/>
        <value int="6" name="SE"/>
        <value int="7" name="SSE"/>
        <value int="8" name="S"/>
        <value int="9" name="SSW"/>
        <value int="10" name="SW"/>
        <value int="11" name="WSW"/>
        <value int="12" name="W"/>
        <value int="13" name="WNW"/>
        <value int="14" name="NW"/>
        <value int="15" name="NNW"/>
        <raport title="WView - simulator" order="26"/>
      </param>
      <param name="WView:Simulator:ca³kowity dobowy opad deszczu" short_name="hdc" draw_name="Dobowy opad d." unit="mm" prec="1" base_ind="auto">
        <draw title="WView - deszcz" min="0" max="1000" prior="7" order="1"/>
        <raport title="WView - simulator" order="27"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa intensywno¶æ opadu deszczu" short_name="Fdmx" draw_name="Int. op. d. max" unit="mm/h" prec="1" base_ind="auto">
        <draw title="WView - deszcz" min="0" max="200" order="2"/>
        <raport title="WView - simulator" order="28"/>
      </param>
      <param name="WView:Simulator:dobowa dawka promieniowania UV" short_name="UV" draw_name="Dobowa dawka UV" unit="MED" prec="1" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="5" prior="8" order="1"/>
        <raport title="WView - simulator" order="29"/>
      </param>
      <param name="WView:Simulator:maksymalny dobowy indeks UV" short_name="UVimx" draw_name="Max indeks UV" unit="UVindex" prec="1" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="16" order="2"/>
        <raport title="WView - simulator" order="30"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej temperatury zewnêtrznej" short_name="tTzmx" draw_name="Czas Tzmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="31"/>
      </param>
      <param name="WView:Simulator:czas minimalnej dobowej temperatury zewnêtrznej" short_name="tTzmn" draw_name="Czas Tzmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="32"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej temperatury wewnêtrznej" short_name="tTwmx" draw_name="Czas Twmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="33"/>
      </param>
      <param name="WView:Simulator:czas minimalnej dobowej temperatury wewnêtrznej" short_name="tTwmn" draw_name="Czas Twmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="34"/>
      </param>
      <param name="WView:Simulator:czas maks. dobowego och³odzenia spow. wiatrem" short_name="tTzwmx" draw_name="Czas Tzwmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="35"/>
      </param>
      <param name="WView:Simulator:czas min. dobowego och³odzenia spow. wiatrem" short_name="tTzwmn" draw_name="Czas Tzwmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="36"/>
      </param>
      <param name="WView:Simulator:czas maksymalnego dobowego punktu rosy" short_name="tTrmx" draw_name="Czas Trmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="37"/>
      </param>
      <param name="WView:Simulator:czas minimalnego dobowego punkut rosy" short_name="tTrmn" draw_name="Czas Trmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="38"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej zewnêtrznej wilgotno¶ci" short_name="tfzmx" draw_name="Czas fzmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="39"/>
      </param>
      <param name="WView:Simulator:czas minimalnej dobowej zewnêtrznej wilgotno¶ci" short_name="tfzmn" draw_name="Czas fzmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="40"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej wewnêtrznej wilgotno¶ci" short_name="tfwmx" draw_name="Czas fwmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="41"/>
      </param>
      <param name="WView:Simulator:czas minimalnej dobowej wewnêtrznej wilgotno¶ci" short_name="tfwmn" draw_name="Czas fwmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="42"/>
      </param>
      <param name="WView:Simulator:czas maksymalnego dobowego ci¶nienia atm." short_name="tPamx" draw_name="Czas Pamx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="43"/>
      </param>
      <param name="WView:Simulator:czas minimalnego dobowego ci¶nienia atm." short_name="tPamn" draw_name="Czas Pamn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="44"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej prêdko¶ci wiatru" short_name="tvwmx" draw_name="Czas vwmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="45"/>
      </param>
      <param name="WView:Simulator:czas maks. dobowej prêdko¶ci 10min wiatru" short_name="tvw10s" draw_name="Czas vw10s" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="46"/>
      </param>
      <param name="WView:Simulator:czas maks. dobowej intensywno¶ci opadu deszczu" short_name="tFdmx" draw_name="Czas Fdmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="47"/>
      </param>
      <param name="WView:Simulator:czas maksymalnego dobowego indeksu UV" short_name="tUVimx" draw_name="Czas UVimx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="48"/>
      </param>
      <param name="WView:Simulator:dobowa mapa pogody" short_name="Map" draw_name="Mapa pogody" unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="49"/>
      </param>
      <param name="WView:Simulator:dobowe prawid³owo odebrane pakiety z wiatromierza" short_name="NP" draw_name="Pakiety wiatrom." unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="50"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa energia s³oneczna" short_name="Esmx" draw_name="En. s³oneczna max" unit="W/m2" prec="0" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="300" order="3"/>
        <raport title="WView - simulator" order="51"/>
      </param>
      <param name="WView:Simulator:ca³kowita dobowa energia s³oneczna" short_name="Esd" draw_name="En. s. dobowa c." unit="Ly" prec="1" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="4000" order="4"/>
        <raport title="WView - simulator" order="52"/>
      </param>
      <param name="WView:Simulator:czas o¶wietlenia s³onecznego" short_name="ts" draw_name="Czas owietlenia" unit="min" prec="0" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="1000" order="5"/>
        <raport title="WView - simulator" order="53"/>
      </param>
      <param name="WView:Simulator:sumaryczne dzienne parowanie" short_name="par" draw_name="Sumaryczne parowanie" unit="mm" prec="3" base_ind="auto">
        <draw title="WView - parowanie" min="0" max="50" prior="9" order="1"/>
        <raport title="WView - simulator" order="54"/>
      </param>
      <param name="WView:Simulator:maksymalne dobowe ocieplenie spowodowane s³oñcem" short_name="Tzsmx" draw_name="Ociep. sp. s. max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="4"/>
        <raport title="WView - simulator" order="55"/>
      </param>
      <param name="WView:Simulator:minimalne dobowe ocieplenie spowodowane s³oñcem" short_name="Tzsmn" draw_name="Ociep. sp. s. min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="6"/>
        <raport title="WView - simulator" order="56"/>
      </param>
      <param name="WView:Simulator:¶rednie dobowe ocieplenie spowodowane s³oñcem" short_name="Tzssr" draw_name="Ociep. sp. s. ¶r." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="5"/>
        <raport title="WView - simulator" order="57"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa warto¶æ indeksu THSW" short_name="THSWmx" draw_name="THSW max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - indeksy temperaturowe" min="-40" max="50" prior="10" order="1"/>
        <raport title="WView - simulator" order="58"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa warto¶æ indeksu THSW" short_name="THSWmn" draw_name="THSW min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - indeksy temperaturowe" min="-40" max="50" order="2"/>
        <raport title="WView - simulator" order="59"/>
      </param>
      <param name="WView:Simulator:maksymalna dobowa warto¶æ indeksu THW" short_name="THWmx" draw_name="THW max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - indeksy temperaturowe" min="-40" max="50" order="3"/>
        <raport title="WView - simulator" order="60"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa warto¶æ indeksu THW" short_name="THWmn" draw_name="THW min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - indeksy temperaturowe" min="-40" max="50" order="4"/>
        <raport title="WView - simulator" order="61"/>
      </param>
      <param name="WView:Simulator:ilo¶æ stopniodni zimnych" short_name="SDz" draw_name="Stopniodni zimne" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - indeksy temperaturowe" min="0" max="200" order="5"/>
        <raport title="WView - simulator" order="62"/>
      </param>
      <param name="WView:Simulator:maks. dobowa temperatura z mokrego termometru" short_name="Tmmx" draw_name="Max temp. mokr. t." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="7"/>
        <raport title="WView - simulator" order="63"/>
      </param>
      <param name="WView:Simulator:minimalna dobowa temperatura z mokrego termometru" short_name="Tmmn" draw_name="Min temp. mokr. t." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="9"/>
        <raport title="WView - simulator" order="64"/>
      </param>
      <param name="WView:Simulator:¶rednia dobowa temperatura z mokrego termometru" short_name="Tmsr" draw_name="¦r. temp. mokr. t." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - wp³yw wiatru, s³oñca i wilgoci" min="-40" max="50" order="8"/>
        <raport title="WView - simulator" order="65"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku N wiatru" short_name="twN" draw_name="Czas wiatru N" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="66"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku NNE wiatru" short_name="twNNE" draw_name="Czas wiatru NNE" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="67"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku NE wiatru" short_name="twNE" draw_name="Czas wiatru NE" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="68"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku ENE wiatru" short_name="twENE" draw_name="Czas wiatru ENE" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="69"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku E wiatru" short_name="twE" draw_name="Czas wiatru E" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="70"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku ESE wiatru" short_name="twESE" draw_name="Czas wiatru ESE" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="71"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku SE wiatru" short_name="twSE" draw_name="Czas wiatru SE" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="72"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku SSE wiatru" short_name="twSSE" draw_name="Czas wiatru SSE" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="73"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku S wiatru" short_name="twS" draw_name="Czas wiatru S" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="74"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku SSW wiatru" short_name="twSSW" draw_name="Czas wiatru SSW" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="75"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku SW wiatru" short_name="twSW" draw_name="Czas wiatru SW" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="76"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku WSW wiatru" short_name="twWSW" draw_name="Czas wiatru WSW" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="77"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku W wiatru" short_name="twW" draw_name="Czas wiatru W" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="78"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku WNW wiatru" short_name="twWNW" draw_name="Czas wiatru WNW" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="79"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku NW wiatru" short_name="twNW" draw_name="Czas wiatru NW" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="80"/>
      </param>
      <param name="WView:Simulator:czas dominacji kierunku NNW wiatru" short_name="twNNW" draw_name="Czas wiatru NNW" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="81"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej energii s³onecznej" short_name="tEsmx" draw_name="Czas Esmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="82"/>
      </param>
      <param name="WView:Simulator:czas maks. dobowego ocieplenia spow. s³oñcem" short_name="tTzsmx" draw_name="Czas Tzsmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="83"/>
      </param>
      <param name="WView:Simulator:czas min. dobowego ocieplenia spow. s³oñcem" short_name="tTzsmn" draw_name="Czas Tzsmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="84"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej warto¶ci indeksu THSW" short_name="tTHSWmx" draw_name="Czas THSWmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="85"/>
      </param>
      <param name="WView:Simulator:czas minimalnej dobowej warto¶ci indeksu THSW" short_name="tTHSWmx" draw_name="Czas THSWmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="86"/>
      </param>
      <param name="WView:Simulator:czas maksymalnej dobowej warto¶ci indeksu THW" short_name="tTHWmx" draw_name="Czas THWmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="87"/>
      </param>
      <param name="WView:Simulator:czas minimalnej dobowej warto¶ci indeksu THW" short_name="tTHWmn" draw_name="Czas THWmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="88"/>
      </param>
      <param name="WView:Simulator:czas maks. dobowej temp. z mokrego termometru" short_name="tTmmx" draw_name="Czas Tmmx" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="89"/>
      </param>
      <param name="WView:Simulator:czas min. dobowej temp. z mokrego termometru" short_name="tTmmn" draw_name="Czas Tmmn" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="90"/>
      </param>
      <param name="WView:Simulator:ilo¶æ stopniodni ciep³ych" short_name="SDc" draw_name="Stopniodni ciep³e" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - indeksy temperaturowe" min="0" max="200" order="6"/>
        <raport title="WView - simulator" order="91"/>
      </param>
      <param name="WView:Simulator:flagi aktualnego rekordu" short_name="fl" draw_name="Flagi rekordu" unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="92"/>
      </param>
      <param name="WView:Simulator:czas aktualnego rekordu" short_name="t" draw_name="Czas rekordu" unit="min" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="93"/>
      </param>
      <param name="WView:Simulator:aktualna temperatura zewnêtrzna" short_name="Tz" draw_name="Temp. zewn." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="8"/>
        <raport title="WView - simulator" order="94"/>
      </param>
      <param name="WView:Simulator:maksymalna temperatura zewnêtrzna" short_name="Tzmx" draw_name="Temp. zewn. max" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="7"/>
        <raport title="WView - simulator" order="95"/>
      </param>
      <param name="WView:Simulator:minimalna temperatura zewnêtrzna" short_name="Tzmn" draw_name="Temp. zewn. min" unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="9"/>
        <raport title="WView - simulator" order="96"/>
      </param>
      <param name="WView:Simulator:temperatura wewnêtrzna" short_name="Tw" draw_name="Temp. wewn." unit="°C" prec="1" base_ind="auto">
        <draw title="WView - temperatury powietrza" min="-40" max="50" order="10"/>
        <raport title="WView - simulator" order="97"/>
      </param>
      <param name="WView:Simulator:ci¶nienie atmosferyczne" short_name="Pa" draw_name="Ci¶n. atm." unit="mmHg" prec="1" base_ind="auto">
        <draw title="WView - ci¶nienie atmosferyczne" min="700" max="800" order="4"/>
        <raport title="WView - simulator" order="98"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ zewnêtrzna" short_name="fz" draw_name="Wilg. zewn." unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" order="6"/>
        <raport title="WView - simulator" order="99"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ wewnêtrzna" short_name="fw" draw_name="Wilg. wewn." unit="%" prec="1" base_ind="auto">
        <draw title="WView - wilgotno¶æ" min="0" max="100" order="7"/>
        <raport title="WView - simulator" order="100"/>
      </param>
      <param name="WView:Simulator:liczba klikniêæ deszczomierza" short_name="nd" draw_name="Klikn. deszcz." unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="101"/>
      </param>
      <param name="WView:Simulator:maksymalna intensywno¶æ opadu deszczu" short_name="Fdmx" draw_name="Intens. deszczu max" unit="n/h" prec="0" base_ind="auto">
        <draw title="WView - deszcz" min="0" max="4000" order="3"/>
        <raport title="WView - simulator" order="102"/>
      </param>
      <param name="WView:Simulator:prêdko¶æ wiatru" short_name="vw" draw_name="Prêdko¶æ wiatru" unit="km/h" prec="1" base_ind="auto">
        <draw title="WView - wiatr" min="0" max="200" order="6"/>
        <raport title="WView - simulator" order="103"/>
      </param>
      <param name="WView:Simulator:maksymalna prêdko¶æ wiatru" short_name="vwmx" draw_name="Prêdko¶æ wiatru max" unit="km/h" prec="1" base_ind="auto">
        <draw title="WView - wiatr" min="0" max="200" order="5"/>
        <raport title="WView - simulator" order="104"/>
      </param>
      <param name="WView:Simulator:aktualny kierunek wiatru" short_name="Dw" draw_name="Kierunek wiatru" unit="-" base_ind="auto">
        <value int="0" name="N"/>
        <value int="1" name="NNE"/>
        <value int="2" name="NE"/>
        <value int="3" name="ENE"/>
        <value int="4" name="E"/>
        <value int="5" name="ESE"/>
        <value int="6" name="SE"/>
        <value int="7" name="SSE"/>
        <value int="8" name="S"/>
        <value int="9" name="SSW"/>
        <value int="10" name="SW"/>
        <value int="11" name="WSW"/>
        <value int="12" name="W"/>
        <value int="13" name="WNW"/>
        <value int="14" name="NW"/>
        <value int="15" name="NNW"/>
        <raport title="WView - simulator" order="105"/>
      </param>
      <param name="WView:Simulator:dominuj±cy kierunek wiatru" short_name="Dwd" draw_name="Domin. kier. wiatru" unit="-" base_ind="auto">
        <value int="0" name="N"/>
        <value int="1" name="NNE"/>
        <value int="2" name="NE"/>
        <value int="3" name="ENE"/>
        <value int="4" name="E"/>
        <value int="5" name="ESE"/>
        <value int="6" name="SE"/>
        <value int="7" name="SSE"/>
        <value int="8" name="S"/>
        <value int="9" name="SSW"/>
        <value int="10" name="SW"/>
        <value int="11" name="WSW"/>
        <value int="12" name="W"/>
        <value int="13" name="WNW"/>
        <value int="14" name="NW"/>
        <value int="15" name="NNW"/>
        <raport title="WView - simulator" order="106"/>
      </param>
      <param name="WView:Simulator:prawid³owo odebrane pakiety z wiatromierza" short_name="NP" draw_name="Pakiety wiatrom." unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="107"/>
      </param>
      <param name="WView:Simulator:aktualna energia s³oneczna" short_name="Es" draw_name="Energia s³oneczna" unit="W/m2" prec="0" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="300" order="7"/>
        <raport title="WView - simulator" order="108"/>
      </param>
      <param name="WView:Simulator:maksymalna energia s³oneczna" short_name="Esmx" draw_name="En. s³oneczna max" unit="W/m2" prec="0" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="300" order="6"/>
        <raport title="WView - simulator" order="109"/>
      </param>
      <param name="WView:Simulator:aktualny indeks UV" short_name="UVi" draw_name="Indeks UV" unit="UVindex" prec="1" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="16" order="9"/>
        <raport title="WView - simulator" order="110"/>
      </param>
      <param name="WView:Simulator:maksymalny indeks UV" short_name="UVimx" draw_name="Indeks UV max" unit="UVindex" prec="1" base_ind="auto">
        <draw title="WView - promieniowanie" min="0" max="16" order="8"/>
        <raport title="WView - simulator" order="111"/>
      </param>
      <param name="WView:Simulator:temperatura li¶ci 1" short_name="Tl1" draw_name="Temp. li¶ci 1" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" prior="11" order="1"/>
        <raport title="WView - simulator" order="112"/>
      </param>
      <param name="WView:Simulator:temperatura li¶ci 2" short_name="Tl2" draw_name="Temp. li¶ci 2" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="2"/>
        <raport title="WView - simulator" order="113"/>
      </param>
      <param name="WView:Simulator:temperatura li¶ci 3" short_name="Tl3" draw_name="Temp. li¶ci 3" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="3"/>
        <raport title="WView - simulator" order="114"/>
      </param>
      <param name="WView:Simulator:temperatura li¶ci 4" short_name="Tl4" draw_name="Temp. li¶ci 4" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="4"/>
        <raport title="WView - simulator" order="115"/>
      </param>
      <param name="WView:Simulator:dodatkowe informacje o promieniowaniu" short_name="Prd" draw_name="Dodatkowe prom." unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="116"/>
      </param>
      <param name="WView:Simulator:prognoza pogody" short_name="Prg" draw_name="Prognoza pogody" unit="-" prec="0" base_ind="auto">
        <raport title="WView - simulator" order="117"/>
      </param>
      <param name="WView:Simulator:parowanie" short_name="par" draw_name="Parowanie" unit="mm" prec="3" base_ind="auto">
        <draw title="WView - parowanie" min="0" max="50" order="2"/>
        <raport title="WView - simulator" order="118"/>
      </param>
      <param name="WView:Simulator:temperatura gleby 1" short_name="Tg1" draw_name="Temp. gleby 1" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="5"/>
        <raport title="WView - simulator" order="119"/>
      </param>
      <param name="WView:Simulator:temperatura gleby 2" short_name="Tg2" draw_name="Temp. gleby 2" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="6"/>
        <raport title="WView - simulator" order="120"/>
      </param>
      <param name="WView:Simulator:temperatura gleby 3" short_name="Tg3" draw_name="Temp. gleby 3" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="7"/>
        <raport title="WView - simulator" order="121"/>
      </param>
      <param name="WView:Simulator:temperatura gleby 4" short_name="Tg4" draw_name="Temp. gleby 4" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="8"/>
        <raport title="WView - simulator" order="122"/>
      </param>
      <param name="WView:Simulator:temperatura gleby 5" short_name="Tg5" draw_name="Temp. gleby 5" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="9"/>
        <raport title="WView - simulator" order="123"/>
      </param>
      <param name="WView:Simulator:temperatura gleby 6" short_name="Tg6" draw_name="Temp. gleby 6" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury li¶ci i gleby" min="-40" max="50" order="10"/>
        <raport title="WView - simulator" order="124"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ gleby 1" short_name="fg1" draw_name="Wilg. gleby 1" unit="cb" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="50" order="5"/>
        <raport title="WView - simulator" order="125"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ gleby 2" short_name="fg2" draw_name="Wilg. gleby 2" unit="cb" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="50" order="6"/>
        <raport title="WView - simulator" order="126"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ gleby 3" short_name="fg3" draw_name="Wilg. gleby 3" unit="cb" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="50" order="7"/>
        <raport title="WView - simulator" order="127"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ gleby 4" short_name="fg4" draw_name="Wilg. gleby 4" unit="cb" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="50" order="8"/>
        <raport title="WView - simulator" order="128"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ gleby 5" short_name="fg5" draw_name="Wilg. gleby 5" unit="cb" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="50" order="9"/>
        <raport title="WView - simulator" order="129"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ gleby 6" short_name="fg6" draw_name="Wilg. gleby 6" unit="cb" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="50" order="10"/>
        <raport title="WView - simulator" order="130"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ li¶ci 1" short_name="fl1" draw_name="Wilg. li¶ci 1" unit="-" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="15" prior="12" order="1"/>
        <raport title="WView - simulator" order="131"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ li¶ci 2" short_name="fl2" draw_name="Wilg. li¶ci 2" unit="-" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="15" order="2"/>
        <raport title="WView - simulator" order="132"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ li¶ci 3" short_name="fl3" draw_name="Wilg. li¶ci 3" unit="-" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="15" order="3"/>
        <raport title="WView - simulator" order="133"/>
      </param>
      <param name="WView:Simulator:wilgotno¶æ li¶ci 4" short_name="fl4" draw_name="Wilg. li¶ci 4" unit="-" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶æ li¶ci i gleby" min="0" max="15" order="4"/>
        <raport title="WView - simulator" order="134"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 1" short_name="Td1" draw_name="Temp. dodatk. 1" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" prior="13" order="1"/>
        <raport title="WView - simulator" order="135"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 2" short_name="Td2" draw_name="Temp. dodatk. 2" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" order="2"/>
        <raport title="WView - simulator" order="136"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 3" short_name="Td3" draw_name="Temp. dodatk. 3" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" order="3"/>
        <raport title="WView - simulator" order="137"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 4" short_name="Td4" draw_name="Temp. dodatk. 4" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" order="4"/>
        <raport title="WView - simulator" order="138"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 5" short_name="Td5" draw_name="Temp. dodatk. 5" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" order="5"/>
        <raport title="WView - simulator" order="139"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 6" short_name="Td6" draw_name="Temp. dodatk. 6" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" order="6"/>
        <raport title="WView - simulator" order="140"/>
      </param>
      <param name="WView:Simulator:dodatkowa temperatura 7" short_name="Td7" draw_name="Temp. dodatk. 7" unit="°C" prec="0" base_ind="auto">
        <draw title="WView - temperatury dodatkowe" min="-40" max="50" order="7"/>
        <raport title="WView - simulator" order="141"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 1" short_name="fd1" draw_name="Wilg. dodatk. 1" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" prior="14" order="1"/>
        <raport title="WView - simulator" order="142"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 2" short_name="fd2" draw_name="Wilg. dodatk. 2" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" order="2"/>
        <raport title="WView - simulator" order="143"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 3" short_name="fd3" draw_name="Wilg. dodatk. 3" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" order="3"/>
        <raport title="WView - simulator" order="144"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 4" short_name="fd4" draw_name="Wilg. dodatk. 4" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" order="4"/>
        <raport title="WView - simulator" order="145"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 5" short_name="fd5" draw_name="Wilg. dodatk. 5" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" order="5"/>
        <raport title="WView - simulator" order="146"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 6" short_name="fd6" draw_name="Wilg. dodatk. 6" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" order="6"/>
        <raport title="WView - simulator" order="147"/>
      </param>
      <param name="WView:Simulator:dodatkowa wilgotno¶æ 7" short_name="fd7" draw_name="Wilg. dodatk. 7" unit="%" prec="0" base_ind="auto">
        <draw title="WView - wilgotno¶ci dodatkowe" min="0" max="100" order="7"/>
        <raport title="WView - simulator" order="148"/>
      </param>
    </unit>
  </device>
]]>
            </programlisting>
            Jak mo¿na zauwa¿yæ, daemon <emphasis>wview</emphasis> nie
            posiada ¿adnych szczególnych opcji, innych od pozosta³ych
            demonów systemu SZARP. Nale¿y zwróciæ jednak uwagê na kilka
            nastêpuj±cych spraw:
            <itemizedlist>
                <listitem>
                    <para>
                        jako ¶cie¿kê do urz±dzenia podana powinna zostaæ
                        ¶cie¿ka do katalogu, w którym system
                        <emphasis>wview</emphasis> przechowuje pliki
                        WLK,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        nale¿y w konfiguracji umie¶ciæ wszystkie 148
                        parametrów, gdy¿ taka ilo¶æ danych jest
                        przechowywana w plikach WLK; je¿eli dany model
                        stacji nie obs³uguje wszystkich parametrów,
                        które mog± byæ przechowywane w plikach WLK, to
                        zostan± one wype³nione warto¶ci± NO_DATA.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section id="wlkdmn-export">
        <title>Eksport danych z plików WLK</title>
        <para>
            Daemon <emphasis>wlkdmn</emphasis> oprócz podstawowej
            funkcjonalno¶ci odczytywania danych bie¿±cych z plików WLK i
            przekazywania ich do parcooka, posiada równie¿ mo¿liwo¶æ
            odczytania danych historycznych z tych¿e plików (np. za
            podany okres w przesz³o¶ci), a nastêpnie wyeksportowania ich
            do pliku w formacie odpowiednim dla programu
            <emphasis>szbwriter</emphasis> (patrz <xref
            linkend="szbase-szbwriter">). Uruchomienie
            <emphasis>wlkdmn</emphasis> w tym trybie pracy nastêpuje
            poprzez podanie argumentu <emphasis>--export</emphasis> w
            linii poleceñ. W tym trybie dostêpne s± nastêpuj±ce
            argumenty linii poleceñ:
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>--file</emphasis> - ¶cie¿ka do pliku, do
                        którego wyeksportowane dane maj± zostaæ zapisane;
                        je¶li plik ten ju¿ istnieje, dane wyeksportowane
                        zostan± dopisane na jego koñcu; argument ten
                        jest <emphasis>obowi±zkowy</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>--from</emphasis> - data (w formacie
                        RRRR-MM-DD), od której nale¿y zacz±æ eksport 
                        danych; je¶li zostanie pominiêta zostan± 
                        wyeksportowane dane od najwcze¶niejszych dostêpnych
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>--to</emphasis> - data (w formacie
                        RRRR-MM-DD), na której nale¿y zakoñczyæ eksport 
                        danych; je¶li zostanie pominiêta zostan± 
                        wyeksportowane dane do najpó¼niejszych dostêpnych
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
</chapter>

<chapter id="ASCII-CODES">
<title>Tabela kodów ASCII</title>
<table frame="all"><title>Tablica kodów ASCII</title>
<tgroup cols="3" align="center" colsep="1" rowsep="1">
<colspec colname="col1" align="center" colwidth="90"> <!-- Identyfikatory kolumn -->
<colspec colname="col2" align="center" colwidth="40">
<colspec colname="col3" align="center" colwidth="40">
<thead>
<row>
   <entry align="center">ASCII</entry>
   <entry align ="center">HEX</entry>
   <entry align ="center">DEC</entry>
</row>
</thead>
<tbody>
<row>
   <entry>NUL (CTRL+@)</entry>
   <entry>00</entry>
   <entry>0</entry>
</row>

<row>
   <entry>SOH (CTRL+A)</entry>
   <entry>01</entry>
   <entry>1</entry>
</row>

<row>
   <entry>STX (CTRL+B)</entry>
   <entry>02</entry>
   <entry>2</entry>
</row>
<row>
   <entry>ETX (CTRL+C)</entry>
   <entry>03</entry>
   <entry>3</entry>
</row>
<row>
   <entry>EOT (CTRL+D)</entry>
   <entry>04</entry>
   <entry>4</entry>
</row>

<row>
   <entry>ENQ (CTRL+E)</entry>
   <entry>05</entry>
   <entry>5</entry>
</row>

<row>
   <entry>ACK (CTRL+F)</entry>
   <entry>06</entry>
   <entry>6</entry>
</row>

<row>
   <entry>BEL (CTRL+G)</entry>
   <entry>07</entry>
   <entry>7</entry>
</row>

<row>
   <entry>BS (CTRL+H)</entry>
   <entry>08</entry>
   <entry>8</entry>
</row>

<row>
   <entry>HT (CTRL+I)</entry>
   <entry>09</entry>
   <entry>9</entry>
</row>

<row>
   <entry>LF (CTRL+J)</entry>
   <entry>0A</entry>
   <entry>10</entry>
</row>

<row>
   <entry>VT (CTRL+K)</entry>
   <entry>0B</entry>
   <entry>11</entry>
</row>

<row>
   <entry>FF (CTRL+L)</entry>
   <entry>0C</entry>
   <entry>12</entry>
</row>

<row>
   <entry>CR (CTRL+M)</entry>
   <entry>0D</entry>
   <entry>13</entry>
</row>

<row>
   <entry>SO (CTRL+N)</entry>
   <entry>0E</entry>
   <entry>14</entry>
</row>

<row>
   <entry>SI (CTRL+O)</entry>
   <entry>0F</entry>
   <entry>15</entry>
</row>

<row>
   <entry>DLE (CTRL+P)</entry>
   <entry>10</entry>
   <entry>16</entry>
</row>

<row>
   <entry>DC1 (CTRL+Q)</entry>
   <entry>11</entry>
   <entry>17</entry>
</row>

<row>
   <entry>DC2 (CTRL+R)</entry>
   <entry>12</entry>
   <entry>18</entry>
</row>

<row>
   <entry>DC3 (CTRL+S)</entry>
   <entry>13</entry>
   <entry>19</entry>
</row>

<row>
   <entry>DC4 (CTRL+T)</entry>
   <entry>14</entry>
   <entry>20</entry>
</row>

<row>
   <entry>NAK (CTRL+U)</entry>
   <entry>15</entry>
   <entry>21</entry>
</row>

<row>
   <entry>SYN (CTRL+V)</entry>
   <entry>16</entry>
   <entry>22</entry>
</row>

<row>
   <entry>ETB (CTRL+W)</entry>
   <entry>17</entry>
   <entry>23</entry>
</row>

<row>
   <entry>CAN (CTRL+X)</entry>
   <entry>18</entry>
   <entry>24</entry>
</row>

<row>
   <entry>EM (CTRL+Y)</entry>
   <entry>19</entry>
   <entry>25</entry>
</row>

<row>
   <entry>SUB (CTRL+Z)</entry>
   <entry>1A</entry>
   <entry>26</entry>
</row>

<row>
   <entry>ESC (CTRL+[)</entry>
   <entry>1B</entry>
   <entry>27</entry>
</row>

<row>
   <entry>FS (CTRL+\)</entry>
   <entry>1C</entry>
   <entry>28</entry>
</row>

<row>
   <entry>GS (CTRL+])</entry>
   <entry>1D</entry>
   <entry>29</entry>
</row>

<row>
   <entry>RS (CTRL+^)</entry>
   <entry>1E</entry>
   <entry>30</entry>
</row>

<row>
   <entry>US (CTRL+_)</entry>
   <entry>1F</entry>
   <entry>31</entry>
</row>

<row>
   <entry>SPACE</entry>
   <entry>00</entry>
   <entry>0</entry>
</row>

<row>
<entry>!</entry>
<entry>21</entry>
<entry>33</entry>
</row>

<row>
<entry>"</entry>
<entry>22</entry>
<entry>34</entry>
</row>

<row>
<entry>#</entry>
<entry>23</entry>
<entry>35</entry>
</row>

<row>
<entry>$</entry>
<entry>24</entry>
<entry>36</entry>
</row>

<row>
<entry>%</entry>
<entry>25</entry>
<entry>37</entry>
</row>

<row>
<entry>&</entry>
<entry>26</entry>
<entry>38</entry>
</row>

<row>
<entry>'</entry>
<entry>27</entry>
<entry>39</entry>
</row>

<row>
<entry>(</entry>
<entry>28</entry>
<entry>40</entry>
</row>

<row>
<entry>)</entry>
<entry>29</entry>
<entry>41</entry>
</row>

<row>
<entry>*</entry>
<entry>2A</entry>
<entry>42</entry>
</row>

<row>
<entry>+</entry>
<entry>2B</entry>
<entry>43</entry>
</row>

<row>
<entry>,</entry>
<entry>2C</entry>
<entry>44</entry>
</row>

<row>
<entry>-</entry>
<entry>2D</entry>
<entry>45</entry>
</row>

<row>
<entry>.</entry>
<entry>2E</entry>
<entry>46</entry>
</row>

<row>
<entry>/</entry>
<entry>2F</entry>
<entry>47</entry>
</row>

<row>
<entry>0</entry>
<entry>30</entry>
<entry>48</entry>
</row>

<row>
<entry>1</entry>
<entry>31</entry>
<entry>49</entry>
</row>

<row>
<entry>2</entry>
<entry>32</entry>
<entry>50</entry>
</row>

<row>
<entry>3</entry>
<entry>33</entry>
<entry>51</entry>
</row>

<row>
<entry>4</entry>
<entry>34</entry>
<entry>52</entry>
</row>

<row>
<entry>5</entry>
<entry>35</entry>
<entry>53</entry>
</row>

<row>
<entry>6</entry>
<entry>36</entry>
<entry>54</entry>
</row>

<row>
<entry>7</entry>
<entry>37</entry>
<entry>55</entry>
</row>

<row>
<entry>8</entry>
<entry>38</entry>
<entry>56</entry>
</row>

<row>
<entry>9</entry>
<entry>39</entry>
<entry>57</entry>
</row>

<row>
<entry>:</entry>
<entry>3A</entry>
<entry>58</entry>
</row>

<row>
<entry>;</entry>
<entry>3B</entry>
<entry>59</entry>
</row>

<row>
<entry><</entry>
<entry>3C</entry>
<entry>60</entry>
</row>

<row>
<entry>=</entry>
<entry>3D</entry>
<entry>61</entry>
</row>

<row>
<entry>></entry>
<entry>3E</entry>
<entry>62</entry>
</row>

<row>
<entry>?</entry>
<entry>3F</entry>
<entry>63</entry>
</row>

<row>
<entry>@</entry>
<entry>40</entry>
<entry>64</entry>
</row>

<row>
<entry>A</entry>
<entry>41</entry>
<entry>65</entry>
</row>

<row>
<entry>B</entry>
<entry>42</entry>
<entry>66</entry>
</row>

<row>
<entry>C</entry>
<entry>43</entry>
<entry>67</entry>
</row>

<row>
<entry>D</entry>
<entry>44</entry>
<entry>68</entry>
</row>

<row>
<entry>E</entry>
<entry>45</entry>
<entry>69</entry>
</row>

<row>
<entry>F</entry>
<entry>46</entry>
<entry>70</entry>
</row>

<row>
<entry>G</entry>
<entry>47</entry>
<entry>71</entry>
</row>

<row>
<entry>H</entry>
<entry>48</entry>
<entry>72</entry>
</row>

<row>
<entry>I</entry>
<entry>49</entry>
<entry>73</entry>
</row>

<row>
<entry>J</entry>
<entry>4A</entry>
<entry>74</entry>
</row>

<row>
<entry>K</entry>
<entry>4B</entry>
<entry>75</entry>
</row>

<row>
<entry>L</entry>
<entry>4C</entry>
<entry>76</entry>
</row>

<row>
<entry>M</entry>
<entry>4D</entry>
<entry>77</entry>
</row>

<row>
<entry>N</entry>
<entry>4E</entry>
<entry>78</entry>
</row>

<row>
<entry>O</entry>
<entry>4F</entry>
<entry>79</entry>
</row>

<row>
<entry>P</entry>
<entry>50</entry>
<entry>80</entry>
</row>

<row>
<entry>Q</entry>
<entry>51</entry>
<entry>81</entry>
</row>

<row>
<entry>R</entry>
<entry>52</entry>
<entry>82</entry>
</row>

<row>
<entry>S</entry>
<entry>53</entry>
<entry>83</entry>
</row>

<row>
<entry>T</entry>
<entry>54</entry>
<entry>84</entry>
</row>

<row>
<entry>U</entry>
<entry>55</entry>
<entry>85</entry>
</row>

<row>
<entry>V</entry>
<entry>56</entry>
<entry>86</entry>
</row>

<row>
<entry>W</entry>
<entry>57</entry>
<entry>87</entry>
</row>

<row>
<entry>X</entry>
<entry>58</entry>
<entry>88</entry>
</row>

<row>
<entry>Y</entry>
<entry>59</entry>
<entry>89</entry>
</row>

<row>
<entry>Z</entry>
<entry>5A</entry>
<entry>90</entry>
</row>

<row>
<entry>[</entry>
<entry>5B</entry>
<entry>91</entry>
</row>

<row>
<entry>\</entry>
<entry>5C</entry>
<entry>92</entry>
</row>

<row>
<entry>]</entry>
<entry>5D</entry>
<entry>93</entry>
</row>

<row>
<entry>^</entry>
<entry>5E</entry>
<entry>94</entry>
</row>

<row>
<entry>_</entry>
<entry>5F</entry>
<entry>95</entry>
</row>

<row>
<entry>`</entry>
<entry>60</entry>
<entry>96</entry>
</row>

<row>
<entry>a</entry>
<entry>61</entry>
<entry>97</entry>
</row>

<row>
<entry>b</entry>
<entry>62</entry>
<entry>98</entry>
</row>

<row>
<entry>c</entry>
<entry>63</entry>
<entry>99</entry>
</row>

<row>
<entry>d</entry>
<entry>64</entry>
<entry>100</entry>
</row>

<row>
<entry>e</entry>
<entry>65</entry>
<entry>101</entry>
</row>

<row>
<entry>f</entry>
<entry>66</entry>
<entry>102</entry>
</row>

<row>
<entry>g</entry>
<entry>67</entry>
<entry>103</entry>
</row>

<row>
<entry>h</entry>
<entry>68</entry>
<entry>104</entry>
</row>

<row>
<entry>i</entry>
<entry>69</entry>
<entry>105</entry>
</row>

<row>
<entry>j</entry>
<entry>6A</entry>
<entry>106</entry>
</row>

<row>
<entry>k</entry>
<entry>6B</entry>
<entry>107</entry>
</row>

<row>
<entry>l</entry>
<entry>6C</entry>
<entry>108</entry>
</row>

<row>
<entry>m</entry>
<entry>6D</entry>
<entry>109</entry>
</row>

<row>
<entry>n</entry>
<entry>6E</entry>
<entry>110</entry>
</row>

<row>
<entry>o</entry>
<entry>6F</entry>
<entry>111</entry>
</row>

<row>
<entry>p</entry>
<entry>70</entry>
<entry>112</entry>
</row>

<row>
<entry>q</entry>
<entry>71</entry>
<entry>113</entry>
</row>

<row>
<entry>r</entry>
<entry>72</entry>
<entry>114</entry>
</row>

<row>
<entry>s</entry>
<entry>73</entry>
<entry>115</entry>
</row>

<row>
<entry>t</entry>
<entry>74</entry>
<entry>116</entry>
</row>

<row>
<entry>u</entry>
<entry>75</entry>
<entry>117</entry>
</row>

<row>
<entry>v</entry>
<entry>76</entry>
<entry>118</entry>
</row>

<row>
<entry>w</entry>
<entry>77</entry>
<entry>119</entry>
</row>

<row>
<entry>x</entry>
<entry>78</entry>
<entry>120</entry>
</row>

<row>
<entry>y</entry>
<entry>79</entry>
<entry>121</entry>
</row>

<row>
<entry>z</entry>
<entry>7A</entry>
<entry>122</entry>
</row>

<row>
<entry>{</entry>
<entry>7B</entry>
<entry>123</entry>
</row>

<row>
<entry>|</entry>
<entry>7C</entry>
<entry>124</entry>
</row>

<row>
<entry>}</entry>
<entry>7D</entry>
<entry>125</entry>
</row>

<row>
<entry>~</entry>
<entry>7E</entry>
<entry>126</entry>
</row>

<row>
<entry>DEL</entry>
<entry>7F</entry>
<entry>127</entry>
</row>

</tbody>
</table>
</chapter>

</book>

