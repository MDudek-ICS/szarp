COMPILATION.Windows

Adam Smyk <asmyk@praterm.com.pl>

Niniejszy dokument opisuje sposób kompilacja aplikacji Szarp w systemie Windows
 z wykorzystaniem narzêdzi:
	Cmake (wersja 2.6), 
	Eclipse (wersja 3.4.1),  
	Code::Blocks
	kompilatora MinGW32.


Spis tre¶ci:

1. Pliki ¼ród³owe aplikacji Szarp.
2. Opis aplikacji CMake  (wersja 2.6).
3. Kompilator MinGW.
4. Wybór IDE (Code::Blocks, Eclipse, VisualStudio, Dev++).
5. Test konfiguracji.
6. Opis niezbêdnych plików nag³ówkowych i bibliotek
   6.1. Przyk³adowy plik konfiguracyjny wykorzystywany do kompilacji biblioteki
        libSzarp systemu Szarp.
   6.2. Przyk³adowy plik konfiguracyjny wykorzystywany do kompilacji biblioteki
        libSzarp2 systemu Szarp.
   6.3. Przyk³adowy plik konfiguracyjny wykorzystywany do kompilacji biblioteki
        wx/common systemu Szarp.
   6.4. Przyk³adowy plik konfiguracyjny wykorzystywany do kompilacji aplikacji
        draw3 systemu Szarp.



1. Pliki ¼ród³owe aplikacji Szarp

Uwaga: Pliki ¼ród³owe aplikacji Szarp mog± byæ przechowane w dowolnym katalogu, 
natomiast w zale¿no¶ci od wybranego ¶rodowiska, pliki te albo zostan± zaimportowane 
do innej lokalizacji, jak to ma miejsce w przypadku Eclipse, albo dalsza praca 
bêdzie wykonywana na plikach w ich oryginalnej lokalizacji jak to ma miejsce w 
przypadku Code::Blocks. 



2. Instalacja pakietu cmake. 

Pakiet CMake mo¿na ¶ci±gn±æ ze strony http://www.cmake .org. Po zainstalowaniu 
pakietu, mo¿emy z nim pracowaæ  w trybie wsadowym (ten tryb pracy wymagany jest
 przez IDE) lub interaktywnym.

Pracê najpro¶ciej jest rozpoczynaæ w trybie interaktywnym.  Po uruchomieniu 
aplikacji CMake wybieramy katalog, gdzie przechowywane s± pliki ¼ród³owe, oraz 
gdzie maj± byæ zapisane pliki wynikowe. Niestety do poprawnej pracy aplikacji 
CMake, wymagany jest plik o nazwie CMakeList.txt, który zawiera wszystkie 
niezbêdne informacje na temat kompilacji naszego projektu. Plik CMakeList.txt 
musi niestety zostaæ utworzony rêcznie i wymaga znajomo¶ci komend, które opisane 
s± na stronie http://www.cmake.org/cmake/help/cmake2.6docs.html.

Komendy te umo¿liwiaj± okre¶lenie wszystkich parametrów kompilacji, takich jak 
katalogi z plikami nag³ówkowymi, katalogi z bibliotekami, nazwy konkretnych 
bibliotek, nazwy pakietów, aplikacji itd. W dalszej czê¶ci dokumentu, zostan± 
przedstawione przyk³ady plików CMakeList.txt. Po zdefiniowaniu wszystkich komend 
w pliku CMakeList.txt, wciskamy przycisk Configure, który sprawdza czy wszystkie 
wymagane parametry zosta³y podane. Je¿eli tak, po wci¶niêciu przycisku Ok, zostanie 
wygenerowany odpowiedni plik Makefile.  Po tym kroku mo¿emy  przej¶æ do zasadniczego 
etapu kompilacji. 

Po wci¶niêciu przycisku Configure,  generowany jest równie¿ plik o nazwie CMakeCache.txt, 
który zawiera wszystkie niezbêdne informacje do wygenerowania pliku Makefile. 
W pó¼niejszych etapach, mo¿emy rêcznie edytowaæ plik CMakeCache.txt. W momencie gdy 
konfigurujemy nasz projekt po raz pierwszy, po wci¶niêciu przycisku Configure bêdziemy 
musieli wybraæ, w jakiej postaci bêdziemy chcieli uzyskaæ wynik. Mo¿liwo¶ci jest wiele, 
mog± to byæ projekty np.: Code::Blocks, Eclipse, Visual Studio w ró¿nych wersjach itd. 
Wybieramy najbardziej nam odpowiadaj±cy i dostajemy gotowy projekt. Je¿eli poprawnie go 
skonfigurowali¶my, praca aplikacji CMake zostaje zakoñczona. 

Pe³na dokumentacja dostêpna jest na stronie http://www.cmake .org. 



3. Instalacja pakietu MinGW    

Instalacja pakietu MinGW  jest stosunkowo prosta. Musimy pamiêtaæ, ¿e kompilator g++
powinien byæ w wersji kompatybilnej z wersj± zainstalowan± na komputerze vm-szarp czyli 
najlepiej 4.3.3 (uwaga: g++ powinien byæ skonfigurowany z opcj± -enable-sjlj-exceptions, 
aby to sprawdziæ wywo³ujemy g++ -v). Odpowiednia  wersja pod Windows dostêpna jest 
miêdzy innymi tutaj: 
http://freefr.dl.sourceforge.net/sourceforge/tdm-gcc/tdm-mingw-1.902.0-f1.exe.
Je¿eli pakiet MinGW zosta³ zainstalowany w katalogu C:\MinGW  to dodatkowo musimy 
modyfikowaæ zmienn± systemow± PATH: 
set PATH=c:\MinGW\bin\;%PATH%. 



4. Instalacja i konfiguracja ¶rodowiska programistycznego - IDE.

W zale¿no¶ci od konieczno¶ci (przyzwyczajenia, innych wymogów), instalujemy 
odpowiednie ¶rodowisko IDE. W naszym przypadku, testowali¶my dwa darmowe IDE: 	
	CodeBlocks  (http://www.codeblocks.org),
	Eclipse (http://www.eclipse.org). 
Operacja instalacji nie powinna sprawiæ wiêkszych problemów (w  przypadku Eclipse, 
sprowadza siê to tylko do rozpakowania pliku zip).

Aplikacja Code::Blocks, praktycznie nie wymaga, ¿adnej konfiguracji. Je¿eli w aplikacji 
CMake wybrali¶my projekt Code::Blocks + MinGW i poprawnie okre¶lili¶my wszystkie 
parametry kompilacji, to wystarczy otworzyæ utworzony projekt i przyst±piæ do 
kompilacji naszego projektu.

Natomiast ¶rodowisko Eclipse, wymaga odpowiedniej konfiguracji do dzia³ania z 
aplikacj± CMake.
1. Wchodzimy do  Run->External Tools->External Tools Configurations. 
2. Klikamy Program, aby utworzyæ nowy uchwyt do aplikacji zewnêtrznej.
3. Konfigurujemy nasz± aplikacjê:
 	Name: podajemy nazwê naszej aplikacji
	Location: Podajemy po³o¿enie aplikacji CMake
	Working Directory: Podajemy po³o¿enie po³o¿enie naszego projektu 
                           (w przypadku ogólnym mo¿emy odwo³aæ siê do wszystkich 
                           projektów ${workspace_loc}/${project_name})
	Arguments: Podajemy dodatkowe argumenty do wywo³ywanej aplikacji, w naszym 
                   przypadku okre¶lamy typ kompilatora, albo rodzaj generowanego 
                   pliku Makefile, u nas argument bêdzie mia³ postaæ   -G "MinGW Makefiles".
Nastêpnie, w zak³adce Refresh zaznaczamy "The Project containing the selected resource", 
a w zak³adce Build  zaznaczamy  "Build before launch" i "The Project containing the 
selected resource".
Tak skonfigurowane ¶rodowisko Eclipse gotowe jest do pracy z projektem zarz±dzanym i 
konfigurowanym, przez aplikacjê CMake.



5. Test konfiguracji.

Aby mieæ pewno¶æ co do poprawno¶ci naszej konfiguracji, przetestujmy j±.

Krok 1. Za³ó¿my, ¿e w katalogu  F:\test, mamy dwa pliki (test.cpp, CMakeList.txt). 

Plik test.cpp zawiera:

#include <iostream>
#include <string>

using namespace  std;

int main(int argc,  char **argv) {
	string str   = "Hello string";
#ifdef DWSTRING
	wstring wstr = L"Hello wstring";
#endif
	cout << str << endl;
#ifdef DWSTRING
	wcout << wstr << endl;
#endif
	return 0;
}


Plik CMakeList.txt zawiera:

cmake_minimum_required(VERSION 2.6)
###########
# SOURCES #
###########

PROJECT(test)

ADD_EXECUTABLE(test
	test.cpp
	)

ADD_DEFINITIONS(
	-DWSTRING=1
	)

INCLUDE_DIRECTORIES(
	./
	)

Krok 2. Tworzymy nowy projekt C++ w Eclipcse (File->New->C++ Project).  Wszystkie 
projekty w ¶rodowisku Eclipse przechowywane s± w tak zwanej przestrzeni roboczej 
(workspace), która musi zostaæ wybrana na pocz±tku pracy i tam te¿ zostanie 
utworzony katalog zawieraj±cy nasz projekt.
Tworzymy pusty projekt o nazwie Test, który zostanie zapisany w katalogu roboczym. 
Dodatkowo okre¶lamy ¶rodowisko (Toolchain) zawieraj±ce kompilator, linker, debugger 
i inne narzêdzia niezbêdne do przeprowadzenia kompilacji. W systemie Windows mo¿na 
wykorzystaæ ¶rodowiska do kompilacji takie jak MinGW albo Cygwin. Mo¿na to 
oczywi¶cie pó¼niej w dowolny sposób zmodyfikowaæ, poprzez dostêp do w³a¶ciwo¶ci 
projektu. 

Krok 3. Importujemy pliki ¼ród³owe do naszego projektu (File->Import->File System).

Krok 4. Okre¶lamy katalog, zawieraj±cy pliki ¼ród³owe (From directory), a nastêpnie 
zaznaczamy te pliki które maj± zostaæ zaimportowane do naszego projektu (Into folder). 
W naszym przypadku bêd± to test.cpp  i CMakeLists.txt. Po poprawnym zaimportowaniu 
plików ¼ród³owych, powinni¶my otrzymaæ podfolder o nazwie test w folderze Test 
(zak³adka C/C++ Projects).

Krok 5. Dla uproszczenia wspó³pracy z aplikacj± CMake, przenosimy ca³± zawarto¶æ 
podfolderu test do folderu g³ównego, a folder test usuwamy.

Krok 6. Przy tak utworzonym projekcie, uruchamiamy aplikacjê 
CMake (Run->Externa tools ->Cmake).  W naszym przypadku zostan± utworzone pliki: 
	CMakeCache.txt zawieraj±cy aktualn± konfiguracjê,  
	Makefile wykorzystany do kompilacji, 
	oraz katalog CMakeFiles zawieraj±cy  pliki po¶rednie. 
W zak³adce Console powinien pojawiæ siê zapis informuj±cy o poprawnym zakoñczeniu 
konfiguracji (Configuring done i Generating done)

Krok 7. Po poprawnym zakoñczeniu kroku 6 mo¿emy przyst±piæ do kompilacji. Aby to 
wykonaæ, nale¿y wskazaæ aplikacjê make, która przetworzy wcze¶niej wygenerowany 
plik Makefile. Otwieramy konfiguracjê naszego projektu (Projekt->Properties) i w 
Build command wpisujemy nazwê odpowiedniego narzêdzia (w naszym przypadku 
mingw32-make.exe). Mo¿na tutaj wskazaæ równie¿ nazwê katalogu, gdzie zostan± zapisane 
pliki wynikowe.

Po poprawnej konfiguracji, powinni¶my ju¿ poprawnie skompilowaæ nasz± próbn± aplikacjê.

Krok 8. Po poprawnej kompilacji, mo¿emy skonfigurowaæ  nasz projekt do uruchomienia  
(Run->Run Configurations). 

Aby to wykonaæ musimy okre¶liæ:  
	nazwê konfiguracji (Name), 
	nazwê projektu
	nazwê aplikacji (nazwê aplikacji mo¿na wskazaæ dopiero po jej skompilowaniu).

Po poprawnej konfiguracji mo¿emy uruchomiæ nasz± aplikacjê w trybie Release.


Krok 9. Aplikacjê mo¿emy  równie¿ uruchomiæ w trybie Debug, ale w tym przypadku, nale¿y 
plik CMakeList.txt, zmodyfikowaæ jak poni¿ej.

cmake_minimum_required(VERSION 2.6)
###########
# SOURCES #
###########

PROJECT(test)

ADD_EXECUTABLE(test
	test.cpp
	)

ADD_DEFINITIONS(
	-DWSTRING=1
	-g
	)

INCLUDE_DIRECTORIES(
	./
	)

Nasz przyk³adowy projekt zosta³ skonfigurowany poprawnie. W podobny sposób 
przeprowadzamy konfiguracjê projektów aplikacji Szarp. 
Uwaga, ka¿da modyfikacja plików CMakeLists.txt i CMakeCache.txt powinna wymusiæ 
rekonfiguracjê ca³ego projektu. Je¿eli z jakich¶ wzglêdów tak siê nie sta³o, 
nale¿y tak± zmianê wymusiæ rêcznie. 

Uwaga, ¶rodowisko Eclipse zosta³o zaprojektowane do uruchamiania i testowania 
wielu aplikacji jednocze¶nie, albo jednej lub wielu aplikacji uruchamianych w 
kilku konfiguracjach (z ró¿nymi parametrami). Je¿eli w³a¶nie kompilowana aplikacja 
w dalszym ci±gu jest uruchomiona (co nie zawsze jest takie oczywiste, a mo¿na to 
sprawdziæ  w zak³adce Console), zapisanie pliku wynikowego mo¿e okazaæ siê 
niemo¿liwe (nale¿y go zakoñczyæ klikaj±c czerwon± ikonê Stop).



6. Opis niezbêdnych plików nag³ówkowych i bibliotek.

Do kompilacji aplikacji Szarp niezbêdne s± biblioteki:
	boost, 
	wxWidgets,
	iconv, 
	libxml2, 
	libxslt, 
	curl, 
	zlib, 
	OpenSSL, 
	librsync, 
	lua.

Wszystkie biblioteki i pliki nag³ówkowe niezbêdne do kompilacji mog± zostaæ 
¶ci±gniête z odpowiednich katalogów komputera vm-szarp (jakkolwiek mia³em pewne 
problemy z prac± z tymi plikami) lub te¿ mog± zostaæ ¶ci±gniête w postaci 
¼ród³owej i skompilowane przy u¿yciu kompilatora MinGW. 
Dodatkowo, aby skompilowaæ aplikacjê draw3, nale¿y wcze¶niej skompilowaæ biblioteki 
libSzarp, libSzarp2 i wxcommon. Poni¿ej zamieszczone s± przyk³adowe pliki 
CMakeLists.txt, które mog± zostaæ wykorzystane do skompilowania bibliotek libSzarp, 
libSzarp2 ,wxcommon i aplikacji draw3.
Uwaga: we wszystkich poni¿szych przyk³adach, odwo³ania (wszystkie ¶cie¿ki dostêpu 
do katalogów, plików itp.) zale¿± od lokalizacji kompilatora, lokalizacji bibliotek 
oraz od lokalizacji katalogów roboczych projektów i musz± zostaæ dobrane 
indywidualnie.


6.1. Konfiguracja kompilacji biblioteki libSzarp.

Przyk³adowy plik CMakeLists.txt wykorzystywany do kompilacji biblioteki libSzarp jest 
do³±czony poni¿ej:

cmake_minimum_required(VERSION 2.6)
############
# STANDARD #
############

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/SetDirs)

##############################
# PACKAGES AND CONFIGURATION #
##############################

FIND_PACKAGE(Flex  REQUIRED)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_SOURCE_DIR}/config.h)

###########
# SOURCES #
###########

PROJECT(libSzarp)

ADD_DEFINITIONS(  
	-DHAVE_STRING_H 
	-DHAVE_STDLIB_H 
	-DMINGW32 
	-DHAVE_UNISTD_H  
	-g
	-mthreads
)

INCLUDE_DIRECTORIES(
	include/
	.
)

ADD_CUSTOM_COMMAND(OUTPUT
		libparnt.yy.c
		COMMAND ${FLEX_EXECUTABLE} ARGS -olibparnt.yy.c libparnt.lex
		DEPENDS libparnt.lex include/libpar_int.h include/libparnt.parse.h
)

ADD_LIBRARY(Szarp
    libparnt.yy.cc
    libparnt.cc
    libparnt.parse.cc
    liblog.cc
    date.cc
    msgerror.cc
    msgtools.cc
    daemon.cc
    execute.cc
    help.cc
    passwd.cc
    mbrtu.cc
    conversion.cc
    ipctools.cc
    mingw32_missing.cc
)

Do poprawnego dzia³ania plik ten wymaga zainstalowania aplikacji Flex.exe.  Komenda 
FIND_PACKAGE(Flex  REQUIRED) uruchamia program FlexConfig.cmake, który znajduje 
plik wykonywalny flex.exe. Plik FlexConfig.make jest umieszczony w katalogu 
CMakeModules. Odpowiednie pliki s± ju¿ w dostarczone w plikach ¼ród³owych systemu 
Szarp dlatego dok³adniejszy ich opis zostanie tutaj pominiêty.


6.2. Konfiguracja kompilacji biblioteki libSzarp2.

Przyk³adowy plik CMakeLists.txt wykorzystywany do kompilacji biblioteki libSzarp2 
jest do³±czony poni¿ej:

cmake_minimum_required(VERSION 2.6)
############
# STANDARD #
############

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/SetDirs)

###########
# SOURCES #
###########
 
PROJECT(libSzarp2)

ADD_DEFINITIONS(
	-g
	-O2
	-D__WIN32_IE=0x400
	-Wall
	-DHAVE_CONFIG_H
	-D__GNUWIN32__ 
	-D__WIN32_IE=0x400
	-DHAVE_STRING_H
	-DMINGW32
	-mthreads
)

INCLUDE_DIRECTORIES(
	include/
	${Boost_INCLUDE_DIR}
	include/szbase/
	../libSzarp/include/
	./
)

ADD_LIBRARY(Szarp2 STATIC
	ipk/dmncfg.cc
	ipk/tdevice.cc
	ipk/tdraw.cc
	ipk/tparam.cc
	ipk/tradio.cc
	ipk/tdictionary.cc
	ipk/traport.cc
	ipk/tsendparam.cc
	ipk/tszarpconfig.cc
	ipk/tunit.cc
	ipk/tvalue.cc
	ipk/tboiler.cc
	ipk/tseason.cc
	ipk/tanalysis.cc
	ipk/tainterval.cc
	ipk/ipkcontainer.cc
	linedmn/ipchandler.cc
	linedmn/mbus.cc
	misc/convuri.c
	misc/crontime.cc
	misc/http.cc
	misc/insort.c
	misc/latin2.c
	misc/mingw32_missing.c
	misc/tokens.c
	misc/xmlutils.c
	misc/xscale.cc
	szbextr/extractor.cc
	parsers/ekrn_parser.c
	szbase/szbbase.cc
	szbase/szbbuf.cc
	szbase/szbdate.cc
	szbase/szbfile.cc
	szbase/szbname.cc
	szbase/definabledatablock.cc
	szbase/realdatablock.cc
	szbase/combineddatablock.cc
	szbase/cacheabledatablock.cc
	szbase/luadatablock.cc
	szbase/szbhash.cc
	szbase/szbdatablock.cc
      szbase/szbfilewatcher.cc
      szbase/szbcancelhandle.cc
)

##############################
# PACKAGES AND CONFIGURATION #
##############################

#FIND_PACKAGE(Flex  REQUIRED)
#FIND_PACKAGE(Bison  REQUIRED)
INCLUDE(FindLua51)
INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
INCLUDE(FindLibXml2)
INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
FIND_PACKAGE(libSzarp REQUIRED)
INCLUDE_DIRECTORIES(${LIBSZARP_INCLUDE_DIRS})
FIND_PACKAGE(boost REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})


CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_SOURCE_DIR}/config.h)


W pliku tym oprócz standardowych komend wykorzystywanych przez cmake, wystêpuj± 
zmienne (np.: LUA_INCLUDE_DIR), które musz± zostaæ zdefiniowane w pliku 
CMakeCache.txt:

//Path to a directctory.
LUA_INCLUDE_DIR:PATH=C:/MinGW/include

Zmienna, mo¿e byæ odno¶nikiem do ¶cie¿ki, do pliku.

//Path to a library.
LUA_LIBRARY:FILEPATH=C:/MinGW/lib/liblua5.1.a

Dok³adny sposób tworzenia oraz sk³adnia plików CMakeList.txt i CMakeCache.txt 
zosta³y opisane w dokumentacji. 


6.3. Konfiguracja kompilacji biblioteki wxcommon.

Przyk³adowy plik CMakeLists.txt wykorzystywany do kompilacji biblioteki wxcommon 
jest do³±czony poni¿ej. 

cmake_minimum_required(VERSION 2.6)
############
# STANDARD #
############

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/SetDirs)

##############################
# PACKAGES AND CONFIGURATION #
##############################

SET(wxWidgets_USE_UNICODE ON)
FIND_PACKAGE(wxWidgets REQUIRED base core xrc net gl html aui)
INCLUDE(${wxWidgets_USE_FILE})
INCLUDE(FindLua51)
INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
INCLUDE(FindLibXml2)
INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
FIND_PACKAGE(libSzarp REQUIRED)
INCLUDE_DIRECTORIES(${LIBSZARP_INCLUDE_DIRS})
FIND_PACKAGE(libSzarp2 REQUIRED)
INCLUDE_DIRECTORIES(${LIBSZARP2_INCLUDE_DIRS})

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_SOURCE_DIR}/config.h)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/version.h.cmake ${CMAKE_CURRENT_SOURCE_DIR}/version.h)

###########
# SOURCES #
###########

PROJECT(Common)

INCLUDE_DIRECTORIES(
		../../include
		../../libSzarp/include
		../../libSzarp2/include
		./
		${LIBXML2_INCLUDE_DIR}
		${wxWidgets_CXX_FLAGS}
		${OPENSSL_INCLUDE_DIR}
)

ADD_DEFINITIONS(
	-g
	-O2
	-D__WIN32_IE=0x400
	-Wall
	-DHAVE_CONFIG_H
	-D__GNUWIN32__ 
	-D__WIN32_IE=0x400
	-DHAVE_STRING_H
	-DMINGW32
	-mthreads
	-DUNICODE 
	-DHAVE_CONFIG_H 
	)


ADD_LIBRARY(wxcommon
	cconv.cc
	datechooser.cpp
	fetchparams.cc
	fonts.cpp
	geometry.cpp
	htmlabout.cpp
	htmlview.cpp
	parlist.cpp
	parselect.cpp
	serverdlg.cpp
	aboutdlg.cpp
	imagepanel.cpp
	szapp.cpp
	GUI/resource.cpp
	szhlpctrl.cpp
	szmutex.cpp
	ipc.cc
	cfgnames.cpp
	cfgdlg.cpp
	biowxsock.cpp
	pscgui.cpp
	authdiag.cpp
	szframe.cpp
	ballontaskbaritem.cpp
)

ADD_DEPENDENCIES(wxcommon version)


Przy tak zdefiniowanych plikach CMakeList.txt, biblioteki libSzarp, libSzarp2 i 
wxcommon powinny zostaæ poprawnie zbudowane.



6.4. Konfiguracja kompilacji aplikacji draw3.exe

Przyk³adowy plik CMakeLists.txt wykorzystywany do kompilacji aplikacji draw3.exe 
jest do³±czony poni¿ej.  Aplikacja draw3.exe zostanie utworzona, natomiast ze 
wzglêdu na konflikty (prawdopodobnie na poziomie odwo³añ do bibliotek dll), 
generowany jest b³±d: 

"Aplikacja nie zosta³a w³a¶ciwie zainicjowana (0xc0000005). 
 Kliknij przycisk OK., aby zakoñczyæ aplikacjê."

Rozwi±zywanie problemu w toku, a niniejszy dokument ma za zadanie u³atwienie 
jego rozwi±zania.


cmake_minimum_required(VERSION 2.6)
############
# STANDARD #
############

INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/SetDirs)

###########
# SOURCES #
###########

PROJECT(DRAW3)

ADD_EXECUTABLE(draw3
		cfgmgr.cpp
		coobs.cpp
		database.cpp
		dbinquirer.cpp
		defcfg.cpp
		disptime.cpp
		drawdnd.cpp
		drawfrm.cpp
		drawipc.cpp
		drawobs.cpp
		drawpsc.cpp
		drawpick.cpp
		drawpnl.cpp
		drawprint.cpp
		drawtb.cpp
		drawurl.cpp
		drawview.cpp
		frmmgr.cpp
		GUI/resource.cpp
		incsearch.cpp
		infowdg.cpp
		paredit.cpp
		piewin.cpp
		progfrm.cpp
		relwin.cpp
		remarks.cpp
		splashscreen.cpp
		statdiag.cpp
		summwin.cpp
		timeformat.cpp
		xydiag.cpp
		xygraph.cpp
               dbmgr.cpp
               draw3.cpp
               drawapp.cpp
               draw.cpp
               drawswdg.cpp
               seldraw.cpp
               selset.cpp
               timewdg.cpp
               errfrm.cpp
               paramslist.cpp
               codeeditor.cpp
               wxgraphs.cpp
               glgraphs.cpp
)

ADD_CUSTOM_COMMAND(OUTPUT
		GUI/resource.cpp
		COMMAND wxrc -c -o GUI/resource.cpp GUI/*xrc
)

INCLUDE_DIRECTORIES(
	./
	../libSzarp/
	../libSzarp/include/
	../libSzarp2/
	../libSzarp2/include/
	../wxcommon/
)

##############################
# PACKAGES AND CONFIGURATION #
##############################

ADD_DEFINITIONS( 
	-DNO_GSTREAMER 
	-DHAVE_CONFIG_H  
	-DWXUSINGDLL  
	-D__WXMSW__  
	-mthreads  
	-fno-strict-aliasing  
	-DwxUSE_OWNER_DRAWN=1 
	-g 
	-O2 
	-D__GNUWIN32__ 
	-D__WIN32_IE=0x400 
	-Wall 
	-DMINGW32
	-DUNICODE 
	-DBOOST_WINDOWS_API
	-D_GLIBCXX_USE_WCHAR_T 
	-D_GLIBCXX_USE_WSTRING
	-DVMIME_WIDE_CHAR_SUPPORT 
	${LIBXML2_DEFINITIONS}
	)
FIND_PACKAGE(libSzarp REQUIRED)
FIND_PACKAGE(libSzarp2 REQUIRED)
FIND_PACKAGE(wxcommon REQUIRED)
FIND_PACKAGE(wxscintilla REQUIRED)
FIND_PACKAGE(boost REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
INCLUDE(FindLua51)
INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
INCLUDE(FindLibXml2)
INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
SET(Boost_USE_STATIC_LIBS ON)
FIND_PACKAGE(PkgConfig REQUIRED)

LINK_DIRECTORIES( 
	${WXSCINTILLA_LIBRARY_DIRS} 
	${LIBSZARP2_LIBRARY_DIRS} 
	${LIBSZARP_LIBRARY_DIRS} 
	${WXCOMMON_INCLUDE_DIRS}
)

INCLUDE_DIRECTORIES( 
	${WXSCINTILLA_INCLUDE_DIRS} 
	${LIBSZARP2_INCLUDE_DIRS} 
	${LIBSZARP_INCLUDE_DIRS} 
	${WXCOMMON_LIBRARY_DIRS}
)

TARGET_LINK_LIBRARIES(draw3  
	${WXSCINTILLA_LIBRARY} 
	${LIBSZARP_LIBRARY} 
	${LIBSZARP2_LIBRARY}  
	${WXCOMMON_LIBRARY}
	${Boost_DATE_TIME__LIBRARY_ DEBUG} 
	${Boost_FILESYSTEM__LIBRARY_ DEBUG}  
	${Boost_SYSTEM_LIBRARY_DEBUG}  
	${Boost_THREADS__LIBRARY_ DEBUG}  
	${SQLITE3_LIBRARY} 
	${GDI32_LIBRARY}  
	${MINGWM10_LIBRARY} 
	${GTK_LIBRARY} 
	${GLICT_LIBRARY}   
	${GCC_LIBRARY} 
	${SSL_LIBRARY_DLL}  
	${EAY32_LIB_DLL} 
	${CURL_LIBRARY} 
	${WXMSW28UD_GCC_CUSTOM_DLL}  
	${WX01_libwx_mswu_richtext} 
	${WX02_libwx_mswu_aui} 	
	${WX03_libwx_mswu_xrc} 
	${WX04_libwx_mswu_qa} 
	${WX05_libwx_mswu_html} 
	${WX08_libwx_baseu_xml}   
	${WX11_libwx_mswu_gl}  
	${ICONV_LIBRARY} 
	${ICONV_LIBRARY_DLL}
	${GW32C_LIBRARY} 
	${UUID_LIBRARY} 
	${OLE32_LIBRARY} 
	${LUA_LIBRARY} 
	${OPENGL32_LIBRARY} 
	${GLU32_LIBRARY} 
	${LIBXML2_LIBRARIES}
)

ADD_DEPENDENCIES(draw3 RESOURCESCPP)


