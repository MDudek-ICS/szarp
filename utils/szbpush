#!/bin/bash
# SZARP: SCADA software 
# 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

# $Id: szbpush 6638 2009-04-14 14:17:52Z pawel $
#
# 2006 Praterm S.A.
# Darek Marcinkiewicz <rekiso@praterm.com.pl>
#
# Skrypt do wysy³ania baz szbase na zdalne koputery przez rsync'a
# Parametry - login(opcjonalny)+adres(np. byto@praterm),  prefiksy baz do wsy³ania
#
# /opt/szarp/bin/szbpush trgr@praterm {trgr,tgw1,tgw2}
#
# Do prawid³owego rozwiniêcia wieloznacznego prefiksu katalog musi isnieæ
# lokalnie. 
# Ten program jak i szrsync sprawdzaja timestamp pliku /opt/szarp/prefix/szbase_stamp
# jezeli jest on rozny na kompuetrze lokalnym i zdalnym to przesylana jest pelna lista
# plikow, wpp. tylko pliki z 2 ostatnich miesiecy.

HN=`hostname -s`
ME=`basename $0`

REMOTE=
USE_CURL=

#dodatkowe opcje dla rsync'a
RSYNC_OPTIONS="-az --rsh=ssh --exclude='.*' --exclude='nohup.out' --delete --force"
# dodatkowe opcje dla rsynca do wysy³ania baz szbase (gdy nie robimy pelnego synca)
SZBASE_EXTRA=" --include=`date +%Y%m.szb` --include=`date +%Y%m -d '1 month ago'`.szb --exclude=*.szb"

function log {
    echo `date '+%F %X'` "szbpush[$$]: $@" >> /opt/szarp/logs/szbpush.log
}

function usage {
    echo "`basename $0` [-c] <ADDRESS> <BASE> <BASE2>"
    echo "    -c - user curl to get szbase_stamp"
    echo "    <ADDRESS> - address to connect to"
    echo "    <BASE> - base to send"
    echo
}

OPTS=`getopt -q -o c -n $ME -- "$@"`

if [ $? != 0 ]; then
    usage
    exit 1
fi

eval set -- "$OPTS"

while true; do
    case "$1" in
	-c)
	    USE_CURL=yes
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    usage
	    exit 1
	    ;;
    esac
done

# sprawdza sposób wywo³ania i ustawia poziom gadatliwo¶ci wyj¶cia
function get_verbose_level () {
	RSYNC_VERBOSE="-vP" # domy¶lnie tryb gadatliwy

	m_pid=`/bin/pidof meaner3`

	if  [[ $PPID -eq $m_pid ]]; then
		RSYNC_VERBOSE="" # wywo³anie z meanera - tryb cichy
	fi
}

function get_local_stamp {
	RET=-1
	RESULT=`stat --format=%Y $1/szbase_stamp 2>/dev/null`
	if [ $? -eq 0 ]; then
		RET=$RESULT;
	fi
	echo $RET;
}

function get_remote_stamp {
	RET=-1;	
	if [ -z $USE_CURL ]; then
		RESULT=`ssh -o StrictHostKeyChecking=no $REMOTE "stat --format=%Y $1/szbase_stamp" 2>/dev/null` 
		SRET=$?
		#connection failed
		if [ $SRET -eq 255 ]; then
		    log "Unable to connect to remote host"
		    echo "Unable to connect to remote host";
		    return 2;
		fi
	else
		bid=`basename $1`
		RESULT=`curl -A "szbpush/0.2 ($HN)" --fail --silent "http://$REMOTE_SERVER:81/sync.cgi?id=${bid}"`
		SRET=$?
	fi

	if [ $SRET -eq 0 ]; then
		RET=$RESULT;
	fi
	echo $RET;
	return 0;
}

function do_rsync {
	LMT=`get_local_stamp $1`;

	SE="";

	if [ $LMT -ne -1 ]; then
	    RMT=`get_remote_stamp $1`
	    [ $? -eq 0 ] || return 1;
	 
	    log "do_rsync: LMT: $LMT, RMT: $RMT"

	    if [ $RMT -eq $LMT ]; then
		SE=$SZBASE_EXTRA
	    fi
	fi

	/usr/bin/rsync $RSYNC_VERBOSE $RSYNC_OPTIONS $SE $1 $REMOTE:/opt/szarp
}


if [ $# -lt 2 ]; then
	usage
	exit 2
fi

log "start with args $@"

get_verbose_level;

REMOTE=$1;
REMOTE_SERVER=`echo "REMOTE" | cut -d '@' -f 2`
if [ -z "REMOTE_SERVER" ] ; then
	REMOTE_SERVER=$REMOTE
fi
shift;

CODE=0

for ARG in $@ ; do
	for i in /opt/szarp/$ARG ; do
		log "do_rsync $i start"
		do_rsync $i;
		LAST=$?;
		log "do_rsync $i end (LAST: $LAST)"
		[ $LAST -ne 0 ] && CODE=$LAST;
	done
done
exit $CODE
