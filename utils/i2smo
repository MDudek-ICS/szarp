#!/usr/bin/python
# -*- coding: UTF-8 -*-
# vim: set fileencoding=utf-8 :
#
# SZARP: SCADA software 
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

"""
Wrapper for running ipk2szarp configuration parser
and for displaying suggestions to user.
"""

import argparse
import subprocess
from subprocess import Popen, PIPE
import pysvn
import sys
import os
from clint.textui import puts, indent, colored
from clint.textui.core import STDOUT, STDERR
from lxml import etree
import hashlib
import re
import glob

error_count = 0
quiet = False
def printerr(msg, prefix="ERROR: "):
	global error_count
	error_count = error_count + 1
	puts(colored.red(prefix + "(" + str(error_count) + ") " + str(msg)), stream=STDERR)

note_count = 0
def printnote(msg, prefix="NOTE: "):
	global note_count
	note_count = note_count + 1
	puts(colored.yellow(prefix + "(" + str(note_count) + ") " + str(msg)))

note_list = []
def add_note(msg):
	note_list.append(msg)

def print_notes():
	for note in note_list:
		printnote(note)

def printok(msg):
	puts(colored.green(str(msg)))

def get_szarp_uncommited():
	# without realpath client.info() strips the symlink
	szarp_path = os.path.realpath("/etc/szarp/default/")
	client = pysvn.Client()
	is_svn_repo = True
	try:
		client.info(szarp_path)
	except:
		is_svn_repo = False
	if is_svn_repo:
		changes = client.status(szarp_path, get_all=False)
		interesting = set([pysvn.wc_status_kind.added, pysvn.wc_status_kind.deleted,\
			pysvn.wc_status_kind.modified, pysvn.wc_status_kind.conflicted])
		uncommited = [f.path for f in changes if f.text_status in interesting]
		uncommited_present = len(uncommited) > 0
	else:
		uncommited_present = None
	return is_svn_repo, uncommited_present


conf_parser = "/opt/szarp/bin/ipk2szarp"

def check_svn():
	szarp_svn, szarp_uncommited = get_szarp_uncommited()
	realpath = os.path.realpath("/etc/szarp/default")
	if szarp_svn:
		if szarp_uncommited:
			add_note("uncommited changes found in " + realpath + ": /opt/szarp/bin/conf-put.sh")
	else:
		if not quiet:
			add_note(realpath + " is not added to svn, maybe it should?")

def parse_config_file():
	options = etree.XMLParser(remove_blank_text=True, remove_comments=True)
	if args.input_file is None:
		szarp_path = os.path.realpath("/etc/szarp/default")
		xml_path = szarp_path + "/config/params.xml"
	else:
		xml_path = args.input_file
	xml_file = etree.parse(xml_path, options)
	params = xml_file.getroot()
	parameters = list(params)
	return parameters

def get_isl_list():
	isl_regex = re.compile(r".{1,}\.isl")
	ls = subprocess.Popen(("ls", os.path.realpath("/etc/szarp/default")+"/config/isl/"), stdout=subprocess.PIPE)
	isl_ls = ls.communicate()[0]
	isl_list = []
	for isl in isl_ls.split('\n'):
		if isl_regex.search(isl):
			isl_list.append(isl)
	return isl_list

def check_if_file_exist(parameters):
	file_to_check = re.compile(r"\/opt\/szarp\/.")
	not_found_files = []
	for device in parameters:
		for attr, value in device.items():
			find_file = file_to_check.search(value)
			if find_file is not None:
				if os.path.exists(value) is False:
					if not value in not_found_files:
						if device.get("daemon").endswith("testdmn") and attr == "path":
							# the source data file may not exist at this moment
							printnote("source data file for testdmn: '%s' does not exist" % value)
						else:
							printerr(value + " does not exist!")
						not_found_files.append(value)

def check_for_daemons(parameters):
	md5sum_regex = re.compile(r"[a-f0-9]{32}")
	daemon_regex = re.compile(r"(?<=\/opt\/szarp\/bin\/).*")
	daemons_list = []
	namespace_extra = "{http://www.praterm.com.pl/SZARP/ipk-extra}"
	for device in parameters:
		for attr, value in device.items():
			if attr == "daemon":
				if not value in daemons_list:
					daemons_list.insert(0,value)
					md5sum_check = 0
					if daemon_regex.search(value):
						daemon = daemon_regex.search(value)
					else:
						continue
					with open("/var/lib/dpkg/info/szarp-daemons.md5sums", "r") as md5file:
						for line in md5file:
							standard_daemon_md5sum = re.search(r"[a-f0-9]{32}.{16}" + daemon.group(0) , line)
							if standard_daemon_md5sum is not None:
								md5sum = md5sum_regex.search(line)
								md5sum_check = md5sum.group(0)
								break
					try:
						daemon_md5sum = hashlib.md5(open(value, 'rb').read()).hexdigest()
					except:
						daemon_md5sum = 0
					if md5sum_check != daemon_md5sum is not None:
						add_note("custom daemon found in " + value)
				if re.search(r"dbdmn.{0,}", value):
					for unit in device:
						for param in unit:
							param_path = param.get(namespace_extra + "param")
							if param_path is not None:
								base = re.search(r"(?P<base>[^:]*):", param_path).group("base")
								base_path = "/opt/szarp/" + base
								if not os.path.exists(base_path):
									printerr("extra:param base '%s' doesn't exist (line %d)" % (base, param.sourceline))

def check_send_elements(parameters):
	namespace = "{http://www.praterm.com.pl/SZARP/ipk}"
	for device in parameters:
		if device.tag == namespace + "device":
			for unit in device:
				for elements in unit:
					if elements.tag == namespace + "param":
						find_unit = False
						for attr, value in elements.items():
							if attr == "unit":
								find_unit = True
						if find_unit is False:
							printerr("atribute 'unit' in node 'param' not found (line  " + str(elements.sourceline) + ")")
					elif elements.tag == namespace + "send":
						try:
							if elements.getnext().tag != namespace + "send":
								add_note("found wrong order of 'send' elements (line " + str(elements.sourceline) + ")")
						except:
							pass
						for attr, value in elements.items():
							found_param_or_value = False
							if attr == "param" or attr == "value":
								found_param_or_value = True
								break
							elif attr == "min" or attr == "max":
								if "," in value:
									printerr("min/max in 'send' contains comma, dot symbol requested (line " + str(elements.sourceline) + ")")
						if found_param_or_value is False:
							printerr("found send without param or value (line " + str(elements.sourceline) + ")")

def check_if_parameter_exist(isl_list):
	options = etree.XMLParser(remove_blank_text=True, remove_comments=True)
	params_list = []
	for isl_file in isl_list:
		szarp_path = os.path.realpath("/etc/szarp/default")
		isl_path = szarp_path + "/config/isl/" + isl_file
		xml_file = etree.parse(isl_path, options)
		isl = xml_file.getroot()
		parameters = list(isl)
		for first_branch in parameters:
			for attr, value in first_branch.items():
				if "localhost" in value:
					internal_parameter = re.search(r"(?<=[0-9]{4}).+(?=@)", value)
					if not internal_parameter.group(0) in params_list:
						params_list.append(internal_parameter.group(0))
					else:
						continue
					if args.input_file is None:
						szarp_path = os.path.realpath("/etc/szarp/default")
						base_path = szarp_path + "/szbase" + internal_parameter.group(0)
						if not glob.glob(base_path + '*'):
							add_note("parameter " + internal_parameter.group(0) + " doesn't exist, called in isl:uri in " + isl_file + " (below line " + str(first_branch.sourceline) + ")")
			for second_branch in first_branch:
				for attr, value in second_branch.items():
					if "localhost" in value:
						internal_parameter = re.search(r"(?<=[0-9]{4}).+(?=@)", value)
						if not internal_parameter.group(0) in params_list:
							params_list.append(internal_parameter.group(0))
						else:
							continue
						if args.input_file is None:
							szarp_path = os.path.realpath("/etc/szarp/default")
							base_path = szarp_path + "/szbase" + internal_parameter.group(0)
							if not glob.glob(base_path + '*'):
								add_note("parameter " + internal_parameter.group(0) + " doesn't exist, called in isl:uri in " + isl_file + " (below line " + str(first_branch.sourceline) + ")")
				for third_branch in second_branch:
					for attr, value in third_branch.items():
						if "localhost" in value:
							internal_parameter = re.search(r"(?<=[0-9]{4}).+(?=@)", value)
							if not internal_parameter.group(0) in params_list:
								params_list.append(internal_parameter.group(0))
							else:
								continue
							if args.input_file is None:
								szarp_path = os.path.realpath("/etc/szarp/default")
								base_path = szarp_path + "/szbase" + internal_parameter.group(0)
								if not glob.glob(base_path + '*'):
									add_note("parameter " + internal_parameter.group(0) + " doesn't exist, called in isl:uri in " + isl_file + " (below line " + str(first_branch.sourceline) + ")")
					for fourth_branch in third_branch:
							for attr, value in fourth_branch.items():
								if "localhost" in value:
									internal_parameter = re.search(r"(?<=[0-9]{4}).+(?=@)", value)
									if not internal_parameter.group(0) in params_list:
										params_list.append(internal_parameter.group(0))
									else:
										continue
									if args.input_file is None:
										szarp_path = os.path.realpath("/etc/szarp/default")
										base_path = szarp_path + "/szbase" + internal_parameter.group(0)
										if not glob.glob(base_path + '*'):
											add_note("parameter " + internal_parameter.group(0) + " doesn't exist, called in isl:uri in " + isl_file + " (below line " + str(first_branch.sourceline) + ")")

def test_config_file(config):
	check_if_file_exist(config)
	check_for_daemons(config)
	check_send_elements(config)

def test_isl_file(isl_list):
	check_if_parameter_exist(isl_list)

parser = argparse.ArgumentParser(description='Parses params.xml and checks for errors.')
parser.add_argument('-i', '--input-file',
	help='XML config file (default is params.xml), passed to ipk2szarp')
parser.add_argument('-d', '--debug', type=int,
	help='debug level from 0 (errors only) to 9, passed to ipk2szarp')
parser.add_argument('-a', '--additional-test', action='store_true',
	help='do additional test of isls stored in ' + os.path.realpath("/etc/szarp/default"))
parser.add_argument('-q', '--quiet', action='store_true',
	help="hide not important messages, to be used e.g. in scripts")

args = parser.parse_args()

command = [conf_parser]

if args.debug:
	command.append('--debug=' + str(args.debug))

if args.input_file:
	command.append(args.input_file)

quiet = args.quiet

process = Popen(command, stderr=PIPE)
stdout, stderr = process.communicate()
if stderr:
	printerr(stderr.rstrip(), '')
return_code = process.returncode

if return_code == 0:
	if not quiet:
		add_note("if configuration has changed: /etc/init.d/parstart restart")
	check_svn()
	config = parse_config_file()
	test_config_file(config)
	if args.additional_test:
		isl_list = get_isl_list()
		test_isl_file(isl_list)
	print_notes()
	if error_count == 0:
		if not quiet:
			printok("OK")
	else:
		sys.exit(1)
else:
	printerr("ERROR", '')
	sys.exit(return_code)
