#!/usr/bin/perl -w
# SZARP: SCADA software 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

#$Id: update_debs 4421 2007-09-18 13:02:52Z koder $

# Script for updating all installed SZARP packages.

use strict;
use AptPkg::Config '$_config';
use AptPkg::System '$_system';
use AptPkg::Cache;
use IO::File;
use File::Copy;


sub subst_dpkgcfg {
	move("/etc/dpkg/dpkg.cfg", "/etc/dpkg/dpkg.cfg.bak");
	my $fh;
	$fh = new IO::File ">/etc/dpkg/dpkg.cfg";
	if (not defined($fh)) {
		return 0;
	}
	my $result = print $fh "force-confdef\n";
	undef $fh;

	if (not $result) {
		return 0;
	}
	return 1;
}

sub restore_dpkgcfg {
	move("/etc/dpkg/dpkg.cfg.bak", "/etc/dpkg/dpkg.cfg");
}


#Funkcja zwiedza graf zaleznosci miedzy pakietami szarp'a
#zwracajac dla podanego pakietu liste pakietow od niego 
#zaleznych. Elementy listy uszeregowane sa tak by zawsze
#pakiet zalezny znajdowal sie na dalszej pozycji niz
#pakiet, od ktorego on zalezy.
#przyjmuje 3 parametry
# package - referencje do obiektu AptPkg::Cache::Package dla ktorego
# 	chcemy wykonac operacje
# processed - referencja do tab. asocjacyjnej zawierajacej jako klucze
#	nazwy pakietow juz odwiedzonych	
# in_proggress - referencja do tab. asocjacyjnej zawieracej jako klucze
# 	pakiety ktore w danej chwili sa "przetwarzane" - zapobiega 
# 	zapetlenia funkcji gdy graf zalezenosci miedzy pakietami
#	zawiera cykle
sub process_package {
	my ($package, $processed, $in_progress) = @_;

	my $version = $package->{"CurrentVer"};
	#pakiet nie jest zainstalowany
	return () unless defined $version;
	
	my $name = $package->{"Name"};

	#ten element juz zostal dodany
	return () if defined $$processed{$name};

	#sprawdzamy czy nie ma cyklu w grafie
	return () if defined $$in_progress{$name};

	$$in_progress{$name} = 1;

	my @result;
	my $dependencies = $package->{"RevDependsList"};
	foreach my $dependency (@$dependencies) {
		my $parent = $dependency->{"ParentPkg"};

		next unless ($parent->{"Name"} =~ /szarp-.*/);

		next unless (($dependency->{"DepType"} == AptPkg::Dep::Depends) || \
			($dependency->{"DepType"} == AptPkg::Dep::PreDepends));

		next unless ($parent->{"CurrentState"} eq "Installed");

		my @dependent = process_package ($parent, $processed, $in_progress);

		unshift @result, @dependent;
	}

	$$processed{$name} = 1;

	unshift @result,$name;

	$$in_progress{$name} = undef;
	
	return @result;

}

sub debian_key_install {

	sub do_install {
		if (system("apt-get install debian-repository-key") != 0) { 
			print "W: Failed to install debian-repository-key package";
		} else {
			system("apt-get update");
		}
	}

	my $_system = $_[0];

	my $cache = AptPkg::Cache->new;
	my $p = $cache->{"debian-repository-key"};

	unless ($p) {
		print "W: debian-repository-key package is not in cache\n";
		return;
	}

	my $version= $p->{"CurrentVer"};

	unless (defined $version) {
		do_install;
		return;
	}

	my $versioning_system = $_system->versioning;

	my $version_list = $p->{"VersionList"};

	if ($version_list) {
		my $vers = $version->{"VerStr"};
		for my $av (@$version_list) {
			my $avs = $av->{"VerStr"};
			my $result = $versioning_system->compare($avs,$vers);
			if ($result > 0) {
				do_install;
				return;
			}
		}
	} else {
		print "W: No info about versions of debian-repository-key";
	}

	return;

}

system("apt-get -qq update") == 0 or die "apt-get update failed";
		
# supress cache building messages
$_config->{"quiet"} = 2;

# set up the cache
$_config->init;
$_system = $_config->system;

debian_key_install($_system);

my $cache = AptPkg::Cache->new;

my @sequence;
my %processed;

foreach my $package_name (keys %$cache) {
	next unless ($package_name =~ /szarp-.*/);
	my @result = process_package($cache->{$package_name}, \%processed);
	unshift @sequence, @result;
}

my $list = join(' ', @sequence);

subst_dpkgcfg() or die "UPDATE ABORTED - unable to modify /etc/dpkg/dpkg.cfg";

my $shall_die = 0;
system("apt-get -y install $list") == 0 or $shall_die = 1;
restore_dpkgcfg();

if ($shall_die) {
	die("apt-get install failed; if apt-get complains 'packages cannot be authenticated', you need to import GPG key of your SZARP repository, for example:\n  wget -O - http://www.szarp.org/debian/key.asc | apt-key add -\n");
}
1;

