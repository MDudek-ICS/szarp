#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8 :

import sys

from optparse import OptionParser , OptionGroup 

from libipk.params import Params
from libipk.plugins import Plugins

from lxml import etree

DEFAULT_PLUGINS = '/opt/szarp/lib/plugins/'
DEFAULT_RELAXNG = '/opt/szarp/resources/dtd/ipk-params.rng'

class App :
	def __init__( self ) :
		self.usage = 'usage: $prog [options] <Plugin> [<argument>:<value> [...]]'

		self.plugins = Plugins()
		self.params = None

		self.parse_cmdline()


	def parse_cmdline( self ) :
		self.parser = OptionParser( usage = self.usage )
		self.parser.add_option("-L" , "--list-plugins" ,
				dest="list_plugins" ,
				action="store_true" ,
				help = "shows list of available plugins and quits" )
		self.parser.add_option("-H" , "--help-plugin" ,
				dest="help_plugin"  ,
				action="store_true" ,
				help = "shows help for specified plugin and quits" )
		self.parser.add_option("-p" , "--params" ,
				metavar = "<params.xml>" ,
				help = "xml file with configuration" )
		self.parser.add_option("-b" , "--base" ,
				metavar="<prefix>" ,
				help = "SZARP base prefix" )
		self.parser.add_option("-n" , "--not-validate" ,
				dest="not_validate" ,
				action="store_true" ,
				help = "if present params will not be validate with relax-ng schema." )
		self.parser.add_option("-g" , "--relax-ng" ,
				dest="relax_ng" ,
				metavar="<ipk-params.rng>" ,
				help="specify relax-ng schema. Defaults to %s." % DEFAULT_RELAXNG ,
				default = DEFAULT_RELAXNG )
		self.parser.add_option("-w" , "--write" ,
				action="store_true" ,
				help = "turns read-write mode" )
		self.parser.add_option("-q" , "--quiet" ,
				action="store_true" ,
				help = "turns quiet mode" )
		self.parser.add_option("-e" , "--headers" ,
				action="store_true" ,
				help = "prints only first line of tag" )
		self.parser.add_option("" , "--load" ,
				metavar = "<path>" ,
				help = "directory where plugins are stored. Defaults to %s." % DEFAULT_PLUGINS ,
				default = DEFAULT_PLUGINS )

		self.options , self.args = self.parser.parse_args()

	def print_plugin_list( self ) :
		if self.options.list_plugins :
			print("Available plugins:")
			print("")
			for n in self.plugins.names() :
				print("  %s    \t%s" % ( n , self.plugins.help(n).splitlines()[0] ) )
			sys.exit(0)

	def print_plugin_help( self ) :
		if self.options.help_plugin :
			print( 'Help for %s:' % self.plgname )
			print( '' )
			for h in self.plugins.help(self.plgname).splitlines() :
				print("  %s" % h )
			sys.exit(0)

	def validate_options( self ) :
		if self.options.params and self.options.base :
			self.parser.error("Options --params and --base are mutually exclusive.")
		if not self.options.params and not self.options.base :
			self.parser.error("One of --params or --base must be specified.")

	def validate_args( self ) :

		if len(self.args) < 1 :
			self.plgname = None
		else :
			self.plgname = self.args[0]
			if not self.plugins.available( self.args[0] ) :
				self.parser.error("No such plugin available. Use -L to list available plugins.")

	def ask_for_args( self , args ) :
		res = {}
		while len(self.args) >= 2 :
			try :
				k , v = self.args.pop().split(':')
				res[k] = v
			except ValueError :
				self.parser.error("Invalid argument list")

		for a in args :
			if a in res : continue
			if sys.version_info < (3,0) :
				res[a] = raw_input(a + ": ")
			else :
				res[a] = input(a + ":  ")
		return res

	def print_result( self , nodes ) :
		if self.options.quiet :
			return
		print('')
		print('')
		for n in nodes :
			print('line %d:' % n.getline())
			if self.options.headers :
				print( '    ' + n.toline() )
			else :
				print( '    ' + n.tostring() )
			print('')

	def run( self ) :
		try :
			self.plugins.load( self.options.load )
		except OSError :
			print('Improper plugins directory: %s' % self.options.load )
		except ImportError as e :
			print('Cannot load plugin: %s' % repr(e) )

		self.print_plugin_list()

		self.validate_args()

		self.print_plugin_help()

		self.validate_options()

		if self.plgname != None :
			args = self.ask_for_args( self.plugins.get_args(self.plgname) )
			plg = self.plugins.get( self.plgname , args )
		else :
			plg = None

		if self.options.params : 
			paramsfile = self.options.params 
		else :
			# TODO: use custom sharp install path
			paramsfile = "/opt/szarp/" + self.options.base + "/config/params.xml"

		if self.options.not_validate :
			relaxng = None
		else :
			relaxng = self.options.relax_ng

		self.params = Params( paramsfile , relaxng )

		if self.params.validate_log() != None :
			print '='*10 + 'RelaxNG' + '='*10
			print self.params.validate_log()
			print '='*27

		if plg != None :
			plg.process( self.params.getroot().node )
			results = self.params.rebuild_tree( plg.result() )
			self.print_result( results )

		if self.params.close() and self.options.write :
			try :
				self.params.save() 
			except ValueError :
				print '='*10 + RelaxNG + '='*10
				print self.params.validate_log()
				print '='*27

		return 0

if __name__ == '__main__' :

	app = App()
	res = app.run()
	sys.exit(res)

